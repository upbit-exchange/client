/*
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import java.math.BigDecimal;
import io.swagger.client.model.Error;
import io.swagger.client.model.NewOrder;
import io.swagger.client.model.Order;
import io.swagger.client.model.OrderChance;
import io.swagger.client.model.OrderInfo;
import io.swagger.client.model.Orderbook;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrderApi
 */
@Ignore
public class OrderApiTest {

    private final OrderApi api = new OrderApi();

    
    /**
     * 주문 취소 접수
     *
     * ## 주문 UUID를 통해 해당 주문에 대한 취소 접수를 한다. **NOTE**: &#x60;uuid&#x60; 혹은 &#x60;identifier&#x60; 둘 중 하나의 값이 반드시 포함되어야 합니다. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderCancelTest() throws ApiException {
        String uuid = null;
        String identifier = null;
        Order response = api.orderCancel(uuid, identifier);

        // TODO: test validations
    }
    
    /**
     * 주문 가능 정보
     *
     * ## 마켓별 주문 가능 정보를 확인한다. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderChanceTest() throws ApiException {
        String market = null;
        OrderChance response = api.orderChance(market);

        // TODO: test validations
    }
    
    /**
     * 개별 주문 조회
     *
     * ## 주문 UUID를 통해 개별 주문건을 조회한다. **NOTE**: &#x60;uuid&#x60; 혹은 &#x60;identifier&#x60; 둘 중 하나의 값이 반드시 포함되어야 합니다. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderInfoTest() throws ApiException {
        String uuid = null;
        String identifier = null;
        OrderInfo response = api.orderInfo(uuid, identifier);

        // TODO: test validations
    }
    
    /**
     * 주문 리스트 조회
     *
     * ## 주문 리스트를 조회한다. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderInfoAllTest() throws ApiException {
        String market = null;
        String state = null;
        List<String> states = null;
        List<String> uuids = null;
        List<String> identifiers = null;
        BigDecimal page = null;
        BigDecimal limit = null;
        String orderBy = null;
        List<Order> response = api.orderInfoAll(market, state, states, uuids, identifiers, page, limit, orderBy);

        // TODO: test validations
    }
    
    /**
     * 주문하기
     *
     * ## 주문 요청을 한다. **NOTE**: 원화 마켓 가격 단위를 확인하세요. 원화 마켓에서 주문을 요청 할 경우, [원화 마켓 주문 가격 단위](https://docs.upbit.com/docs/market-info-trade-price-detail)를 확인하여 값을 입력해주세요. **NOTE**: identifier 파라미터 사용 &#x60;identifier&#x60;는 서비스에서 발급하는 &#x60;uuid&#x60;가 아닌 이용자가 직접 발급하는 키값으로, 주문을 조회하기 위해 할당하는 값입니다. 해당 값은 사용자의 전체 주문 내 유일한 값을 전달해야하며, 비록 주문 요청시 오류가 발생하더라도 같은 값으로 다시 요청을 보낼 수 없습니다. 주문의 성공 / 실패 여부와 관계없이 중복해서 들어온 &#x60;identifier&#x60; 값에서는 중복 오류가 발생하니, 매 요청시 새로운 값을 생성해주세요. **NOTE**: 시장가 주문 시장가 주문은 &#x60;ord_type&#x60; 필드를 &#x60;price&#x60; or &#x60;market&#x60; 으로 설정해야됩니다. 매수 주문의 경우 &#x60;ord_type&#x60;을 &#x60;price&#x60;로 설정하고 &#x60;volume&#x60;을 &#x60;null&#x60; 혹은 제외해야됩니다. 매도 주문의 경우 &#x60;ord_type&#x60;을 &#x60;market&#x60;로 설정하고 &#x60;price&#x60;을 &#x60;null&#x60; 혹은 제외해야됩니다. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderNewTest() throws ApiException {
        String market = null;
        String side = null;
        String ordType = null;
        String volume = null;
        String price = null;
        String identifier = null;
        NewOrder response = api.orderNew(market, side, ordType, volume, price, identifier);

        // TODO: test validations
    }
    
    /**
     * 시세 호가 정보(Orderbook) 조회
     *
     * ## 호가 정보 조회 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderOrderbookTest() throws ApiException {
        List<String> markets = null;
        List<Orderbook> response = api.orderOrderbook(markets);

        // TODO: test validations
    }
    
}
