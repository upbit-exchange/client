# coding: utf-8

"""
    Upbit Open API

    ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com]   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ujhin942@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TradeApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def trade_ticker(self, markets, **kwargs):  # noqa: E501
        """시세 Ticker 조회  # noqa: E501

        ## 현재가 정보 요청 당시 종목의 스냅샷을 반환한다.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trade_ticker(markets, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str markets: 반점으로 구분되는 마켓 코드 (ex. KRW-BTC, BTC-BCC)  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.trade_ticker_with_http_info(markets, **kwargs)  # noqa: E501
        else:
            (data) = self.trade_ticker_with_http_info(markets, **kwargs)  # noqa: E501
            return data

    def trade_ticker_with_http_info(self, markets, **kwargs):  # noqa: E501
        """시세 Ticker 조회  # noqa: E501

        ## 현재가 정보 요청 당시 종목의 스냅샷을 반환한다.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trade_ticker_with_http_info(markets, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str markets: 반점으로 구분되는 마켓 코드 (ex. KRW-BTC, BTC-BCC)  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['markets']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trade_ticker" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'markets' is set
        if ('markets' not in params or
                params['markets'] is None):
            raise ValueError("Missing the required parameter `markets` when calling `trade_ticker`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'markets' in params:
            query_params.append(('markets', params['markets']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ticker', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def trade_ticks(self, market, **kwargs):  # noqa: E501
        """시세 체결 조회  # noqa: E501

        ## 최근 체결 내역   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trade_ticks(market, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market: 마켓 코드 (ex. KRW-BTC, BTC-BCC)  (required)
        :param str to: 마지막 체결 시각. 형식 : `[HHmmss 또는 HH:mm:ss]`. 비워서 요청시 가장 최근 데이터 
        :param float count: 체결 개수 
        :param str cursor: 페이지네이션 커서 (sequentialId)  `sequential_id` 필드는 체결의 유일성 판단을 위한 근거로 쓰일 수 있습니다. 하지만 체결의 순서를 보장하지는 못합니다. 
        :param float days_ago: 최근 체결 날짜 기준 7일 이내의 이전 데이터 조회 가능. 비워서 요청 시 가장 최근 체결 날짜 반환. (범위: 1 ~ 7) 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.trade_ticks_with_http_info(market, **kwargs)  # noqa: E501
        else:
            (data) = self.trade_ticks_with_http_info(market, **kwargs)  # noqa: E501
            return data

    def trade_ticks_with_http_info(self, market, **kwargs):  # noqa: E501
        """시세 체결 조회  # noqa: E501

        ## 최근 체결 내역   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trade_ticks_with_http_info(market, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market: 마켓 코드 (ex. KRW-BTC, BTC-BCC)  (required)
        :param str to: 마지막 체결 시각. 형식 : `[HHmmss 또는 HH:mm:ss]`. 비워서 요청시 가장 최근 데이터 
        :param float count: 체결 개수 
        :param str cursor: 페이지네이션 커서 (sequentialId)  `sequential_id` 필드는 체결의 유일성 판단을 위한 근거로 쓰일 수 있습니다. 하지만 체결의 순서를 보장하지는 못합니다. 
        :param float days_ago: 최근 체결 날짜 기준 7일 이내의 이전 데이터 조회 가능. 비워서 요청 시 가장 최근 체결 날짜 반환. (범위: 1 ~ 7) 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['market', 'to', 'count', 'cursor', 'days_ago']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trade_ticks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'market' is set
        if ('market' not in params or
                params['market'] is None):
            raise ValueError("Missing the required parameter `market` when calling `trade_ticks`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'market' in params:
            query_params.append(('market', params['market']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'days_ago' in params:
            query_params.append(('daysAgo', params['days_ago']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/trades/ticks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
