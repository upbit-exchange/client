# coding: utf-8

"""
    Upbit Open API

    ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com]   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ujhin942@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Trade(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'market': 'str',
        'uuid': 'str',
        'price': 'str',
        'volume': 'str',
        'funds': 'str',
        'side': 'str',
        'created_at': 'str'
    }

    attribute_map = {
        'market': 'market',
        'uuid': 'uuid',
        'price': 'price',
        'volume': 'volume',
        'funds': 'funds',
        'side': 'side',
        'created_at': 'created_at'
    }

    def __init__(self, market=None, uuid=None, price=None, volume=None, funds=None, side=None, created_at=None):  # noqa: E501
        """Trade - a model defined in Swagger"""  # noqa: E501

        self._market = None
        self._uuid = None
        self._price = None
        self._volume = None
        self._funds = None
        self._side = None
        self._created_at = None
        self.discriminator = None

        if market is not None:
            self.market = market
        if uuid is not None:
            self.uuid = uuid
        if price is not None:
            self.price = price
        if volume is not None:
            self.volume = volume
        if funds is not None:
            self.funds = funds
        if side is not None:
            self.side = side
        if created_at is not None:
            self.created_at = created_at

    @property
    def market(self):
        """Gets the market of this Trade.  # noqa: E501

        마켓의 유일 키  # noqa: E501

        :return: The market of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this Trade.

        마켓의 유일 키  # noqa: E501

        :param market: The market of this Trade.  # noqa: E501
        :type: str
        """

        self._market = market

    @property
    def uuid(self):
        """Gets the uuid of this Trade.  # noqa: E501

        체결의 고유 아이디  # noqa: E501

        :return: The uuid of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Trade.

        체결의 고유 아이디  # noqa: E501

        :param uuid: The uuid of this Trade.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def price(self):
        """Gets the price of this Trade.  # noqa: E501

        체결 가격  # noqa: E501

        :return: The price of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Trade.

        체결 가격  # noqa: E501

        :param price: The price of this Trade.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def volume(self):
        """Gets the volume of this Trade.  # noqa: E501

        체결 양  # noqa: E501

        :return: The volume of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this Trade.

        체결 양  # noqa: E501

        :param volume: The volume of this Trade.  # noqa: E501
        :type: str
        """

        self._volume = volume

    @property
    def funds(self):
        """Gets the funds of this Trade.  # noqa: E501

        체결된 총 가격  # noqa: E501

        :return: The funds of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._funds

    @funds.setter
    def funds(self, funds):
        """Sets the funds of this Trade.

        체결된 총 가격  # noqa: E501

        :param funds: The funds of this Trade.  # noqa: E501
        :type: str
        """

        self._funds = funds

    @property
    def side(self):
        """Gets the side of this Trade.  # noqa: E501

        체결 종류  # noqa: E501

        :return: The side of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this Trade.

        체결 종류  # noqa: E501

        :param side: The side of this Trade.  # noqa: E501
        :type: str
        """

        self._side = side

    @property
    def created_at(self):
        """Gets the created_at of this Trade.  # noqa: E501

        체결 시각  # noqa: E501

        :return: The created_at of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Trade.

        체결 시각  # noqa: E501

        :param created_at: The created_at of this Trade.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Trade, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Trade):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
