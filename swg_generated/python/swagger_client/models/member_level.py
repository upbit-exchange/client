# coding: utf-8

"""
    Upbit Open API

    ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com]   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ujhin942@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MemberLevel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'security_level': 'float',
        'fee_level': 'float',
        'email_verified': 'bool',
        'identity_auth_verified': 'bool',
        'bank_account_verified': 'bool',
        'kakao_pay_auth_verified': 'bool',
        'locked': 'bool',
        'wallet_locked': 'bool'
    }

    attribute_map = {
        'security_level': 'security_level',
        'fee_level': 'fee_level',
        'email_verified': 'email_verified',
        'identity_auth_verified': 'identity_auth_verified',
        'bank_account_verified': 'bank_account_verified',
        'kakao_pay_auth_verified': 'kakao_pay_auth_verified',
        'locked': 'locked',
        'wallet_locked': 'wallet_locked'
    }

    def __init__(self, security_level=None, fee_level=None, email_verified=None, identity_auth_verified=None, bank_account_verified=None, kakao_pay_auth_verified=None, locked=None, wallet_locked=None):  # noqa: E501
        """MemberLevel - a model defined in Swagger"""  # noqa: E501

        self._security_level = None
        self._fee_level = None
        self._email_verified = None
        self._identity_auth_verified = None
        self._bank_account_verified = None
        self._kakao_pay_auth_verified = None
        self._locked = None
        self._wallet_locked = None
        self.discriminator = None

        if security_level is not None:
            self.security_level = security_level
        if fee_level is not None:
            self.fee_level = fee_level
        if email_verified is not None:
            self.email_verified = email_verified
        if identity_auth_verified is not None:
            self.identity_auth_verified = identity_auth_verified
        if bank_account_verified is not None:
            self.bank_account_verified = bank_account_verified
        if kakao_pay_auth_verified is not None:
            self.kakao_pay_auth_verified = kakao_pay_auth_verified
        if locked is not None:
            self.locked = locked
        if wallet_locked is not None:
            self.wallet_locked = wallet_locked

    @property
    def security_level(self):
        """Gets the security_level of this MemberLevel.  # noqa: E501

        사용자의 보안 등급  # noqa: E501

        :return: The security_level of this MemberLevel.  # noqa: E501
        :rtype: float
        """
        return self._security_level

    @security_level.setter
    def security_level(self, security_level):
        """Sets the security_level of this MemberLevel.

        사용자의 보안 등급  # noqa: E501

        :param security_level: The security_level of this MemberLevel.  # noqa: E501
        :type: float
        """

        self._security_level = security_level

    @property
    def fee_level(self):
        """Gets the fee_level of this MemberLevel.  # noqa: E501

        사용자의 수수료 등급  # noqa: E501

        :return: The fee_level of this MemberLevel.  # noqa: E501
        :rtype: float
        """
        return self._fee_level

    @fee_level.setter
    def fee_level(self, fee_level):
        """Sets the fee_level of this MemberLevel.

        사용자의 수수료 등급  # noqa: E501

        :param fee_level: The fee_level of this MemberLevel.  # noqa: E501
        :type: float
        """

        self._fee_level = fee_level

    @property
    def email_verified(self):
        """Gets the email_verified of this MemberLevel.  # noqa: E501

        사용자의 이메일 인증 여부  # noqa: E501

        :return: The email_verified of this MemberLevel.  # noqa: E501
        :rtype: bool
        """
        return self._email_verified

    @email_verified.setter
    def email_verified(self, email_verified):
        """Sets the email_verified of this MemberLevel.

        사용자의 이메일 인증 여부  # noqa: E501

        :param email_verified: The email_verified of this MemberLevel.  # noqa: E501
        :type: bool
        """

        self._email_verified = email_verified

    @property
    def identity_auth_verified(self):
        """Gets the identity_auth_verified of this MemberLevel.  # noqa: E501

        사용자의 실명 인증 여부  # noqa: E501

        :return: The identity_auth_verified of this MemberLevel.  # noqa: E501
        :rtype: bool
        """
        return self._identity_auth_verified

    @identity_auth_verified.setter
    def identity_auth_verified(self, identity_auth_verified):
        """Sets the identity_auth_verified of this MemberLevel.

        사용자의 실명 인증 여부  # noqa: E501

        :param identity_auth_verified: The identity_auth_verified of this MemberLevel.  # noqa: E501
        :type: bool
        """

        self._identity_auth_verified = identity_auth_verified

    @property
    def bank_account_verified(self):
        """Gets the bank_account_verified of this MemberLevel.  # noqa: E501

        사용자의 계좌 인증 여부  # noqa: E501

        :return: The bank_account_verified of this MemberLevel.  # noqa: E501
        :rtype: bool
        """
        return self._bank_account_verified

    @bank_account_verified.setter
    def bank_account_verified(self, bank_account_verified):
        """Sets the bank_account_verified of this MemberLevel.

        사용자의 계좌 인증 여부  # noqa: E501

        :param bank_account_verified: The bank_account_verified of this MemberLevel.  # noqa: E501
        :type: bool
        """

        self._bank_account_verified = bank_account_verified

    @property
    def kakao_pay_auth_verified(self):
        """Gets the kakao_pay_auth_verified of this MemberLevel.  # noqa: E501

        사용자의 카카오페이 인증 여부  # noqa: E501

        :return: The kakao_pay_auth_verified of this MemberLevel.  # noqa: E501
        :rtype: bool
        """
        return self._kakao_pay_auth_verified

    @kakao_pay_auth_verified.setter
    def kakao_pay_auth_verified(self, kakao_pay_auth_verified):
        """Sets the kakao_pay_auth_verified of this MemberLevel.

        사용자의 카카오페이 인증 여부  # noqa: E501

        :param kakao_pay_auth_verified: The kakao_pay_auth_verified of this MemberLevel.  # noqa: E501
        :type: bool
        """

        self._kakao_pay_auth_verified = kakao_pay_auth_verified

    @property
    def locked(self):
        """Gets the locked of this MemberLevel.  # noqa: E501

        사용자의 계정 보호 상태  # noqa: E501

        :return: The locked of this MemberLevel.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this MemberLevel.

        사용자의 계정 보호 상태  # noqa: E501

        :param locked: The locked of this MemberLevel.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def wallet_locked(self):
        """Gets the wallet_locked of this MemberLevel.  # noqa: E501

        사용자의 출금 보호 상태  # noqa: E501

        :return: The wallet_locked of this MemberLevel.  # noqa: E501
        :rtype: bool
        """
        return self._wallet_locked

    @wallet_locked.setter
    def wallet_locked(self, wallet_locked):
        """Sets the wallet_locked of this MemberLevel.

        사용자의 출금 보호 상태  # noqa: E501

        :param wallet_locked: The wallet_locked of this MemberLevel.  # noqa: E501
        :type: bool
        """

        self._wallet_locked = wallet_locked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MemberLevel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemberLevel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
