# coding: utf-8

"""
    Upbit Open API

    ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com]   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ujhin942@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Bid(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'str',
        'price_unit': 'str',
        'min_total': 'float'
    }

    attribute_map = {
        'currency': 'currency',
        'price_unit': 'price_unit',
        'min_total': 'min_total'
    }

    def __init__(self, currency=None, price_unit=None, min_total=None):  # noqa: E501
        """Bid - a model defined in Swagger"""  # noqa: E501

        self._currency = None
        self._price_unit = None
        self._min_total = None
        self.discriminator = None

        if currency is not None:
            self.currency = currency
        if price_unit is not None:
            self.price_unit = price_unit
        if min_total is not None:
            self.min_total = min_total

    @property
    def currency(self):
        """Gets the currency of this Bid.  # noqa: E501

        화폐를 의미하는 영문 대문자 코드  # noqa: E501

        :return: The currency of this Bid.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Bid.

        화폐를 의미하는 영문 대문자 코드  # noqa: E501

        :param currency: The currency of this Bid.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def price_unit(self):
        """Gets the price_unit of this Bid.  # noqa: E501

        주문금액 단위  # noqa: E501

        :return: The price_unit of this Bid.  # noqa: E501
        :rtype: str
        """
        return self._price_unit

    @price_unit.setter
    def price_unit(self, price_unit):
        """Sets the price_unit of this Bid.

        주문금액 단위  # noqa: E501

        :param price_unit: The price_unit of this Bid.  # noqa: E501
        :type: str
        """

        self._price_unit = price_unit

    @property
    def min_total(self):
        """Gets the min_total of this Bid.  # noqa: E501

        최소 매도/매수 금액  # noqa: E501

        :return: The min_total of this Bid.  # noqa: E501
        :rtype: float
        """
        return self._min_total

    @min_total.setter
    def min_total(self, min_total):
        """Sets the min_total of this Bid.

        최소 매도/매수 금액  # noqa: E501

        :param min_total: The min_total of this Bid.  # noqa: E501
        :type: float
        """

        self._min_total = min_total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Bid, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Bid):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
