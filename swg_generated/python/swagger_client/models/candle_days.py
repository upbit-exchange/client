# coding: utf-8

"""
    Upbit Open API

    ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com]   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ujhin942@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CandleDays(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'market': 'str',
        'candle_date_time_utc': 'str',
        'candle_date_time_kst': 'str',
        'opening_price': 'float',
        'high_price': 'float',
        'low_price': 'float',
        'trade_price': 'float',
        'timestamp': 'float',
        'candle_acc_trade_price': 'float',
        'candle_acc_trade_volume': 'float',
        'prev_closing_price': 'float',
        'change_price': 'float',
        'change_rate': 'float',
        'converted_trade_price': 'float'
    }

    attribute_map = {
        'market': 'market',
        'candle_date_time_utc': 'candle_date_time_utc',
        'candle_date_time_kst': 'candle_date_time_kst',
        'opening_price': 'opening_price',
        'high_price': 'high_price',
        'low_price': 'low_price',
        'trade_price': 'trade_price',
        'timestamp': 'timestamp',
        'candle_acc_trade_price': 'candle_acc_trade_price',
        'candle_acc_trade_volume': 'candle_acc_trade_volume',
        'prev_closing_price': 'prev_closing_price',
        'change_price': 'change_price',
        'change_rate': 'change_rate',
        'converted_trade_price': 'converted_trade_price'
    }

    def __init__(self, market=None, candle_date_time_utc=None, candle_date_time_kst=None, opening_price=None, high_price=None, low_price=None, trade_price=None, timestamp=None, candle_acc_trade_price=None, candle_acc_trade_volume=None, prev_closing_price=None, change_price=None, change_rate=None, converted_trade_price=None):  # noqa: E501
        """CandleDays - a model defined in Swagger"""  # noqa: E501

        self._market = None
        self._candle_date_time_utc = None
        self._candle_date_time_kst = None
        self._opening_price = None
        self._high_price = None
        self._low_price = None
        self._trade_price = None
        self._timestamp = None
        self._candle_acc_trade_price = None
        self._candle_acc_trade_volume = None
        self._prev_closing_price = None
        self._change_price = None
        self._change_rate = None
        self._converted_trade_price = None
        self.discriminator = None

        if market is not None:
            self.market = market
        if candle_date_time_utc is not None:
            self.candle_date_time_utc = candle_date_time_utc
        if candle_date_time_kst is not None:
            self.candle_date_time_kst = candle_date_time_kst
        if opening_price is not None:
            self.opening_price = opening_price
        if high_price is not None:
            self.high_price = high_price
        if low_price is not None:
            self.low_price = low_price
        if trade_price is not None:
            self.trade_price = trade_price
        if timestamp is not None:
            self.timestamp = timestamp
        if candle_acc_trade_price is not None:
            self.candle_acc_trade_price = candle_acc_trade_price
        if candle_acc_trade_volume is not None:
            self.candle_acc_trade_volume = candle_acc_trade_volume
        if prev_closing_price is not None:
            self.prev_closing_price = prev_closing_price
        if change_price is not None:
            self.change_price = change_price
        if change_rate is not None:
            self.change_rate = change_rate
        if converted_trade_price is not None:
            self.converted_trade_price = converted_trade_price

    @property
    def market(self):
        """Gets the market of this CandleDays.  # noqa: E501

        마켓명  # noqa: E501

        :return: The market of this CandleDays.  # noqa: E501
        :rtype: str
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this CandleDays.

        마켓명  # noqa: E501

        :param market: The market of this CandleDays.  # noqa: E501
        :type: str
        """

        self._market = market

    @property
    def candle_date_time_utc(self):
        """Gets the candle_date_time_utc of this CandleDays.  # noqa: E501

        캔들 기준 시각 (UTC 기준)  # noqa: E501

        :return: The candle_date_time_utc of this CandleDays.  # noqa: E501
        :rtype: str
        """
        return self._candle_date_time_utc

    @candle_date_time_utc.setter
    def candle_date_time_utc(self, candle_date_time_utc):
        """Sets the candle_date_time_utc of this CandleDays.

        캔들 기준 시각 (UTC 기준)  # noqa: E501

        :param candle_date_time_utc: The candle_date_time_utc of this CandleDays.  # noqa: E501
        :type: str
        """

        self._candle_date_time_utc = candle_date_time_utc

    @property
    def candle_date_time_kst(self):
        """Gets the candle_date_time_kst of this CandleDays.  # noqa: E501

        캔들 기준 시각 (KST 기준)  # noqa: E501

        :return: The candle_date_time_kst of this CandleDays.  # noqa: E501
        :rtype: str
        """
        return self._candle_date_time_kst

    @candle_date_time_kst.setter
    def candle_date_time_kst(self, candle_date_time_kst):
        """Sets the candle_date_time_kst of this CandleDays.

        캔들 기준 시각 (KST 기준)  # noqa: E501

        :param candle_date_time_kst: The candle_date_time_kst of this CandleDays.  # noqa: E501
        :type: str
        """

        self._candle_date_time_kst = candle_date_time_kst

    @property
    def opening_price(self):
        """Gets the opening_price of this CandleDays.  # noqa: E501

        시가  # noqa: E501

        :return: The opening_price of this CandleDays.  # noqa: E501
        :rtype: float
        """
        return self._opening_price

    @opening_price.setter
    def opening_price(self, opening_price):
        """Sets the opening_price of this CandleDays.

        시가  # noqa: E501

        :param opening_price: The opening_price of this CandleDays.  # noqa: E501
        :type: float
        """

        self._opening_price = opening_price

    @property
    def high_price(self):
        """Gets the high_price of this CandleDays.  # noqa: E501

        고가  # noqa: E501

        :return: The high_price of this CandleDays.  # noqa: E501
        :rtype: float
        """
        return self._high_price

    @high_price.setter
    def high_price(self, high_price):
        """Sets the high_price of this CandleDays.

        고가  # noqa: E501

        :param high_price: The high_price of this CandleDays.  # noqa: E501
        :type: float
        """

        self._high_price = high_price

    @property
    def low_price(self):
        """Gets the low_price of this CandleDays.  # noqa: E501

        저가  # noqa: E501

        :return: The low_price of this CandleDays.  # noqa: E501
        :rtype: float
        """
        return self._low_price

    @low_price.setter
    def low_price(self, low_price):
        """Sets the low_price of this CandleDays.

        저가  # noqa: E501

        :param low_price: The low_price of this CandleDays.  # noqa: E501
        :type: float
        """

        self._low_price = low_price

    @property
    def trade_price(self):
        """Gets the trade_price of this CandleDays.  # noqa: E501

        종가  # noqa: E501

        :return: The trade_price of this CandleDays.  # noqa: E501
        :rtype: float
        """
        return self._trade_price

    @trade_price.setter
    def trade_price(self, trade_price):
        """Sets the trade_price of this CandleDays.

        종가  # noqa: E501

        :param trade_price: The trade_price of this CandleDays.  # noqa: E501
        :type: float
        """

        self._trade_price = trade_price

    @property
    def timestamp(self):
        """Gets the timestamp of this CandleDays.  # noqa: E501

        해당 캔들에서 마지막 틱이 저장된 시각  # noqa: E501

        :return: The timestamp of this CandleDays.  # noqa: E501
        :rtype: float
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this CandleDays.

        해당 캔들에서 마지막 틱이 저장된 시각  # noqa: E501

        :param timestamp: The timestamp of this CandleDays.  # noqa: E501
        :type: float
        """

        self._timestamp = timestamp

    @property
    def candle_acc_trade_price(self):
        """Gets the candle_acc_trade_price of this CandleDays.  # noqa: E501

        누적 거래 금액  # noqa: E501

        :return: The candle_acc_trade_price of this CandleDays.  # noqa: E501
        :rtype: float
        """
        return self._candle_acc_trade_price

    @candle_acc_trade_price.setter
    def candle_acc_trade_price(self, candle_acc_trade_price):
        """Sets the candle_acc_trade_price of this CandleDays.

        누적 거래 금액  # noqa: E501

        :param candle_acc_trade_price: The candle_acc_trade_price of this CandleDays.  # noqa: E501
        :type: float
        """

        self._candle_acc_trade_price = candle_acc_trade_price

    @property
    def candle_acc_trade_volume(self):
        """Gets the candle_acc_trade_volume of this CandleDays.  # noqa: E501

        누적 거래량  # noqa: E501

        :return: The candle_acc_trade_volume of this CandleDays.  # noqa: E501
        :rtype: float
        """
        return self._candle_acc_trade_volume

    @candle_acc_trade_volume.setter
    def candle_acc_trade_volume(self, candle_acc_trade_volume):
        """Sets the candle_acc_trade_volume of this CandleDays.

        누적 거래량  # noqa: E501

        :param candle_acc_trade_volume: The candle_acc_trade_volume of this CandleDays.  # noqa: E501
        :type: float
        """

        self._candle_acc_trade_volume = candle_acc_trade_volume

    @property
    def prev_closing_price(self):
        """Gets the prev_closing_price of this CandleDays.  # noqa: E501

        전일 종가 (UTC 0시 기준)  # noqa: E501

        :return: The prev_closing_price of this CandleDays.  # noqa: E501
        :rtype: float
        """
        return self._prev_closing_price

    @prev_closing_price.setter
    def prev_closing_price(self, prev_closing_price):
        """Sets the prev_closing_price of this CandleDays.

        전일 종가 (UTC 0시 기준)  # noqa: E501

        :param prev_closing_price: The prev_closing_price of this CandleDays.  # noqa: E501
        :type: float
        """

        self._prev_closing_price = prev_closing_price

    @property
    def change_price(self):
        """Gets the change_price of this CandleDays.  # noqa: E501

        전일 종가 대비 변화 금액  # noqa: E501

        :return: The change_price of this CandleDays.  # noqa: E501
        :rtype: float
        """
        return self._change_price

    @change_price.setter
    def change_price(self, change_price):
        """Sets the change_price of this CandleDays.

        전일 종가 대비 변화 금액  # noqa: E501

        :param change_price: The change_price of this CandleDays.  # noqa: E501
        :type: float
        """

        self._change_price = change_price

    @property
    def change_rate(self):
        """Gets the change_rate of this CandleDays.  # noqa: E501

        전일 종가 대비 변화량  # noqa: E501

        :return: The change_rate of this CandleDays.  # noqa: E501
        :rtype: float
        """
        return self._change_rate

    @change_rate.setter
    def change_rate(self, change_rate):
        """Sets the change_rate of this CandleDays.

        전일 종가 대비 변화량  # noqa: E501

        :param change_rate: The change_rate of this CandleDays.  # noqa: E501
        :type: float
        """

        self._change_rate = change_rate

    @property
    def converted_trade_price(self):
        """Gets the converted_trade_price of this CandleDays.  # noqa: E501

        종가 환산 화폐 단위로 환산된 가격 (요청에 convertingPriceUnit 파라미터 없을 시 해당 필드 포함되지 않음.)   # noqa: E501

        :return: The converted_trade_price of this CandleDays.  # noqa: E501
        :rtype: float
        """
        return self._converted_trade_price

    @converted_trade_price.setter
    def converted_trade_price(self, converted_trade_price):
        """Sets the converted_trade_price of this CandleDays.

        종가 환산 화폐 단위로 환산된 가격 (요청에 convertingPriceUnit 파라미터 없을 시 해당 필드 포함되지 않음.)   # noqa: E501

        :param converted_trade_price: The converted_trade_price of this CandleDays.  # noqa: E501
        :type: float
        """

        self._converted_trade_price = converted_trade_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CandleDays, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CandleDays):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
