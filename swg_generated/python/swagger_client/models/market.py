# coding: utf-8

"""
    Upbit Open API

    ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com]   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ujhin942@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Market(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'order_types': 'list[str]',
        'order_sides': 'list[str]',
        'bid': 'Bid',
        'ask': 'Ask',
        'max_total': 'str',
        'state': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'order_types': 'order_types',
        'order_sides': 'order_sides',
        'bid': 'bid',
        'ask': 'ask',
        'max_total': 'max_total',
        'state': 'state'
    }

    def __init__(self, id=None, name=None, order_types=None, order_sides=None, bid=None, ask=None, max_total=None, state=None):  # noqa: E501
        """Market - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._order_types = None
        self._order_sides = None
        self._bid = None
        self._ask = None
        self._max_total = None
        self._state = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if order_types is not None:
            self.order_types = order_types
        if order_sides is not None:
            self.order_sides = order_sides
        if bid is not None:
            self.bid = bid
        if ask is not None:
            self.ask = ask
        if max_total is not None:
            self.max_total = max_total
        if state is not None:
            self.state = state

    @property
    def id(self):
        """Gets the id of this Market.  # noqa: E501

        마켓 ID  # noqa: E501

        :return: The id of this Market.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Market.

        마켓 ID  # noqa: E501

        :param id: The id of this Market.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Market.  # noqa: E501

        마켓 이름  # noqa: E501

        :return: The name of this Market.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Market.

        마켓 이름  # noqa: E501

        :param name: The name of this Market.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def order_types(self):
        """Gets the order_types of this Market.  # noqa: E501

        지원 주문 방식  # noqa: E501

        :return: The order_types of this Market.  # noqa: E501
        :rtype: list[str]
        """
        return self._order_types

    @order_types.setter
    def order_types(self, order_types):
        """Sets the order_types of this Market.

        지원 주문 방식  # noqa: E501

        :param order_types: The order_types of this Market.  # noqa: E501
        :type: list[str]
        """

        self._order_types = order_types

    @property
    def order_sides(self):
        """Gets the order_sides of this Market.  # noqa: E501

        지원 주문 종류  # noqa: E501

        :return: The order_sides of this Market.  # noqa: E501
        :rtype: list[str]
        """
        return self._order_sides

    @order_sides.setter
    def order_sides(self, order_sides):
        """Sets the order_sides of this Market.

        지원 주문 종류  # noqa: E501

        :param order_sides: The order_sides of this Market.  # noqa: E501
        :type: list[str]
        """

        self._order_sides = order_sides

    @property
    def bid(self):
        """Gets the bid of this Market.  # noqa: E501


        :return: The bid of this Market.  # noqa: E501
        :rtype: Bid
        """
        return self._bid

    @bid.setter
    def bid(self, bid):
        """Sets the bid of this Market.


        :param bid: The bid of this Market.  # noqa: E501
        :type: Bid
        """

        self._bid = bid

    @property
    def ask(self):
        """Gets the ask of this Market.  # noqa: E501


        :return: The ask of this Market.  # noqa: E501
        :rtype: Ask
        """
        return self._ask

    @ask.setter
    def ask(self, ask):
        """Sets the ask of this Market.


        :param ask: The ask of this Market.  # noqa: E501
        :type: Ask
        """

        self._ask = ask

    @property
    def max_total(self):
        """Gets the max_total of this Market.  # noqa: E501

        최대 매도/매수 금액  # noqa: E501

        :return: The max_total of this Market.  # noqa: E501
        :rtype: str
        """
        return self._max_total

    @max_total.setter
    def max_total(self, max_total):
        """Sets the max_total of this Market.

        최대 매도/매수 금액  # noqa: E501

        :param max_total: The max_total of this Market.  # noqa: E501
        :type: str
        """

        self._max_total = max_total

    @property
    def state(self):
        """Gets the state of this Market.  # noqa: E501

        마켓 운영 상태  # noqa: E501

        :return: The state of this Market.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Market.

        마켓 운영 상태  # noqa: E501

        :param state: The state of this Market.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Market, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Market):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
