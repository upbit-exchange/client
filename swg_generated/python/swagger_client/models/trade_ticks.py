# coding: utf-8

"""
    Upbit Open API

    ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com]   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ujhin942@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TradeTicks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'market': 'str',
        'trade_date_utc': 'str',
        'trade_time_utc': 'str',
        'timestamp': 'float',
        'trade_price': 'float',
        'trade_volume': 'float',
        'prev_closing_price': 'float',
        'change_price': 'float',
        'ask_bid': 'str',
        'sequential_id': 'float'
    }

    attribute_map = {
        'market': 'market',
        'trade_date_utc': 'trade_date_utc',
        'trade_time_utc': 'trade_time_utc',
        'timestamp': 'timestamp',
        'trade_price': 'trade_price',
        'trade_volume': 'trade_volume',
        'prev_closing_price': 'prev_closing_price',
        'change_price': 'change_price',
        'ask_bid': 'ask_bid',
        'sequential_id': 'sequential_id'
    }

    def __init__(self, market=None, trade_date_utc=None, trade_time_utc=None, timestamp=None, trade_price=None, trade_volume=None, prev_closing_price=None, change_price=None, ask_bid=None, sequential_id=None):  # noqa: E501
        """TradeTicks - a model defined in Swagger"""  # noqa: E501

        self._market = None
        self._trade_date_utc = None
        self._trade_time_utc = None
        self._timestamp = None
        self._trade_price = None
        self._trade_volume = None
        self._prev_closing_price = None
        self._change_price = None
        self._ask_bid = None
        self._sequential_id = None
        self.discriminator = None

        if market is not None:
            self.market = market
        if trade_date_utc is not None:
            self.trade_date_utc = trade_date_utc
        if trade_time_utc is not None:
            self.trade_time_utc = trade_time_utc
        if timestamp is not None:
            self.timestamp = timestamp
        if trade_price is not None:
            self.trade_price = trade_price
        if trade_volume is not None:
            self.trade_volume = trade_volume
        if prev_closing_price is not None:
            self.prev_closing_price = prev_closing_price
        if change_price is not None:
            self.change_price = change_price
        if ask_bid is not None:
            self.ask_bid = ask_bid
        if sequential_id is not None:
            self.sequential_id = sequential_id

    @property
    def market(self):
        """Gets the market of this TradeTicks.  # noqa: E501

        마켓 구분 코드  # noqa: E501

        :return: The market of this TradeTicks.  # noqa: E501
        :rtype: str
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this TradeTicks.

        마켓 구분 코드  # noqa: E501

        :param market: The market of this TradeTicks.  # noqa: E501
        :type: str
        """

        self._market = market

    @property
    def trade_date_utc(self):
        """Gets the trade_date_utc of this TradeTicks.  # noqa: E501

        체결 일자 (UTC 기준)  # noqa: E501

        :return: The trade_date_utc of this TradeTicks.  # noqa: E501
        :rtype: str
        """
        return self._trade_date_utc

    @trade_date_utc.setter
    def trade_date_utc(self, trade_date_utc):
        """Sets the trade_date_utc of this TradeTicks.

        체결 일자 (UTC 기준)  # noqa: E501

        :param trade_date_utc: The trade_date_utc of this TradeTicks.  # noqa: E501
        :type: str
        """

        self._trade_date_utc = trade_date_utc

    @property
    def trade_time_utc(self):
        """Gets the trade_time_utc of this TradeTicks.  # noqa: E501

        체결 시각 (UTC 기준)  # noqa: E501

        :return: The trade_time_utc of this TradeTicks.  # noqa: E501
        :rtype: str
        """
        return self._trade_time_utc

    @trade_time_utc.setter
    def trade_time_utc(self, trade_time_utc):
        """Sets the trade_time_utc of this TradeTicks.

        체결 시각 (UTC 기준)  # noqa: E501

        :param trade_time_utc: The trade_time_utc of this TradeTicks.  # noqa: E501
        :type: str
        """

        self._trade_time_utc = trade_time_utc

    @property
    def timestamp(self):
        """Gets the timestamp of this TradeTicks.  # noqa: E501

        체결 타임스탬프  # noqa: E501

        :return: The timestamp of this TradeTicks.  # noqa: E501
        :rtype: float
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this TradeTicks.

        체결 타임스탬프  # noqa: E501

        :param timestamp: The timestamp of this TradeTicks.  # noqa: E501
        :type: float
        """

        self._timestamp = timestamp

    @property
    def trade_price(self):
        """Gets the trade_price of this TradeTicks.  # noqa: E501

        체결 가격  # noqa: E501

        :return: The trade_price of this TradeTicks.  # noqa: E501
        :rtype: float
        """
        return self._trade_price

    @trade_price.setter
    def trade_price(self, trade_price):
        """Sets the trade_price of this TradeTicks.

        체결 가격  # noqa: E501

        :param trade_price: The trade_price of this TradeTicks.  # noqa: E501
        :type: float
        """

        self._trade_price = trade_price

    @property
    def trade_volume(self):
        """Gets the trade_volume of this TradeTicks.  # noqa: E501

        체결량  # noqa: E501

        :return: The trade_volume of this TradeTicks.  # noqa: E501
        :rtype: float
        """
        return self._trade_volume

    @trade_volume.setter
    def trade_volume(self, trade_volume):
        """Sets the trade_volume of this TradeTicks.

        체결량  # noqa: E501

        :param trade_volume: The trade_volume of this TradeTicks.  # noqa: E501
        :type: float
        """

        self._trade_volume = trade_volume

    @property
    def prev_closing_price(self):
        """Gets the prev_closing_price of this TradeTicks.  # noqa: E501

        전일 종가  # noqa: E501

        :return: The prev_closing_price of this TradeTicks.  # noqa: E501
        :rtype: float
        """
        return self._prev_closing_price

    @prev_closing_price.setter
    def prev_closing_price(self, prev_closing_price):
        """Sets the prev_closing_price of this TradeTicks.

        전일 종가  # noqa: E501

        :param prev_closing_price: The prev_closing_price of this TradeTicks.  # noqa: E501
        :type: float
        """

        self._prev_closing_price = prev_closing_price

    @property
    def change_price(self):
        """Gets the change_price of this TradeTicks.  # noqa: E501

        변화량  # noqa: E501

        :return: The change_price of this TradeTicks.  # noqa: E501
        :rtype: float
        """
        return self._change_price

    @change_price.setter
    def change_price(self, change_price):
        """Sets the change_price of this TradeTicks.

        변화량  # noqa: E501

        :param change_price: The change_price of this TradeTicks.  # noqa: E501
        :type: float
        """

        self._change_price = change_price

    @property
    def ask_bid(self):
        """Gets the ask_bid of this TradeTicks.  # noqa: E501

        매도/매수  # noqa: E501

        :return: The ask_bid of this TradeTicks.  # noqa: E501
        :rtype: str
        """
        return self._ask_bid

    @ask_bid.setter
    def ask_bid(self, ask_bid):
        """Sets the ask_bid of this TradeTicks.

        매도/매수  # noqa: E501

        :param ask_bid: The ask_bid of this TradeTicks.  # noqa: E501
        :type: str
        """

        self._ask_bid = ask_bid

    @property
    def sequential_id(self):
        """Gets the sequential_id of this TradeTicks.  # noqa: E501

        체결 번호 (Unique) `sequential_id` 필드는 체결의 유일성 판단을 위한 근거로 쓰일 수 있습니다. 하지만 체결의 순서를 보장하지는 못합니다.   # noqa: E501

        :return: The sequential_id of this TradeTicks.  # noqa: E501
        :rtype: float
        """
        return self._sequential_id

    @sequential_id.setter
    def sequential_id(self, sequential_id):
        """Sets the sequential_id of this TradeTicks.

        체결 번호 (Unique) `sequential_id` 필드는 체결의 유일성 판단을 위한 근거로 쓰일 수 있습니다. 하지만 체결의 순서를 보장하지는 못합니다.   # noqa: E501

        :param sequential_id: The sequential_id of this TradeTicks.  # noqa: E501
        :type: float
        """

        self._sequential_id = sequential_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TradeTicks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TradeTicks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
