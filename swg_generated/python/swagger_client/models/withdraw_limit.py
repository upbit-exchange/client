# coding: utf-8

"""
    Upbit Open API

    ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com]   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ujhin942@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WithdrawLimit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'str',
        'minimum': 'str',
        'onetime': 'str',
        'daily': 'str',
        'remaining_daily': 'str',
        'remaining_daily_krw': 'str',
        'fixed': 'float',
        'can_withdraw': 'bool'
    }

    attribute_map = {
        'currency': 'currency',
        'minimum': 'minimum',
        'onetime': 'onetime',
        'daily': 'daily',
        'remaining_daily': 'remaining_daily',
        'remaining_daily_krw': 'remaining_daily_krw',
        'fixed': 'fixed',
        'can_withdraw': 'can_withdraw'
    }

    def __init__(self, currency=None, minimum=None, onetime=None, daily=None, remaining_daily=None, remaining_daily_krw=None, fixed=None, can_withdraw=None):  # noqa: E501
        """WithdrawLimit - a model defined in Swagger"""  # noqa: E501

        self._currency = None
        self._minimum = None
        self._onetime = None
        self._daily = None
        self._remaining_daily = None
        self._remaining_daily_krw = None
        self._fixed = None
        self._can_withdraw = None
        self.discriminator = None

        if currency is not None:
            self.currency = currency
        if minimum is not None:
            self.minimum = minimum
        if onetime is not None:
            self.onetime = onetime
        if daily is not None:
            self.daily = daily
        if remaining_daily is not None:
            self.remaining_daily = remaining_daily
        if remaining_daily_krw is not None:
            self.remaining_daily_krw = remaining_daily_krw
        if fixed is not None:
            self.fixed = fixed
        if can_withdraw is not None:
            self.can_withdraw = can_withdraw

    @property
    def currency(self):
        """Gets the currency of this WithdrawLimit.  # noqa: E501

        화폐를 의미하는 영문 대문자 코드  # noqa: E501

        :return: The currency of this WithdrawLimit.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this WithdrawLimit.

        화폐를 의미하는 영문 대문자 코드  # noqa: E501

        :param currency: The currency of this WithdrawLimit.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def minimum(self):
        """Gets the minimum of this WithdrawLimit.  # noqa: E501

        출금 최소 금액/수량  # noqa: E501

        :return: The minimum of this WithdrawLimit.  # noqa: E501
        :rtype: str
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this WithdrawLimit.

        출금 최소 금액/수량  # noqa: E501

        :param minimum: The minimum of this WithdrawLimit.  # noqa: E501
        :type: str
        """

        self._minimum = minimum

    @property
    def onetime(self):
        """Gets the onetime of this WithdrawLimit.  # noqa: E501

        1회 출금 한도  # noqa: E501

        :return: The onetime of this WithdrawLimit.  # noqa: E501
        :rtype: str
        """
        return self._onetime

    @onetime.setter
    def onetime(self, onetime):
        """Sets the onetime of this WithdrawLimit.

        1회 출금 한도  # noqa: E501

        :param onetime: The onetime of this WithdrawLimit.  # noqa: E501
        :type: str
        """

        self._onetime = onetime

    @property
    def daily(self):
        """Gets the daily of this WithdrawLimit.  # noqa: E501

        1일 출금 한도  # noqa: E501

        :return: The daily of this WithdrawLimit.  # noqa: E501
        :rtype: str
        """
        return self._daily

    @daily.setter
    def daily(self, daily):
        """Sets the daily of this WithdrawLimit.

        1일 출금 한도  # noqa: E501

        :param daily: The daily of this WithdrawLimit.  # noqa: E501
        :type: str
        """

        self._daily = daily

    @property
    def remaining_daily(self):
        """Gets the remaining_daily of this WithdrawLimit.  # noqa: E501

        1일 잔여 출금 한도  # noqa: E501

        :return: The remaining_daily of this WithdrawLimit.  # noqa: E501
        :rtype: str
        """
        return self._remaining_daily

    @remaining_daily.setter
    def remaining_daily(self, remaining_daily):
        """Sets the remaining_daily of this WithdrawLimit.

        1일 잔여 출금 한도  # noqa: E501

        :param remaining_daily: The remaining_daily of this WithdrawLimit.  # noqa: E501
        :type: str
        """

        self._remaining_daily = remaining_daily

    @property
    def remaining_daily_krw(self):
        """Gets the remaining_daily_krw of this WithdrawLimit.  # noqa: E501

        통합 1일 잔여 출금 한도  # noqa: E501

        :return: The remaining_daily_krw of this WithdrawLimit.  # noqa: E501
        :rtype: str
        """
        return self._remaining_daily_krw

    @remaining_daily_krw.setter
    def remaining_daily_krw(self, remaining_daily_krw):
        """Sets the remaining_daily_krw of this WithdrawLimit.

        통합 1일 잔여 출금 한도  # noqa: E501

        :param remaining_daily_krw: The remaining_daily_krw of this WithdrawLimit.  # noqa: E501
        :type: str
        """

        self._remaining_daily_krw = remaining_daily_krw

    @property
    def fixed(self):
        """Gets the fixed of this WithdrawLimit.  # noqa: E501

        출금 금액/수량 소수점 자리 수  # noqa: E501

        :return: The fixed of this WithdrawLimit.  # noqa: E501
        :rtype: float
        """
        return self._fixed

    @fixed.setter
    def fixed(self, fixed):
        """Sets the fixed of this WithdrawLimit.

        출금 금액/수량 소수점 자리 수  # noqa: E501

        :param fixed: The fixed of this WithdrawLimit.  # noqa: E501
        :type: float
        """

        self._fixed = fixed

    @property
    def can_withdraw(self):
        """Gets the can_withdraw of this WithdrawLimit.  # noqa: E501

        출금 지원 여부  # noqa: E501

        :return: The can_withdraw of this WithdrawLimit.  # noqa: E501
        :rtype: bool
        """
        return self._can_withdraw

    @can_withdraw.setter
    def can_withdraw(self, can_withdraw):
        """Sets the can_withdraw of this WithdrawLimit.

        출금 지원 여부  # noqa: E501

        :param can_withdraw: The can_withdraw of this WithdrawLimit.  # noqa: E501
        :type: bool
        """

        self._can_withdraw = can_withdraw

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WithdrawLimit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WithdrawLimit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
