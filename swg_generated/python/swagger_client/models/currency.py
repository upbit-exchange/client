# coding: utf-8

"""
    Upbit Open API

    ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com]   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ujhin942@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Currency(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'withdraw_fee': 'str',
        'is_coin': 'bool',
        'wallet_state': 'str',
        'wallet_support': 'list[str]'
    }

    attribute_map = {
        'code': 'code',
        'withdraw_fee': 'withdraw_fee',
        'is_coin': 'is_coin',
        'wallet_state': 'wallet_state',
        'wallet_support': 'wallet_support'
    }

    def __init__(self, code=None, withdraw_fee=None, is_coin=None, wallet_state=None, wallet_support=None):  # noqa: E501
        """Currency - a model defined in Swagger"""  # noqa: E501

        self._code = None
        self._withdraw_fee = None
        self._is_coin = None
        self._wallet_state = None
        self._wallet_support = None
        self.discriminator = None

        if code is not None:
            self.code = code
        if withdraw_fee is not None:
            self.withdraw_fee = withdraw_fee
        if is_coin is not None:
            self.is_coin = is_coin
        if wallet_state is not None:
            self.wallet_state = wallet_state
        if wallet_support is not None:
            self.wallet_support = wallet_support

    @property
    def code(self):
        """Gets the code of this Currency.  # noqa: E501

        화폐를 의미하는 영문 대문자 코드  # noqa: E501

        :return: The code of this Currency.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Currency.

        화폐를 의미하는 영문 대문자 코드  # noqa: E501

        :param code: The code of this Currency.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def withdraw_fee(self):
        """Gets the withdraw_fee of this Currency.  # noqa: E501

        해당 화폐의 출금 수수료  # noqa: E501

        :return: The withdraw_fee of this Currency.  # noqa: E501
        :rtype: str
        """
        return self._withdraw_fee

    @withdraw_fee.setter
    def withdraw_fee(self, withdraw_fee):
        """Sets the withdraw_fee of this Currency.

        해당 화폐의 출금 수수료  # noqa: E501

        :param withdraw_fee: The withdraw_fee of this Currency.  # noqa: E501
        :type: str
        """

        self._withdraw_fee = withdraw_fee

    @property
    def is_coin(self):
        """Gets the is_coin of this Currency.  # noqa: E501

        화폐의 코인 여부  # noqa: E501

        :return: The is_coin of this Currency.  # noqa: E501
        :rtype: bool
        """
        return self._is_coin

    @is_coin.setter
    def is_coin(self, is_coin):
        """Sets the is_coin of this Currency.

        화폐의 코인 여부  # noqa: E501

        :param is_coin: The is_coin of this Currency.  # noqa: E501
        :type: bool
        """

        self._is_coin = is_coin

    @property
    def wallet_state(self):
        """Gets the wallet_state of this Currency.  # noqa: E501

        해당 화폐의 지갑 상태  # noqa: E501

        :return: The wallet_state of this Currency.  # noqa: E501
        :rtype: str
        """
        return self._wallet_state

    @wallet_state.setter
    def wallet_state(self, wallet_state):
        """Sets the wallet_state of this Currency.

        해당 화폐의 지갑 상태  # noqa: E501

        :param wallet_state: The wallet_state of this Currency.  # noqa: E501
        :type: str
        """

        self._wallet_state = wallet_state

    @property
    def wallet_support(self):
        """Gets the wallet_support of this Currency.  # noqa: E501

        해당 화폐가 지원하는 입출금 정보  # noqa: E501

        :return: The wallet_support of this Currency.  # noqa: E501
        :rtype: list[str]
        """
        return self._wallet_support

    @wallet_support.setter
    def wallet_support(self, wallet_support):
        """Sets the wallet_support of this Currency.

        해당 화폐가 지원하는 입출금 정보  # noqa: E501

        :param wallet_support: The wallet_support of this Currency.  # noqa: E501
        :type: list[str]
        """

        self._wallet_support = wallet_support

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Currency, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Currency):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
