# coding: utf-8

"""
    Upbit Open API

    ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com]   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ujhin942@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Orderbook(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'market': 'str',
        'timestamp': 'float',
        'total_ask_size': 'float',
        'total_bid_size': 'float',
        'orderbook_units': 'list[OrderbookUnit]'
    }

    attribute_map = {
        'market': 'market',
        'timestamp': 'timestamp',
        'total_ask_size': 'total_ask_size',
        'total_bid_size': 'total_bid_size',
        'orderbook_units': 'orderbook_units'
    }

    def __init__(self, market=None, timestamp=None, total_ask_size=None, total_bid_size=None, orderbook_units=None):  # noqa: E501
        """Orderbook - a model defined in Swagger"""  # noqa: E501

        self._market = None
        self._timestamp = None
        self._total_ask_size = None
        self._total_bid_size = None
        self._orderbook_units = None
        self.discriminator = None

        if market is not None:
            self.market = market
        if timestamp is not None:
            self.timestamp = timestamp
        if total_ask_size is not None:
            self.total_ask_size = total_ask_size
        if total_bid_size is not None:
            self.total_bid_size = total_bid_size
        if orderbook_units is not None:
            self.orderbook_units = orderbook_units

    @property
    def market(self):
        """Gets the market of this Orderbook.  # noqa: E501

        마켓 코드  # noqa: E501

        :return: The market of this Orderbook.  # noqa: E501
        :rtype: str
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this Orderbook.

        마켓 코드  # noqa: E501

        :param market: The market of this Orderbook.  # noqa: E501
        :type: str
        """

        self._market = market

    @property
    def timestamp(self):
        """Gets the timestamp of this Orderbook.  # noqa: E501

        호가 생성 시각  # noqa: E501

        :return: The timestamp of this Orderbook.  # noqa: E501
        :rtype: float
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Orderbook.

        호가 생성 시각  # noqa: E501

        :param timestamp: The timestamp of this Orderbook.  # noqa: E501
        :type: float
        """

        self._timestamp = timestamp

    @property
    def total_ask_size(self):
        """Gets the total_ask_size of this Orderbook.  # noqa: E501

        호가 매도 총 잔량  # noqa: E501

        :return: The total_ask_size of this Orderbook.  # noqa: E501
        :rtype: float
        """
        return self._total_ask_size

    @total_ask_size.setter
    def total_ask_size(self, total_ask_size):
        """Sets the total_ask_size of this Orderbook.

        호가 매도 총 잔량  # noqa: E501

        :param total_ask_size: The total_ask_size of this Orderbook.  # noqa: E501
        :type: float
        """

        self._total_ask_size = total_ask_size

    @property
    def total_bid_size(self):
        """Gets the total_bid_size of this Orderbook.  # noqa: E501

        호가 매수 총량  # noqa: E501

        :return: The total_bid_size of this Orderbook.  # noqa: E501
        :rtype: float
        """
        return self._total_bid_size

    @total_bid_size.setter
    def total_bid_size(self, total_bid_size):
        """Sets the total_bid_size of this Orderbook.

        호가 매수 총량  # noqa: E501

        :param total_bid_size: The total_bid_size of this Orderbook.  # noqa: E501
        :type: float
        """

        self._total_bid_size = total_bid_size

    @property
    def orderbook_units(self):
        """Gets the orderbook_units of this Orderbook.  # noqa: E501

        호가  # noqa: E501

        :return: The orderbook_units of this Orderbook.  # noqa: E501
        :rtype: list[OrderbookUnit]
        """
        return self._orderbook_units

    @orderbook_units.setter
    def orderbook_units(self, orderbook_units):
        """Sets the orderbook_units of this Orderbook.

        호가  # noqa: E501

        :param orderbook_units: The orderbook_units of this Orderbook.  # noqa: E501
        :type: list[OrderbookUnit]
        """

        self._orderbook_units = orderbook_units

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Orderbook, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Orderbook):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
