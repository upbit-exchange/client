# coding: utf-8

"""
    Upbit Open API

    ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com]   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ujhin942@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Wallet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'str',
        'wallet_state': 'str',
        'block_state': 'str',
        'block_height': 'float',
        'block_updated_at': 'str'
    }

    attribute_map = {
        'currency': 'currency',
        'wallet_state': 'wallet_state',
        'block_state': 'block_state',
        'block_height': 'block_height',
        'block_updated_at': 'block_updated_at'
    }

    def __init__(self, currency=None, wallet_state=None, block_state=None, block_height=None, block_updated_at=None):  # noqa: E501
        """Wallet - a model defined in Swagger"""  # noqa: E501

        self._currency = None
        self._wallet_state = None
        self._block_state = None
        self._block_height = None
        self._block_updated_at = None
        self.discriminator = None

        if currency is not None:
            self.currency = currency
        if wallet_state is not None:
            self.wallet_state = wallet_state
        if block_state is not None:
            self.block_state = block_state
        if block_height is not None:
            self.block_height = block_height
        if block_updated_at is not None:
            self.block_updated_at = block_updated_at

    @property
    def currency(self):
        """Gets the currency of this Wallet.  # noqa: E501

        화폐를 의미하는 영문 대문자 코드  # noqa: E501

        :return: The currency of this Wallet.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Wallet.

        화폐를 의미하는 영문 대문자 코드  # noqa: E501

        :param currency: The currency of this Wallet.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def wallet_state(self):
        """Gets the wallet_state of this Wallet.  # noqa: E501

        입출금 상태 - working : 입출금 가능 - withdraw_only : 출금만 가능 - deposit_only : 입금만 가능 - paused : 입출금 중단 - unsupported : 입출금 미지원   # noqa: E501

        :return: The wallet_state of this Wallet.  # noqa: E501
        :rtype: str
        """
        return self._wallet_state

    @wallet_state.setter
    def wallet_state(self, wallet_state):
        """Sets the wallet_state of this Wallet.

        입출금 상태 - working : 입출금 가능 - withdraw_only : 출금만 가능 - deposit_only : 입금만 가능 - paused : 입출금 중단 - unsupported : 입출금 미지원   # noqa: E501

        :param wallet_state: The wallet_state of this Wallet.  # noqa: E501
        :type: str
        """

        self._wallet_state = wallet_state

    @property
    def block_state(self):
        """Gets the block_state of this Wallet.  # noqa: E501

        블록 상태 - normal : 정상 - delayed : 지연 - inactive : 비활성 (점검 등)   # noqa: E501

        :return: The block_state of this Wallet.  # noqa: E501
        :rtype: str
        """
        return self._block_state

    @block_state.setter
    def block_state(self, block_state):
        """Sets the block_state of this Wallet.

        블록 상태 - normal : 정상 - delayed : 지연 - inactive : 비활성 (점검 등)   # noqa: E501

        :param block_state: The block_state of this Wallet.  # noqa: E501
        :type: str
        """

        self._block_state = block_state

    @property
    def block_height(self):
        """Gets the block_height of this Wallet.  # noqa: E501

        블록 높이  # noqa: E501

        :return: The block_height of this Wallet.  # noqa: E501
        :rtype: float
        """
        return self._block_height

    @block_height.setter
    def block_height(self, block_height):
        """Sets the block_height of this Wallet.

        블록 높이  # noqa: E501

        :param block_height: The block_height of this Wallet.  # noqa: E501
        :type: float
        """

        self._block_height = block_height

    @property
    def block_updated_at(self):
        """Gets the block_updated_at of this Wallet.  # noqa: E501

        블록 갱신 시각  # noqa: E501

        :return: The block_updated_at of this Wallet.  # noqa: E501
        :rtype: str
        """
        return self._block_updated_at

    @block_updated_at.setter
    def block_updated_at(self, block_updated_at):
        """Sets the block_updated_at of this Wallet.

        블록 갱신 시각  # noqa: E501

        :param block_updated_at: The block_updated_at of this Wallet.  # noqa: E501
        :type: str
        """

        self._block_updated_at = block_updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Wallet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Wallet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
