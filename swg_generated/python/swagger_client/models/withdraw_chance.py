# coding: utf-8

"""
    Upbit Open API

    ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com]   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ujhin942@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WithdrawChance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'member_level': 'MemberLevel',
        'currency': 'Currency',
        'account': 'Account',
        'withdraw_limit': 'WithdrawLimit'
    }

    attribute_map = {
        'member_level': 'member_level',
        'currency': 'currency',
        'account': 'account',
        'withdraw_limit': 'withdraw_limit'
    }

    def __init__(self, member_level=None, currency=None, account=None, withdraw_limit=None):  # noqa: E501
        """WithdrawChance - a model defined in Swagger"""  # noqa: E501

        self._member_level = None
        self._currency = None
        self._account = None
        self._withdraw_limit = None
        self.discriminator = None

        if member_level is not None:
            self.member_level = member_level
        if currency is not None:
            self.currency = currency
        if account is not None:
            self.account = account
        if withdraw_limit is not None:
            self.withdraw_limit = withdraw_limit

    @property
    def member_level(self):
        """Gets the member_level of this WithdrawChance.  # noqa: E501


        :return: The member_level of this WithdrawChance.  # noqa: E501
        :rtype: MemberLevel
        """
        return self._member_level

    @member_level.setter
    def member_level(self, member_level):
        """Sets the member_level of this WithdrawChance.


        :param member_level: The member_level of this WithdrawChance.  # noqa: E501
        :type: MemberLevel
        """

        self._member_level = member_level

    @property
    def currency(self):
        """Gets the currency of this WithdrawChance.  # noqa: E501


        :return: The currency of this WithdrawChance.  # noqa: E501
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this WithdrawChance.


        :param currency: The currency of this WithdrawChance.  # noqa: E501
        :type: Currency
        """

        self._currency = currency

    @property
    def account(self):
        """Gets the account of this WithdrawChance.  # noqa: E501


        :return: The account of this WithdrawChance.  # noqa: E501
        :rtype: Account
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this WithdrawChance.


        :param account: The account of this WithdrawChance.  # noqa: E501
        :type: Account
        """

        self._account = account

    @property
    def withdraw_limit(self):
        """Gets the withdraw_limit of this WithdrawChance.  # noqa: E501


        :return: The withdraw_limit of this WithdrawChance.  # noqa: E501
        :rtype: WithdrawLimit
        """
        return self._withdraw_limit

    @withdraw_limit.setter
    def withdraw_limit(self, withdraw_limit):
        """Sets the withdraw_limit of this WithdrawChance.


        :param withdraw_limit: The withdraw_limit of this WithdrawChance.  # noqa: E501
        :type: WithdrawLimit
        """

        self._withdraw_limit = withdraw_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WithdrawChance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WithdrawChance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
