# coding: utf-8

"""
    Upbit Open API

    ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com]   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ujhin942@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderChance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bid_fee': 'str',
        'ask_fee': 'str',
        'market': 'Market',
        'bid_account': 'BidAccount',
        'ask_account': 'AskAccount'
    }

    attribute_map = {
        'bid_fee': 'bid_fee',
        'ask_fee': 'ask_fee',
        'market': 'market',
        'bid_account': 'bid_account',
        'ask_account': 'ask_account'
    }

    def __init__(self, bid_fee=None, ask_fee=None, market=None, bid_account=None, ask_account=None):  # noqa: E501
        """OrderChance - a model defined in Swagger"""  # noqa: E501

        self._bid_fee = None
        self._ask_fee = None
        self._market = None
        self._bid_account = None
        self._ask_account = None
        self.discriminator = None

        if bid_fee is not None:
            self.bid_fee = bid_fee
        if ask_fee is not None:
            self.ask_fee = ask_fee
        if market is not None:
            self.market = market
        if bid_account is not None:
            self.bid_account = bid_account
        if ask_account is not None:
            self.ask_account = ask_account

    @property
    def bid_fee(self):
        """Gets the bid_fee of this OrderChance.  # noqa: E501

        매수 수수료 비율  # noqa: E501

        :return: The bid_fee of this OrderChance.  # noqa: E501
        :rtype: str
        """
        return self._bid_fee

    @bid_fee.setter
    def bid_fee(self, bid_fee):
        """Sets the bid_fee of this OrderChance.

        매수 수수료 비율  # noqa: E501

        :param bid_fee: The bid_fee of this OrderChance.  # noqa: E501
        :type: str
        """

        self._bid_fee = bid_fee

    @property
    def ask_fee(self):
        """Gets the ask_fee of this OrderChance.  # noqa: E501

        매도 수수료 비율  # noqa: E501

        :return: The ask_fee of this OrderChance.  # noqa: E501
        :rtype: str
        """
        return self._ask_fee

    @ask_fee.setter
    def ask_fee(self, ask_fee):
        """Sets the ask_fee of this OrderChance.

        매도 수수료 비율  # noqa: E501

        :param ask_fee: The ask_fee of this OrderChance.  # noqa: E501
        :type: str
        """

        self._ask_fee = ask_fee

    @property
    def market(self):
        """Gets the market of this OrderChance.  # noqa: E501


        :return: The market of this OrderChance.  # noqa: E501
        :rtype: Market
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this OrderChance.


        :param market: The market of this OrderChance.  # noqa: E501
        :type: Market
        """

        self._market = market

    @property
    def bid_account(self):
        """Gets the bid_account of this OrderChance.  # noqa: E501


        :return: The bid_account of this OrderChance.  # noqa: E501
        :rtype: BidAccount
        """
        return self._bid_account

    @bid_account.setter
    def bid_account(self, bid_account):
        """Sets the bid_account of this OrderChance.


        :param bid_account: The bid_account of this OrderChance.  # noqa: E501
        :type: BidAccount
        """

        self._bid_account = bid_account

    @property
    def ask_account(self):
        """Gets the ask_account of this OrderChance.  # noqa: E501


        :return: The ask_account of this OrderChance.  # noqa: E501
        :rtype: AskAccount
        """
        return self._ask_account

    @ask_account.setter
    def ask_account(self, ask_account):
        """Sets the ask_account of this OrderChance.


        :param ask_account: The ask_account of this OrderChance.  # noqa: E501
        :type: AskAccount
        """

        self._ask_account = ask_account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderChance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderChance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
