# coding: utf-8

"""
    Upbit Open API

    ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com]   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ujhin942@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NewOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'side': 'str',
        'ord_type': 'str',
        'price': 'str',
        'avg_price': 'str',
        'state': 'str',
        'market': 'str',
        'created_at': 'str',
        'volume': 'str',
        'remaining_volume': 'str',
        'reserved_fee': 'str',
        'remaining_fee': 'str',
        'paid_fee': 'str',
        'locked': 'str',
        'executed_volume': 'str',
        'trades_count': 'float'
    }

    attribute_map = {
        'uuid': 'uuid',
        'side': 'side',
        'ord_type': 'ord_type',
        'price': 'price',
        'avg_price': 'avg_price',
        'state': 'state',
        'market': 'market',
        'created_at': 'created_at',
        'volume': 'volume',
        'remaining_volume': 'remaining_volume',
        'reserved_fee': 'reserved_fee',
        'remaining_fee': 'remaining_fee',
        'paid_fee': 'paid_fee',
        'locked': 'locked',
        'executed_volume': 'executed_volume',
        'trades_count': 'trades_count'
    }

    def __init__(self, uuid=None, side=None, ord_type=None, price=None, avg_price=None, state=None, market=None, created_at=None, volume=None, remaining_volume=None, reserved_fee=None, remaining_fee=None, paid_fee=None, locked=None, executed_volume=None, trades_count=None):  # noqa: E501
        """NewOrder - a model defined in Swagger"""  # noqa: E501

        self._uuid = None
        self._side = None
        self._ord_type = None
        self._price = None
        self._avg_price = None
        self._state = None
        self._market = None
        self._created_at = None
        self._volume = None
        self._remaining_volume = None
        self._reserved_fee = None
        self._remaining_fee = None
        self._paid_fee = None
        self._locked = None
        self._executed_volume = None
        self._trades_count = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if side is not None:
            self.side = side
        if ord_type is not None:
            self.ord_type = ord_type
        if price is not None:
            self.price = price
        if avg_price is not None:
            self.avg_price = avg_price
        if state is not None:
            self.state = state
        if market is not None:
            self.market = market
        if created_at is not None:
            self.created_at = created_at
        if volume is not None:
            self.volume = volume
        if remaining_volume is not None:
            self.remaining_volume = remaining_volume
        if reserved_fee is not None:
            self.reserved_fee = reserved_fee
        if remaining_fee is not None:
            self.remaining_fee = remaining_fee
        if paid_fee is not None:
            self.paid_fee = paid_fee
        if locked is not None:
            self.locked = locked
        if executed_volume is not None:
            self.executed_volume = executed_volume
        if trades_count is not None:
            self.trades_count = trades_count

    @property
    def uuid(self):
        """Gets the uuid of this NewOrder.  # noqa: E501

        주문의 고유 아이디  # noqa: E501

        :return: The uuid of this NewOrder.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this NewOrder.

        주문의 고유 아이디  # noqa: E501

        :param uuid: The uuid of this NewOrder.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def side(self):
        """Gets the side of this NewOrder.  # noqa: E501

        주문 종류  # noqa: E501

        :return: The side of this NewOrder.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this NewOrder.

        주문 종류  # noqa: E501

        :param side: The side of this NewOrder.  # noqa: E501
        :type: str
        """

        self._side = side

    @property
    def ord_type(self):
        """Gets the ord_type of this NewOrder.  # noqa: E501

        주문 방식  # noqa: E501

        :return: The ord_type of this NewOrder.  # noqa: E501
        :rtype: str
        """
        return self._ord_type

    @ord_type.setter
    def ord_type(self, ord_type):
        """Sets the ord_type of this NewOrder.

        주문 방식  # noqa: E501

        :param ord_type: The ord_type of this NewOrder.  # noqa: E501
        :type: str
        """

        self._ord_type = ord_type

    @property
    def price(self):
        """Gets the price of this NewOrder.  # noqa: E501

        주문 당시 화폐 가격  # noqa: E501

        :return: The price of this NewOrder.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this NewOrder.

        주문 당시 화폐 가격  # noqa: E501

        :param price: The price of this NewOrder.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def avg_price(self):
        """Gets the avg_price of this NewOrder.  # noqa: E501

        체결 가격의 평균가  # noqa: E501

        :return: The avg_price of this NewOrder.  # noqa: E501
        :rtype: str
        """
        return self._avg_price

    @avg_price.setter
    def avg_price(self, avg_price):
        """Sets the avg_price of this NewOrder.

        체결 가격의 평균가  # noqa: E501

        :param avg_price: The avg_price of this NewOrder.  # noqa: E501
        :type: str
        """

        self._avg_price = avg_price

    @property
    def state(self):
        """Gets the state of this NewOrder.  # noqa: E501

        주문 상태  # noqa: E501

        :return: The state of this NewOrder.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NewOrder.

        주문 상태  # noqa: E501

        :param state: The state of this NewOrder.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def market(self):
        """Gets the market of this NewOrder.  # noqa: E501

        마켓의 유일키  # noqa: E501

        :return: The market of this NewOrder.  # noqa: E501
        :rtype: str
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this NewOrder.

        마켓의 유일키  # noqa: E501

        :param market: The market of this NewOrder.  # noqa: E501
        :type: str
        """

        self._market = market

    @property
    def created_at(self):
        """Gets the created_at of this NewOrder.  # noqa: E501

        주문 생성 시간  # noqa: E501

        :return: The created_at of this NewOrder.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this NewOrder.

        주문 생성 시간  # noqa: E501

        :param created_at: The created_at of this NewOrder.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def volume(self):
        """Gets the volume of this NewOrder.  # noqa: E501

        사용자가 입력한 주문 양  # noqa: E501

        :return: The volume of this NewOrder.  # noqa: E501
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this NewOrder.

        사용자가 입력한 주문 양  # noqa: E501

        :param volume: The volume of this NewOrder.  # noqa: E501
        :type: str
        """

        self._volume = volume

    @property
    def remaining_volume(self):
        """Gets the remaining_volume of this NewOrder.  # noqa: E501

        체결 후 남은 주문 양  # noqa: E501

        :return: The remaining_volume of this NewOrder.  # noqa: E501
        :rtype: str
        """
        return self._remaining_volume

    @remaining_volume.setter
    def remaining_volume(self, remaining_volume):
        """Sets the remaining_volume of this NewOrder.

        체결 후 남은 주문 양  # noqa: E501

        :param remaining_volume: The remaining_volume of this NewOrder.  # noqa: E501
        :type: str
        """

        self._remaining_volume = remaining_volume

    @property
    def reserved_fee(self):
        """Gets the reserved_fee of this NewOrder.  # noqa: E501

        수수료로 예약된 비용  # noqa: E501

        :return: The reserved_fee of this NewOrder.  # noqa: E501
        :rtype: str
        """
        return self._reserved_fee

    @reserved_fee.setter
    def reserved_fee(self, reserved_fee):
        """Sets the reserved_fee of this NewOrder.

        수수료로 예약된 비용  # noqa: E501

        :param reserved_fee: The reserved_fee of this NewOrder.  # noqa: E501
        :type: str
        """

        self._reserved_fee = reserved_fee

    @property
    def remaining_fee(self):
        """Gets the remaining_fee of this NewOrder.  # noqa: E501

        남은 수수료  # noqa: E501

        :return: The remaining_fee of this NewOrder.  # noqa: E501
        :rtype: str
        """
        return self._remaining_fee

    @remaining_fee.setter
    def remaining_fee(self, remaining_fee):
        """Sets the remaining_fee of this NewOrder.

        남은 수수료  # noqa: E501

        :param remaining_fee: The remaining_fee of this NewOrder.  # noqa: E501
        :type: str
        """

        self._remaining_fee = remaining_fee

    @property
    def paid_fee(self):
        """Gets the paid_fee of this NewOrder.  # noqa: E501

        사용된 수수료  # noqa: E501

        :return: The paid_fee of this NewOrder.  # noqa: E501
        :rtype: str
        """
        return self._paid_fee

    @paid_fee.setter
    def paid_fee(self, paid_fee):
        """Sets the paid_fee of this NewOrder.

        사용된 수수료  # noqa: E501

        :param paid_fee: The paid_fee of this NewOrder.  # noqa: E501
        :type: str
        """

        self._paid_fee = paid_fee

    @property
    def locked(self):
        """Gets the locked of this NewOrder.  # noqa: E501

        거래에 사용중인 비용  # noqa: E501

        :return: The locked of this NewOrder.  # noqa: E501
        :rtype: str
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this NewOrder.

        거래에 사용중인 비용  # noqa: E501

        :param locked: The locked of this NewOrder.  # noqa: E501
        :type: str
        """

        self._locked = locked

    @property
    def executed_volume(self):
        """Gets the executed_volume of this NewOrder.  # noqa: E501

        체결된 양  # noqa: E501

        :return: The executed_volume of this NewOrder.  # noqa: E501
        :rtype: str
        """
        return self._executed_volume

    @executed_volume.setter
    def executed_volume(self, executed_volume):
        """Sets the executed_volume of this NewOrder.

        체결된 양  # noqa: E501

        :param executed_volume: The executed_volume of this NewOrder.  # noqa: E501
        :type: str
        """

        self._executed_volume = executed_volume

    @property
    def trades_count(self):
        """Gets the trades_count of this NewOrder.  # noqa: E501

        해당 주문에 걸린 체결 수  # noqa: E501

        :return: The trades_count of this NewOrder.  # noqa: E501
        :rtype: float
        """
        return self._trades_count

    @trades_count.setter
    def trades_count(self, trades_count):
        """Sets the trades_count of this NewOrder.

        해당 주문에 걸린 체결 수  # noqa: E501

        :param trades_count: The trades_count of this NewOrder.  # noqa: E501
        :type: float
        """

        self._trades_count = trades_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewOrder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewOrder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
