/**
* Upbit Open API
* ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
*
* OpenAPI spec version: 1.0.0
* Contact: ujhin942@gmail.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis

import io.swagger.client.models.Error
import io.swagger.client.models.Withdraw
import io.swagger.client.models.WithdrawChance
import io.swagger.client.models.WithdrawCoin

import io.swagger.client.infrastructure.*

class WithdrawApi(basePath: kotlin.String = "https://api.upbit.com/v1") : ApiClient(basePath) {

    /**
    * 출금 가능 정보
    * ## 해당 통화의 가능한 출금 정보를 확인한다. 
    * @param currency Currency Symbol  
    * @return WithdrawChance
    */
    @Suppress("UNCHECKED_CAST")
    fun withdraw.chance(currency: kotlin.String) : WithdrawChance {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("currency" to listOf("$currency"))
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/withdraws/chance",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<WithdrawChance>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as WithdrawChance
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 코인 출금하기
    * ## 코인 출금을 요청한다. **NOTE**: 바로출금 이용 시 유의사항 업비트 회원의 주소가 아닌 주소로 바로출금을 요청하는 경우, 출금이 정상적으로 수행되지 않습니다. 반드시 주소를 확인 후 출금을 진행하시기 바랍니다. 
    * @param currency Currency 코드  
    * @param amount 출금 수량  
    * @param address 출금 가능 주소에 등록된 출금 주소  
    * @param secondaryAddress 2차 출금 주소 (필요한 코인에 한해서)  (optional)
    * @param transactionType 출금 유형 - default : 일반출금 - internal : 바로출금  (optional)
    * @return WithdrawCoin
    */
    @Suppress("UNCHECKED_CAST")
    fun withdraw.coin(currency: kotlin.String, amount: kotlin.String, address: kotlin.String, secondaryAddress: kotlin.String, transactionType: kotlin.String) : WithdrawCoin {
        val localVariableBody: kotlin.Any? = mapOf("currency" to currency, "amount" to amount, "address" to address, "secondary_address" to secondaryAddress, "transaction_type" to transactionType)
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/withdraws/coin",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<WithdrawCoin>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as WithdrawCoin
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 개별 출금 조회
    * ## 출금 UUID를 통해 개별 출금 정보를 조회한다. 
    * @param uuid 출금 UUID  (optional)
    * @param txid 출금 TXID  (optional)
    * @param currency Currency 코드  (optional)
    * @return Withdraw
    */
    @Suppress("UNCHECKED_CAST")
    fun withdraw.info(uuid: kotlin.String, txid: kotlin.String, currency: kotlin.String) : Withdraw {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("uuid" to listOf("$uuid"), "txid" to listOf("$txid"), "currency" to listOf("$currency"))
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/withdraw",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Withdraw>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Withdraw
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 출금 리스트 조회
    * ## 출금 리스트를 조회한다. 
    * @param currency Currency 코드  (optional)
    * @param state 출금 상태 - submitting : 처리 중 - submitted : 처리 완료 - almost_accepted : 출금대기중 - rejected : 거부 - accepted : 승인됨 - processing : 처리 중 - done : 완료 - canceled : 취소됨  (optional)
    * @param uuids 출금 UUID의 목록  (optional)
    * @param txids 출금 TXID의 목록  (optional)
    * @param limit 개수 제한 (default: 100, max: 100)  (optional)
    * @param page 페이지 수, default: 1  (optional)
    * @param orderBy 정렬 방식 - asc : 오름차순 - desc : 내림차순 (default)  (optional)
    * @return kotlin.Array<Withdraw>
    */
    @Suppress("UNCHECKED_CAST")
    fun withdraw.infoAll(currency: kotlin.String, state: kotlin.String, uuids: kotlin.Array<kotlin.String>, txids: kotlin.Array<kotlin.String>, limit: java.math.BigDecimal, page: java.math.BigDecimal, orderBy: kotlin.String) : kotlin.Array<Withdraw> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("currency" to listOf("$currency"), "state" to listOf("$state"), "uuids" to toMultiValue(uuids.toList(), "multi"), "txids" to toMultiValue(txids.toList(), "multi"), "limit" to listOf("$limit"), "page" to listOf("$page"), "order_by" to listOf("$orderBy"))
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/withdraws",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<Withdraw>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Withdraw>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 원화 출금하기
    * ## 원화 출금을 요청한다. 등록된 출금 계좌로 출금된다. 
    * @param amount 출금 원화 수량  
    * @return Withdraw
    */
    @Suppress("UNCHECKED_CAST")
    fun withdraw.krw(amount: kotlin.String) : Withdraw {
        val localVariableBody: kotlin.Any? = mapOf("amount" to amount)
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/withdraws/krw",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Withdraw>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Withdraw
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
