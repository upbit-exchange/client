/* 
 * Upbit Open API
 *
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TradeTicks
    /// </summary>
    [DataContract]
    public partial class TradeTicks :  IEquatable<TradeTicks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TradeTicks" /> class.
        /// </summary>
        /// <param name="market">마켓 구분 코드.</param>
        /// <param name="tradeDateUtc">체결 일자 (UTC 기준).</param>
        /// <param name="tradeTimeUtc">체결 시각 (UTC 기준).</param>
        /// <param name="timestamp">체결 타임스탬프.</param>
        /// <param name="tradePrice">체결 가격.</param>
        /// <param name="tradeVolume">체결량.</param>
        /// <param name="prevClosingPrice">전일 종가.</param>
        /// <param name="changePrice">변화량.</param>
        /// <param name="askBid">매도/매수.</param>
        /// <param name="sequentialId">체결 번호 (Unique)  &#x60;sequential_id&#x60; 필드는 체결의 유일성 판단을 위한 근거로 쓰일 수 있습니다. 하지만 체결의 순서를 보장하지는 못합니다. .</param>
        public TradeTicks(string market = default(string), string tradeDateUtc = default(string), string tradeTimeUtc = default(string), decimal? timestamp = default(decimal?), double? tradePrice = default(double?), double? tradeVolume = default(double?), double? prevClosingPrice = default(double?), double? changePrice = default(double?), string askBid = default(string), decimal? sequentialId = default(decimal?))
        {
            this.Market = market;
            this.TradeDateUtc = tradeDateUtc;
            this.TradeTimeUtc = tradeTimeUtc;
            this.Timestamp = timestamp;
            this.TradePrice = tradePrice;
            this.TradeVolume = tradeVolume;
            this.PrevClosingPrice = prevClosingPrice;
            this.ChangePrice = changePrice;
            this.AskBid = askBid;
            this.SequentialId = sequentialId;
        }
        
        /// <summary>
        /// 마켓 구분 코드
        /// </summary>
        /// <value>마켓 구분 코드</value>
        [DataMember(Name="market", EmitDefaultValue=false)]
        public string Market { get; set; }

        /// <summary>
        /// 체결 일자 (UTC 기준)
        /// </summary>
        /// <value>체결 일자 (UTC 기준)</value>
        [DataMember(Name="trade_date_utc", EmitDefaultValue=false)]
        public string TradeDateUtc { get; set; }

        /// <summary>
        /// 체결 시각 (UTC 기준)
        /// </summary>
        /// <value>체결 시각 (UTC 기준)</value>
        [DataMember(Name="trade_time_utc", EmitDefaultValue=false)]
        public string TradeTimeUtc { get; set; }

        /// <summary>
        /// 체결 타임스탬프
        /// </summary>
        /// <value>체결 타임스탬프</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public decimal? Timestamp { get; set; }

        /// <summary>
        /// 체결 가격
        /// </summary>
        /// <value>체결 가격</value>
        [DataMember(Name="trade_price", EmitDefaultValue=false)]
        public double? TradePrice { get; set; }

        /// <summary>
        /// 체결량
        /// </summary>
        /// <value>체결량</value>
        [DataMember(Name="trade_volume", EmitDefaultValue=false)]
        public double? TradeVolume { get; set; }

        /// <summary>
        /// 전일 종가
        /// </summary>
        /// <value>전일 종가</value>
        [DataMember(Name="prev_closing_price", EmitDefaultValue=false)]
        public double? PrevClosingPrice { get; set; }

        /// <summary>
        /// 변화량
        /// </summary>
        /// <value>변화량</value>
        [DataMember(Name="change_price", EmitDefaultValue=false)]
        public double? ChangePrice { get; set; }

        /// <summary>
        /// 매도/매수
        /// </summary>
        /// <value>매도/매수</value>
        [DataMember(Name="ask_bid", EmitDefaultValue=false)]
        public string AskBid { get; set; }

        /// <summary>
        /// 체결 번호 (Unique)  &#x60;sequential_id&#x60; 필드는 체결의 유일성 판단을 위한 근거로 쓰일 수 있습니다. 하지만 체결의 순서를 보장하지는 못합니다. 
        /// </summary>
        /// <value>체결 번호 (Unique)  &#x60;sequential_id&#x60; 필드는 체결의 유일성 판단을 위한 근거로 쓰일 수 있습니다. 하지만 체결의 순서를 보장하지는 못합니다. </value>
        [DataMember(Name="sequential_id", EmitDefaultValue=false)]
        public decimal? SequentialId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TradeTicks {\n");
            sb.Append("  Market: ").Append(Market).Append("\n");
            sb.Append("  TradeDateUtc: ").Append(TradeDateUtc).Append("\n");
            sb.Append("  TradeTimeUtc: ").Append(TradeTimeUtc).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  TradePrice: ").Append(TradePrice).Append("\n");
            sb.Append("  TradeVolume: ").Append(TradeVolume).Append("\n");
            sb.Append("  PrevClosingPrice: ").Append(PrevClosingPrice).Append("\n");
            sb.Append("  ChangePrice: ").Append(ChangePrice).Append("\n");
            sb.Append("  AskBid: ").Append(AskBid).Append("\n");
            sb.Append("  SequentialId: ").Append(SequentialId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TradeTicks);
        }

        /// <summary>
        /// Returns true if TradeTicks instances are equal
        /// </summary>
        /// <param name="input">Instance of TradeTicks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TradeTicks input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Market == input.Market ||
                    (this.Market != null &&
                    this.Market.Equals(input.Market))
                ) && 
                (
                    this.TradeDateUtc == input.TradeDateUtc ||
                    (this.TradeDateUtc != null &&
                    this.TradeDateUtc.Equals(input.TradeDateUtc))
                ) && 
                (
                    this.TradeTimeUtc == input.TradeTimeUtc ||
                    (this.TradeTimeUtc != null &&
                    this.TradeTimeUtc.Equals(input.TradeTimeUtc))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.TradePrice == input.TradePrice ||
                    (this.TradePrice != null &&
                    this.TradePrice.Equals(input.TradePrice))
                ) && 
                (
                    this.TradeVolume == input.TradeVolume ||
                    (this.TradeVolume != null &&
                    this.TradeVolume.Equals(input.TradeVolume))
                ) && 
                (
                    this.PrevClosingPrice == input.PrevClosingPrice ||
                    (this.PrevClosingPrice != null &&
                    this.PrevClosingPrice.Equals(input.PrevClosingPrice))
                ) && 
                (
                    this.ChangePrice == input.ChangePrice ||
                    (this.ChangePrice != null &&
                    this.ChangePrice.Equals(input.ChangePrice))
                ) && 
                (
                    this.AskBid == input.AskBid ||
                    (this.AskBid != null &&
                    this.AskBid.Equals(input.AskBid))
                ) && 
                (
                    this.SequentialId == input.SequentialId ||
                    (this.SequentialId != null &&
                    this.SequentialId.Equals(input.SequentialId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Market != null)
                    hashCode = hashCode * 59 + this.Market.GetHashCode();
                if (this.TradeDateUtc != null)
                    hashCode = hashCode * 59 + this.TradeDateUtc.GetHashCode();
                if (this.TradeTimeUtc != null)
                    hashCode = hashCode * 59 + this.TradeTimeUtc.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.TradePrice != null)
                    hashCode = hashCode * 59 + this.TradePrice.GetHashCode();
                if (this.TradeVolume != null)
                    hashCode = hashCode * 59 + this.TradeVolume.GetHashCode();
                if (this.PrevClosingPrice != null)
                    hashCode = hashCode * 59 + this.PrevClosingPrice.GetHashCode();
                if (this.ChangePrice != null)
                    hashCode = hashCode * 59 + this.ChangePrice.GetHashCode();
                if (this.AskBid != null)
                    hashCode = hashCode * 59 + this.AskBid.GetHashCode();
                if (this.SequentialId != null)
                    hashCode = hashCode * 59 + this.SequentialId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
