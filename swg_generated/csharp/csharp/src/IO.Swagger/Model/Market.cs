/* 
 * Upbit Open API
 *
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// 마켓에 대한 정보
    /// </summary>
    [DataContract]
    public partial class Market :  IEquatable<Market>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Market" /> class.
        /// </summary>
        /// <param name="id">마켓 ID.</param>
        /// <param name="name">마켓 이름.</param>
        /// <param name="orderTypes">지원 주문 방식.</param>
        /// <param name="orderSides">지원 주문 종류.</param>
        /// <param name="bid">bid.</param>
        /// <param name="ask">ask.</param>
        /// <param name="maxTotal">최대 매도/매수 금액.</param>
        /// <param name="state">마켓 운영 상태.</param>
        public Market(string id = default(string), string name = default(string), List<string> orderTypes = default(List<string>), List<string> orderSides = default(List<string>), Bid bid = default(Bid), Ask ask = default(Ask), string maxTotal = default(string), string state = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.OrderTypes = orderTypes;
            this.OrderSides = orderSides;
            this.Bid = bid;
            this.Ask = ask;
            this.MaxTotal = maxTotal;
            this.State = state;
        }
        
        /// <summary>
        /// 마켓 ID
        /// </summary>
        /// <value>마켓 ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// 마켓 이름
        /// </summary>
        /// <value>마켓 이름</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// 지원 주문 방식
        /// </summary>
        /// <value>지원 주문 방식</value>
        [DataMember(Name="order_types", EmitDefaultValue=false)]
        public List<string> OrderTypes { get; set; }

        /// <summary>
        /// 지원 주문 종류
        /// </summary>
        /// <value>지원 주문 종류</value>
        [DataMember(Name="order_sides", EmitDefaultValue=false)]
        public List<string> OrderSides { get; set; }

        /// <summary>
        /// Gets or Sets Bid
        /// </summary>
        [DataMember(Name="bid", EmitDefaultValue=false)]
        public Bid Bid { get; set; }

        /// <summary>
        /// Gets or Sets Ask
        /// </summary>
        [DataMember(Name="ask", EmitDefaultValue=false)]
        public Ask Ask { get; set; }

        /// <summary>
        /// 최대 매도/매수 금액
        /// </summary>
        /// <value>최대 매도/매수 금액</value>
        [DataMember(Name="max_total", EmitDefaultValue=false)]
        public string MaxTotal { get; set; }

        /// <summary>
        /// 마켓 운영 상태
        /// </summary>
        /// <value>마켓 운영 상태</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Market {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OrderTypes: ").Append(OrderTypes).Append("\n");
            sb.Append("  OrderSides: ").Append(OrderSides).Append("\n");
            sb.Append("  Bid: ").Append(Bid).Append("\n");
            sb.Append("  Ask: ").Append(Ask).Append("\n");
            sb.Append("  MaxTotal: ").Append(MaxTotal).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Market);
        }

        /// <summary>
        /// Returns true if Market instances are equal
        /// </summary>
        /// <param name="input">Instance of Market to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Market input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OrderTypes == input.OrderTypes ||
                    this.OrderTypes != null &&
                    this.OrderTypes.SequenceEqual(input.OrderTypes)
                ) && 
                (
                    this.OrderSides == input.OrderSides ||
                    this.OrderSides != null &&
                    this.OrderSides.SequenceEqual(input.OrderSides)
                ) && 
                (
                    this.Bid == input.Bid ||
                    (this.Bid != null &&
                    this.Bid.Equals(input.Bid))
                ) && 
                (
                    this.Ask == input.Ask ||
                    (this.Ask != null &&
                    this.Ask.Equals(input.Ask))
                ) && 
                (
                    this.MaxTotal == input.MaxTotal ||
                    (this.MaxTotal != null &&
                    this.MaxTotal.Equals(input.MaxTotal))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OrderTypes != null)
                    hashCode = hashCode * 59 + this.OrderTypes.GetHashCode();
                if (this.OrderSides != null)
                    hashCode = hashCode * 59 + this.OrderSides.GetHashCode();
                if (this.Bid != null)
                    hashCode = hashCode * 59 + this.Bid.GetHashCode();
                if (this.Ask != null)
                    hashCode = hashCode * 59 + this.Ask.GetHashCode();
                if (this.MaxTotal != null)
                    hashCode = hashCode * 59 + this.MaxTotal.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
