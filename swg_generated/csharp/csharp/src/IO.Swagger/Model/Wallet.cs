/* 
 * Upbit Open API
 *
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Wallet
    /// </summary>
    [DataContract]
    public partial class Wallet :  IEquatable<Wallet>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Wallet" /> class.
        /// </summary>
        /// <param name="currency">화폐를 의미하는 영문 대문자 코드.</param>
        /// <param name="walletState">입출금 상태 - working : 입출금 가능 - withdraw_only : 출금만 가능 - deposit_only : 입금만 가능 - paused : 입출금 중단 - unsupported : 입출금 미지원 .</param>
        /// <param name="blockState">블록 상태 - normal : 정상 - delayed : 지연 - inactive : 비활성 (점검 등) .</param>
        /// <param name="blockHeight">블록 높이.</param>
        /// <param name="blockUpdatedAt">블록 갱신 시각.</param>
        public Wallet(string currency = default(string), string walletState = default(string), string blockState = default(string), decimal? blockHeight = default(decimal?), string blockUpdatedAt = default(string))
        {
            this.Currency = currency;
            this.WalletState = walletState;
            this.BlockState = blockState;
            this.BlockHeight = blockHeight;
            this.BlockUpdatedAt = blockUpdatedAt;
        }
        
        /// <summary>
        /// 화폐를 의미하는 영문 대문자 코드
        /// </summary>
        /// <value>화폐를 의미하는 영문 대문자 코드</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// 입출금 상태 - working : 입출금 가능 - withdraw_only : 출금만 가능 - deposit_only : 입금만 가능 - paused : 입출금 중단 - unsupported : 입출금 미지원 
        /// </summary>
        /// <value>입출금 상태 - working : 입출금 가능 - withdraw_only : 출금만 가능 - deposit_only : 입금만 가능 - paused : 입출금 중단 - unsupported : 입출금 미지원 </value>
        [DataMember(Name="wallet_state", EmitDefaultValue=false)]
        public string WalletState { get; set; }

        /// <summary>
        /// 블록 상태 - normal : 정상 - delayed : 지연 - inactive : 비활성 (점검 등) 
        /// </summary>
        /// <value>블록 상태 - normal : 정상 - delayed : 지연 - inactive : 비활성 (점검 등) </value>
        [DataMember(Name="block_state", EmitDefaultValue=false)]
        public string BlockState { get; set; }

        /// <summary>
        /// 블록 높이
        /// </summary>
        /// <value>블록 높이</value>
        [DataMember(Name="block_height", EmitDefaultValue=false)]
        public decimal? BlockHeight { get; set; }

        /// <summary>
        /// 블록 갱신 시각
        /// </summary>
        /// <value>블록 갱신 시각</value>
        [DataMember(Name="block_updated_at", EmitDefaultValue=false)]
        public string BlockUpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Wallet {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  WalletState: ").Append(WalletState).Append("\n");
            sb.Append("  BlockState: ").Append(BlockState).Append("\n");
            sb.Append("  BlockHeight: ").Append(BlockHeight).Append("\n");
            sb.Append("  BlockUpdatedAt: ").Append(BlockUpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Wallet);
        }

        /// <summary>
        /// Returns true if Wallet instances are equal
        /// </summary>
        /// <param name="input">Instance of Wallet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Wallet input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.WalletState == input.WalletState ||
                    (this.WalletState != null &&
                    this.WalletState.Equals(input.WalletState))
                ) && 
                (
                    this.BlockState == input.BlockState ||
                    (this.BlockState != null &&
                    this.BlockState.Equals(input.BlockState))
                ) && 
                (
                    this.BlockHeight == input.BlockHeight ||
                    (this.BlockHeight != null &&
                    this.BlockHeight.Equals(input.BlockHeight))
                ) && 
                (
                    this.BlockUpdatedAt == input.BlockUpdatedAt ||
                    (this.BlockUpdatedAt != null &&
                    this.BlockUpdatedAt.Equals(input.BlockUpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.WalletState != null)
                    hashCode = hashCode * 59 + this.WalletState.GetHashCode();
                if (this.BlockState != null)
                    hashCode = hashCode * 59 + this.BlockState.GetHashCode();
                if (this.BlockHeight != null)
                    hashCode = hashCode * 59 + this.BlockHeight.GetHashCode();
                if (this.BlockUpdatedAt != null)
                    hashCode = hashCode * 59 + this.BlockUpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
