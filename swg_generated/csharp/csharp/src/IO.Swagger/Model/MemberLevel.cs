/* 
 * Upbit Open API
 *
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// 사용자의 보안등급 정보
    /// </summary>
    [DataContract]
    public partial class MemberLevel :  IEquatable<MemberLevel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MemberLevel" /> class.
        /// </summary>
        /// <param name="securityLevel">사용자의 보안 등급.</param>
        /// <param name="feeLevel">사용자의 수수료 등급.</param>
        /// <param name="emailVerified">사용자의 이메일 인증 여부.</param>
        /// <param name="identityAuthVerified">사용자의 실명 인증 여부.</param>
        /// <param name="bankAccountVerified">사용자의 계좌 인증 여부.</param>
        /// <param name="kakaoPayAuthVerified">사용자의 카카오페이 인증 여부.</param>
        /// <param name="locked">사용자의 계정 보호 상태.</param>
        /// <param name="walletLocked">사용자의 출금 보호 상태.</param>
        public MemberLevel(decimal? securityLevel = default(decimal?), decimal? feeLevel = default(decimal?), bool? emailVerified = default(bool?), bool? identityAuthVerified = default(bool?), bool? bankAccountVerified = default(bool?), bool? kakaoPayAuthVerified = default(bool?), bool? locked = default(bool?), bool? walletLocked = default(bool?))
        {
            this.SecurityLevel = securityLevel;
            this.FeeLevel = feeLevel;
            this.EmailVerified = emailVerified;
            this.IdentityAuthVerified = identityAuthVerified;
            this.BankAccountVerified = bankAccountVerified;
            this.KakaoPayAuthVerified = kakaoPayAuthVerified;
            this.Locked = locked;
            this.WalletLocked = walletLocked;
        }
        
        /// <summary>
        /// 사용자의 보안 등급
        /// </summary>
        /// <value>사용자의 보안 등급</value>
        [DataMember(Name="security_level", EmitDefaultValue=false)]
        public decimal? SecurityLevel { get; set; }

        /// <summary>
        /// 사용자의 수수료 등급
        /// </summary>
        /// <value>사용자의 수수료 등급</value>
        [DataMember(Name="fee_level", EmitDefaultValue=false)]
        public decimal? FeeLevel { get; set; }

        /// <summary>
        /// 사용자의 이메일 인증 여부
        /// </summary>
        /// <value>사용자의 이메일 인증 여부</value>
        [DataMember(Name="email_verified", EmitDefaultValue=false)]
        public bool? EmailVerified { get; set; }

        /// <summary>
        /// 사용자의 실명 인증 여부
        /// </summary>
        /// <value>사용자의 실명 인증 여부</value>
        [DataMember(Name="identity_auth_verified", EmitDefaultValue=false)]
        public bool? IdentityAuthVerified { get; set; }

        /// <summary>
        /// 사용자의 계좌 인증 여부
        /// </summary>
        /// <value>사용자의 계좌 인증 여부</value>
        [DataMember(Name="bank_account_verified", EmitDefaultValue=false)]
        public bool? BankAccountVerified { get; set; }

        /// <summary>
        /// 사용자의 카카오페이 인증 여부
        /// </summary>
        /// <value>사용자의 카카오페이 인증 여부</value>
        [DataMember(Name="kakao_pay_auth_verified", EmitDefaultValue=false)]
        public bool? KakaoPayAuthVerified { get; set; }

        /// <summary>
        /// 사용자의 계정 보호 상태
        /// </summary>
        /// <value>사용자의 계정 보호 상태</value>
        [DataMember(Name="locked", EmitDefaultValue=false)]
        public bool? Locked { get; set; }

        /// <summary>
        /// 사용자의 출금 보호 상태
        /// </summary>
        /// <value>사용자의 출금 보호 상태</value>
        [DataMember(Name="wallet_locked", EmitDefaultValue=false)]
        public bool? WalletLocked { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MemberLevel {\n");
            sb.Append("  SecurityLevel: ").Append(SecurityLevel).Append("\n");
            sb.Append("  FeeLevel: ").Append(FeeLevel).Append("\n");
            sb.Append("  EmailVerified: ").Append(EmailVerified).Append("\n");
            sb.Append("  IdentityAuthVerified: ").Append(IdentityAuthVerified).Append("\n");
            sb.Append("  BankAccountVerified: ").Append(BankAccountVerified).Append("\n");
            sb.Append("  KakaoPayAuthVerified: ").Append(KakaoPayAuthVerified).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  WalletLocked: ").Append(WalletLocked).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MemberLevel);
        }

        /// <summary>
        /// Returns true if MemberLevel instances are equal
        /// </summary>
        /// <param name="input">Instance of MemberLevel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MemberLevel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SecurityLevel == input.SecurityLevel ||
                    (this.SecurityLevel != null &&
                    this.SecurityLevel.Equals(input.SecurityLevel))
                ) && 
                (
                    this.FeeLevel == input.FeeLevel ||
                    (this.FeeLevel != null &&
                    this.FeeLevel.Equals(input.FeeLevel))
                ) && 
                (
                    this.EmailVerified == input.EmailVerified ||
                    (this.EmailVerified != null &&
                    this.EmailVerified.Equals(input.EmailVerified))
                ) && 
                (
                    this.IdentityAuthVerified == input.IdentityAuthVerified ||
                    (this.IdentityAuthVerified != null &&
                    this.IdentityAuthVerified.Equals(input.IdentityAuthVerified))
                ) && 
                (
                    this.BankAccountVerified == input.BankAccountVerified ||
                    (this.BankAccountVerified != null &&
                    this.BankAccountVerified.Equals(input.BankAccountVerified))
                ) && 
                (
                    this.KakaoPayAuthVerified == input.KakaoPayAuthVerified ||
                    (this.KakaoPayAuthVerified != null &&
                    this.KakaoPayAuthVerified.Equals(input.KakaoPayAuthVerified))
                ) && 
                (
                    this.Locked == input.Locked ||
                    (this.Locked != null &&
                    this.Locked.Equals(input.Locked))
                ) && 
                (
                    this.WalletLocked == input.WalletLocked ||
                    (this.WalletLocked != null &&
                    this.WalletLocked.Equals(input.WalletLocked))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SecurityLevel != null)
                    hashCode = hashCode * 59 + this.SecurityLevel.GetHashCode();
                if (this.FeeLevel != null)
                    hashCode = hashCode * 59 + this.FeeLevel.GetHashCode();
                if (this.EmailVerified != null)
                    hashCode = hashCode * 59 + this.EmailVerified.GetHashCode();
                if (this.IdentityAuthVerified != null)
                    hashCode = hashCode * 59 + this.IdentityAuthVerified.GetHashCode();
                if (this.BankAccountVerified != null)
                    hashCode = hashCode * 59 + this.BankAccountVerified.GetHashCode();
                if (this.KakaoPayAuthVerified != null)
                    hashCode = hashCode * 59 + this.KakaoPayAuthVerified.GetHashCode();
                if (this.Locked != null)
                    hashCode = hashCode * 59 + this.Locked.GetHashCode();
                if (this.WalletLocked != null)
                    hashCode = hashCode * 59 + this.WalletLocked.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
