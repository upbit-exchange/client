/* 
 * Upbit Open API
 *
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// 출금 제약 정보
    /// </summary>
    [DataContract]
    public partial class WithdrawLimit :  IEquatable<WithdrawLimit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WithdrawLimit" /> class.
        /// </summary>
        /// <param name="currency">화폐를 의미하는 영문 대문자 코드.</param>
        /// <param name="minimum">출금 최소 금액/수량.</param>
        /// <param name="onetime">1회 출금 한도.</param>
        /// <param name="daily">1일 출금 한도.</param>
        /// <param name="remainingDaily">1일 잔여 출금 한도.</param>
        /// <param name="remainingDailyKrw">통합 1일 잔여 출금 한도.</param>
        /// <param name="_fixed">출금 금액/수량 소수점 자리 수.</param>
        /// <param name="canWithdraw">출금 지원 여부.</param>
        public WithdrawLimit(string currency = default(string), string minimum = default(string), string onetime = default(string), string daily = default(string), string remainingDaily = default(string), string remainingDailyKrw = default(string), decimal? _fixed = default(decimal?), bool? canWithdraw = default(bool?))
        {
            this.Currency = currency;
            this.Minimum = minimum;
            this.Onetime = onetime;
            this.Daily = daily;
            this.RemainingDaily = remainingDaily;
            this.RemainingDailyKrw = remainingDailyKrw;
            this.Fixed = _fixed;
            this.CanWithdraw = canWithdraw;
        }
        
        /// <summary>
        /// 화폐를 의미하는 영문 대문자 코드
        /// </summary>
        /// <value>화폐를 의미하는 영문 대문자 코드</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// 출금 최소 금액/수량
        /// </summary>
        /// <value>출금 최소 금액/수량</value>
        [DataMember(Name="minimum", EmitDefaultValue=false)]
        public string Minimum { get; set; }

        /// <summary>
        /// 1회 출금 한도
        /// </summary>
        /// <value>1회 출금 한도</value>
        [DataMember(Name="onetime", EmitDefaultValue=false)]
        public string Onetime { get; set; }

        /// <summary>
        /// 1일 출금 한도
        /// </summary>
        /// <value>1일 출금 한도</value>
        [DataMember(Name="daily", EmitDefaultValue=false)]
        public string Daily { get; set; }

        /// <summary>
        /// 1일 잔여 출금 한도
        /// </summary>
        /// <value>1일 잔여 출금 한도</value>
        [DataMember(Name="remaining_daily", EmitDefaultValue=false)]
        public string RemainingDaily { get; set; }

        /// <summary>
        /// 통합 1일 잔여 출금 한도
        /// </summary>
        /// <value>통합 1일 잔여 출금 한도</value>
        [DataMember(Name="remaining_daily_krw", EmitDefaultValue=false)]
        public string RemainingDailyKrw { get; set; }

        /// <summary>
        /// 출금 금액/수량 소수점 자리 수
        /// </summary>
        /// <value>출금 금액/수량 소수점 자리 수</value>
        [DataMember(Name="fixed", EmitDefaultValue=false)]
        public decimal? Fixed { get; set; }

        /// <summary>
        /// 출금 지원 여부
        /// </summary>
        /// <value>출금 지원 여부</value>
        [DataMember(Name="can_withdraw", EmitDefaultValue=false)]
        public bool? CanWithdraw { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WithdrawLimit {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Minimum: ").Append(Minimum).Append("\n");
            sb.Append("  Onetime: ").Append(Onetime).Append("\n");
            sb.Append("  Daily: ").Append(Daily).Append("\n");
            sb.Append("  RemainingDaily: ").Append(RemainingDaily).Append("\n");
            sb.Append("  RemainingDailyKrw: ").Append(RemainingDailyKrw).Append("\n");
            sb.Append("  Fixed: ").Append(Fixed).Append("\n");
            sb.Append("  CanWithdraw: ").Append(CanWithdraw).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WithdrawLimit);
        }

        /// <summary>
        /// Returns true if WithdrawLimit instances are equal
        /// </summary>
        /// <param name="input">Instance of WithdrawLimit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WithdrawLimit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Minimum == input.Minimum ||
                    (this.Minimum != null &&
                    this.Minimum.Equals(input.Minimum))
                ) && 
                (
                    this.Onetime == input.Onetime ||
                    (this.Onetime != null &&
                    this.Onetime.Equals(input.Onetime))
                ) && 
                (
                    this.Daily == input.Daily ||
                    (this.Daily != null &&
                    this.Daily.Equals(input.Daily))
                ) && 
                (
                    this.RemainingDaily == input.RemainingDaily ||
                    (this.RemainingDaily != null &&
                    this.RemainingDaily.Equals(input.RemainingDaily))
                ) && 
                (
                    this.RemainingDailyKrw == input.RemainingDailyKrw ||
                    (this.RemainingDailyKrw != null &&
                    this.RemainingDailyKrw.Equals(input.RemainingDailyKrw))
                ) && 
                (
                    this.Fixed == input.Fixed ||
                    (this.Fixed != null &&
                    this.Fixed.Equals(input.Fixed))
                ) && 
                (
                    this.CanWithdraw == input.CanWithdraw ||
                    (this.CanWithdraw != null &&
                    this.CanWithdraw.Equals(input.CanWithdraw))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Minimum != null)
                    hashCode = hashCode * 59 + this.Minimum.GetHashCode();
                if (this.Onetime != null)
                    hashCode = hashCode * 59 + this.Onetime.GetHashCode();
                if (this.Daily != null)
                    hashCode = hashCode * 59 + this.Daily.GetHashCode();
                if (this.RemainingDaily != null)
                    hashCode = hashCode * 59 + this.RemainingDaily.GetHashCode();
                if (this.RemainingDailyKrw != null)
                    hashCode = hashCode * 59 + this.RemainingDailyKrw.GetHashCode();
                if (this.Fixed != null)
                    hashCode = hashCode * 59 + this.Fixed.GetHashCode();
                if (this.CanWithdraw != null)
                    hashCode = hashCode * 59 + this.CanWithdraw.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
