/* 
 * Upbit Open API
 *
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// 화폐 정보
    /// </summary>
    [DataContract]
    public partial class Currency :  IEquatable<Currency>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Currency" /> class.
        /// </summary>
        /// <param name="code">화폐를 의미하는 영문 대문자 코드.</param>
        /// <param name="withdrawFee">해당 화폐의 출금 수수료.</param>
        /// <param name="isCoin">화폐의 코인 여부.</param>
        /// <param name="walletState">해당 화폐의 지갑 상태.</param>
        /// <param name="walletSupport">해당 화폐가 지원하는 입출금 정보.</param>
        public Currency(string code = default(string), string withdrawFee = default(string), bool? isCoin = default(bool?), string walletState = default(string), List<string> walletSupport = default(List<string>))
        {
            this.Code = code;
            this.WithdrawFee = withdrawFee;
            this.IsCoin = isCoin;
            this.WalletState = walletState;
            this.WalletSupport = walletSupport;
        }
        
        /// <summary>
        /// 화폐를 의미하는 영문 대문자 코드
        /// </summary>
        /// <value>화폐를 의미하는 영문 대문자 코드</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// 해당 화폐의 출금 수수료
        /// </summary>
        /// <value>해당 화폐의 출금 수수료</value>
        [DataMember(Name="withdraw_fee", EmitDefaultValue=false)]
        public string WithdrawFee { get; set; }

        /// <summary>
        /// 화폐의 코인 여부
        /// </summary>
        /// <value>화폐의 코인 여부</value>
        [DataMember(Name="is_coin", EmitDefaultValue=false)]
        public bool? IsCoin { get; set; }

        /// <summary>
        /// 해당 화폐의 지갑 상태
        /// </summary>
        /// <value>해당 화폐의 지갑 상태</value>
        [DataMember(Name="wallet_state", EmitDefaultValue=false)]
        public string WalletState { get; set; }

        /// <summary>
        /// 해당 화폐가 지원하는 입출금 정보
        /// </summary>
        /// <value>해당 화폐가 지원하는 입출금 정보</value>
        [DataMember(Name="wallet_support", EmitDefaultValue=false)]
        public List<string> WalletSupport { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Currency {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  WithdrawFee: ").Append(WithdrawFee).Append("\n");
            sb.Append("  IsCoin: ").Append(IsCoin).Append("\n");
            sb.Append("  WalletState: ").Append(WalletState).Append("\n");
            sb.Append("  WalletSupport: ").Append(WalletSupport).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Currency);
        }

        /// <summary>
        /// Returns true if Currency instances are equal
        /// </summary>
        /// <param name="input">Instance of Currency to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Currency input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.WithdrawFee == input.WithdrawFee ||
                    (this.WithdrawFee != null &&
                    this.WithdrawFee.Equals(input.WithdrawFee))
                ) && 
                (
                    this.IsCoin == input.IsCoin ||
                    (this.IsCoin != null &&
                    this.IsCoin.Equals(input.IsCoin))
                ) && 
                (
                    this.WalletState == input.WalletState ||
                    (this.WalletState != null &&
                    this.WalletState.Equals(input.WalletState))
                ) && 
                (
                    this.WalletSupport == input.WalletSupport ||
                    this.WalletSupport != null &&
                    this.WalletSupport.SequenceEqual(input.WalletSupport)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.WithdrawFee != null)
                    hashCode = hashCode * 59 + this.WithdrawFee.GetHashCode();
                if (this.IsCoin != null)
                    hashCode = hashCode * 59 + this.IsCoin.GetHashCode();
                if (this.WalletState != null)
                    hashCode = hashCode * 59 + this.WalletState.GetHashCode();
                if (this.WalletSupport != null)
                    hashCode = hashCode * 59 + this.WalletSupport.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
