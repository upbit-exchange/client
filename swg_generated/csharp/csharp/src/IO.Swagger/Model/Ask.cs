/* 
 * Upbit Open API
 *
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// 매도 시 제약사항
    /// </summary>
    [DataContract]
    public partial class Ask :  IEquatable<Ask>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ask" /> class.
        /// </summary>
        /// <param name="currency">화폐를 의미하는 영문 대문자 코드.</param>
        /// <param name="priceUnit">주문금액 단위.</param>
        /// <param name="minTotal">최소 매도/매수 금액.</param>
        public Ask(string currency = default(string), string priceUnit = default(string), decimal? minTotal = default(decimal?))
        {
            this.Currency = currency;
            this.PriceUnit = priceUnit;
            this.MinTotal = minTotal;
        }
        
        /// <summary>
        /// 화폐를 의미하는 영문 대문자 코드
        /// </summary>
        /// <value>화폐를 의미하는 영문 대문자 코드</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// 주문금액 단위
        /// </summary>
        /// <value>주문금액 단위</value>
        [DataMember(Name="price_unit", EmitDefaultValue=false)]
        public string PriceUnit { get; set; }

        /// <summary>
        /// 최소 매도/매수 금액
        /// </summary>
        /// <value>최소 매도/매수 금액</value>
        [DataMember(Name="min_total", EmitDefaultValue=false)]
        public decimal? MinTotal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ask {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  PriceUnit: ").Append(PriceUnit).Append("\n");
            sb.Append("  MinTotal: ").Append(MinTotal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Ask);
        }

        /// <summary>
        /// Returns true if Ask instances are equal
        /// </summary>
        /// <param name="input">Instance of Ask to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ask input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.PriceUnit == input.PriceUnit ||
                    (this.PriceUnit != null &&
                    this.PriceUnit.Equals(input.PriceUnit))
                ) && 
                (
                    this.MinTotal == input.MinTotal ||
                    (this.MinTotal != null &&
                    this.MinTotal.Equals(input.MinTotal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.PriceUnit != null)
                    hashCode = hashCode * 59 + this.PriceUnit.GetHashCode();
                if (this.MinTotal != null)
                    hashCode = hashCode * 59 + this.MinTotal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
