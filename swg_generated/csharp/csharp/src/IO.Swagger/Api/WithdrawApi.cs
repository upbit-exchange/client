/* 
 * Upbit Open API
 *
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWithdrawApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 출금 가능 정보
        /// </summary>
        /// <remarks>
        /// ## 해당 통화의 가능한 출금 정보를 확인한다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency Symbol </param>
        /// <returns>WithdrawChance</returns>
        WithdrawChance WithdrawChance (string currency);

        /// <summary>
        /// 출금 가능 정보
        /// </summary>
        /// <remarks>
        /// ## 해당 통화의 가능한 출금 정보를 확인한다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency Symbol </param>
        /// <returns>ApiResponse of WithdrawChance</returns>
        ApiResponse<WithdrawChance> WithdrawChanceWithHttpInfo (string currency);
        /// <summary>
        /// 코인 출금하기
        /// </summary>
        /// <remarks>
        /// ## 코인 출금을 요청한다. **NOTE**: 바로출금 이용 시 유의사항 업비트 회원의 주소가 아닌 주소로 바로출금을 요청하는 경우, 출금이 정상적으로 수행되지 않습니다. 반드시 주소를 확인 후 출금을 진행하시기 바랍니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드 </param>
        /// <param name="amount">출금 수량 </param>
        /// <param name="address">출금 가능 주소에 등록된 출금 주소 </param>
        /// <param name="secondaryAddress">2차 출금 주소 (필요한 코인에 한해서)  (optional)</param>
        /// <param name="transactionType">출금 유형 - default : 일반출금 - internal : 바로출금  (optional)</param>
        /// <returns>WithdrawCoin</returns>
        WithdrawCoin WithdrawCoin (string currency, string amount, string address, string secondaryAddress = null, string transactionType = null);

        /// <summary>
        /// 코인 출금하기
        /// </summary>
        /// <remarks>
        /// ## 코인 출금을 요청한다. **NOTE**: 바로출금 이용 시 유의사항 업비트 회원의 주소가 아닌 주소로 바로출금을 요청하는 경우, 출금이 정상적으로 수행되지 않습니다. 반드시 주소를 확인 후 출금을 진행하시기 바랍니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드 </param>
        /// <param name="amount">출금 수량 </param>
        /// <param name="address">출금 가능 주소에 등록된 출금 주소 </param>
        /// <param name="secondaryAddress">2차 출금 주소 (필요한 코인에 한해서)  (optional)</param>
        /// <param name="transactionType">출금 유형 - default : 일반출금 - internal : 바로출금  (optional)</param>
        /// <returns>ApiResponse of WithdrawCoin</returns>
        ApiResponse<WithdrawCoin> WithdrawCoinWithHttpInfo (string currency, string amount, string address, string secondaryAddress = null, string transactionType = null);
        /// <summary>
        /// 개별 출금 조회
        /// </summary>
        /// <remarks>
        /// ## 출금 UUID를 통해 개별 출금 정보를 조회한다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">출금 UUID  (optional)</param>
        /// <param name="txid">출금 TXID  (optional)</param>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <returns>Withdraw</returns>
        Withdraw WithdrawInfo (string uuid = null, string txid = null, string currency = null);

        /// <summary>
        /// 개별 출금 조회
        /// </summary>
        /// <remarks>
        /// ## 출금 UUID를 통해 개별 출금 정보를 조회한다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">출금 UUID  (optional)</param>
        /// <param name="txid">출금 TXID  (optional)</param>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <returns>ApiResponse of Withdraw</returns>
        ApiResponse<Withdraw> WithdrawInfoWithHttpInfo (string uuid = null, string txid = null, string currency = null);
        /// <summary>
        /// 출금 리스트 조회
        /// </summary>
        /// <remarks>
        /// ## 출금 리스트를 조회한다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <param name="state">출금 상태 - submitting : 처리 중 - submitted : 처리 완료 - almost_accepted : 출금대기중 - rejected : 거부 - accepted : 승인됨 - processing : 처리 중 - done : 완료 - canceled : 취소됨  (optional)</param>
        /// <param name="uuids">출금 UUID의 목록  (optional)</param>
        /// <param name="txids">출금 TXID의 목록  (optional)</param>
        /// <param name="limit">개수 제한 (default: 100, max: 100)  (optional)</param>
        /// <param name="page">페이지 수, default: 1  (optional)</param>
        /// <param name="orderBy">정렬 방식 - asc : 오름차순 - desc : 내림차순 (default)  (optional)</param>
        /// <returns>List&lt;Withdraw&gt;</returns>
        List<Withdraw> WithdrawInfoAll (string currency = null, string state = null, List<string> uuids = null, List<string> txids = null, decimal? limit = null, decimal? page = null, string orderBy = null);

        /// <summary>
        /// 출금 리스트 조회
        /// </summary>
        /// <remarks>
        /// ## 출금 리스트를 조회한다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <param name="state">출금 상태 - submitting : 처리 중 - submitted : 처리 완료 - almost_accepted : 출금대기중 - rejected : 거부 - accepted : 승인됨 - processing : 처리 중 - done : 완료 - canceled : 취소됨  (optional)</param>
        /// <param name="uuids">출금 UUID의 목록  (optional)</param>
        /// <param name="txids">출금 TXID의 목록  (optional)</param>
        /// <param name="limit">개수 제한 (default: 100, max: 100)  (optional)</param>
        /// <param name="page">페이지 수, default: 1  (optional)</param>
        /// <param name="orderBy">정렬 방식 - asc : 오름차순 - desc : 내림차순 (default)  (optional)</param>
        /// <returns>ApiResponse of List&lt;Withdraw&gt;</returns>
        ApiResponse<List<Withdraw>> WithdrawInfoAllWithHttpInfo (string currency = null, string state = null, List<string> uuids = null, List<string> txids = null, decimal? limit = null, decimal? page = null, string orderBy = null);
        /// <summary>
        /// 원화 출금하기
        /// </summary>
        /// <remarks>
        /// ## 원화 출금을 요청한다. 등록된 출금 계좌로 출금된다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">출금 원화 수량 </param>
        /// <returns>Withdraw</returns>
        Withdraw WithdrawKrw (string amount);

        /// <summary>
        /// 원화 출금하기
        /// </summary>
        /// <remarks>
        /// ## 원화 출금을 요청한다. 등록된 출금 계좌로 출금된다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">출금 원화 수량 </param>
        /// <returns>ApiResponse of Withdraw</returns>
        ApiResponse<Withdraw> WithdrawKrwWithHttpInfo (string amount);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 출금 가능 정보
        /// </summary>
        /// <remarks>
        /// ## 해당 통화의 가능한 출금 정보를 확인한다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency Symbol </param>
        /// <returns>Task of WithdrawChance</returns>
        System.Threading.Tasks.Task<WithdrawChance> WithdrawChanceAsync (string currency);

        /// <summary>
        /// 출금 가능 정보
        /// </summary>
        /// <remarks>
        /// ## 해당 통화의 가능한 출금 정보를 확인한다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency Symbol </param>
        /// <returns>Task of ApiResponse (WithdrawChance)</returns>
        System.Threading.Tasks.Task<ApiResponse<WithdrawChance>> WithdrawChanceAsyncWithHttpInfo (string currency);
        /// <summary>
        /// 코인 출금하기
        /// </summary>
        /// <remarks>
        /// ## 코인 출금을 요청한다. **NOTE**: 바로출금 이용 시 유의사항 업비트 회원의 주소가 아닌 주소로 바로출금을 요청하는 경우, 출금이 정상적으로 수행되지 않습니다. 반드시 주소를 확인 후 출금을 진행하시기 바랍니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드 </param>
        /// <param name="amount">출금 수량 </param>
        /// <param name="address">출금 가능 주소에 등록된 출금 주소 </param>
        /// <param name="secondaryAddress">2차 출금 주소 (필요한 코인에 한해서)  (optional)</param>
        /// <param name="transactionType">출금 유형 - default : 일반출금 - internal : 바로출금  (optional)</param>
        /// <returns>Task of WithdrawCoin</returns>
        System.Threading.Tasks.Task<WithdrawCoin> WithdrawCoinAsync (string currency, string amount, string address, string secondaryAddress = null, string transactionType = null);

        /// <summary>
        /// 코인 출금하기
        /// </summary>
        /// <remarks>
        /// ## 코인 출금을 요청한다. **NOTE**: 바로출금 이용 시 유의사항 업비트 회원의 주소가 아닌 주소로 바로출금을 요청하는 경우, 출금이 정상적으로 수행되지 않습니다. 반드시 주소를 확인 후 출금을 진행하시기 바랍니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드 </param>
        /// <param name="amount">출금 수량 </param>
        /// <param name="address">출금 가능 주소에 등록된 출금 주소 </param>
        /// <param name="secondaryAddress">2차 출금 주소 (필요한 코인에 한해서)  (optional)</param>
        /// <param name="transactionType">출금 유형 - default : 일반출금 - internal : 바로출금  (optional)</param>
        /// <returns>Task of ApiResponse (WithdrawCoin)</returns>
        System.Threading.Tasks.Task<ApiResponse<WithdrawCoin>> WithdrawCoinAsyncWithHttpInfo (string currency, string amount, string address, string secondaryAddress = null, string transactionType = null);
        /// <summary>
        /// 개별 출금 조회
        /// </summary>
        /// <remarks>
        /// ## 출금 UUID를 통해 개별 출금 정보를 조회한다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">출금 UUID  (optional)</param>
        /// <param name="txid">출금 TXID  (optional)</param>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <returns>Task of Withdraw</returns>
        System.Threading.Tasks.Task<Withdraw> WithdrawInfoAsync (string uuid = null, string txid = null, string currency = null);

        /// <summary>
        /// 개별 출금 조회
        /// </summary>
        /// <remarks>
        /// ## 출금 UUID를 통해 개별 출금 정보를 조회한다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">출금 UUID  (optional)</param>
        /// <param name="txid">출금 TXID  (optional)</param>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <returns>Task of ApiResponse (Withdraw)</returns>
        System.Threading.Tasks.Task<ApiResponse<Withdraw>> WithdrawInfoAsyncWithHttpInfo (string uuid = null, string txid = null, string currency = null);
        /// <summary>
        /// 출금 리스트 조회
        /// </summary>
        /// <remarks>
        /// ## 출금 리스트를 조회한다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <param name="state">출금 상태 - submitting : 처리 중 - submitted : 처리 완료 - almost_accepted : 출금대기중 - rejected : 거부 - accepted : 승인됨 - processing : 처리 중 - done : 완료 - canceled : 취소됨  (optional)</param>
        /// <param name="uuids">출금 UUID의 목록  (optional)</param>
        /// <param name="txids">출금 TXID의 목록  (optional)</param>
        /// <param name="limit">개수 제한 (default: 100, max: 100)  (optional)</param>
        /// <param name="page">페이지 수, default: 1  (optional)</param>
        /// <param name="orderBy">정렬 방식 - asc : 오름차순 - desc : 내림차순 (default)  (optional)</param>
        /// <returns>Task of List&lt;Withdraw&gt;</returns>
        System.Threading.Tasks.Task<List<Withdraw>> WithdrawInfoAllAsync (string currency = null, string state = null, List<string> uuids = null, List<string> txids = null, decimal? limit = null, decimal? page = null, string orderBy = null);

        /// <summary>
        /// 출금 리스트 조회
        /// </summary>
        /// <remarks>
        /// ## 출금 리스트를 조회한다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <param name="state">출금 상태 - submitting : 처리 중 - submitted : 처리 완료 - almost_accepted : 출금대기중 - rejected : 거부 - accepted : 승인됨 - processing : 처리 중 - done : 완료 - canceled : 취소됨  (optional)</param>
        /// <param name="uuids">출금 UUID의 목록  (optional)</param>
        /// <param name="txids">출금 TXID의 목록  (optional)</param>
        /// <param name="limit">개수 제한 (default: 100, max: 100)  (optional)</param>
        /// <param name="page">페이지 수, default: 1  (optional)</param>
        /// <param name="orderBy">정렬 방식 - asc : 오름차순 - desc : 내림차순 (default)  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Withdraw&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Withdraw>>> WithdrawInfoAllAsyncWithHttpInfo (string currency = null, string state = null, List<string> uuids = null, List<string> txids = null, decimal? limit = null, decimal? page = null, string orderBy = null);
        /// <summary>
        /// 원화 출금하기
        /// </summary>
        /// <remarks>
        /// ## 원화 출금을 요청한다. 등록된 출금 계좌로 출금된다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">출금 원화 수량 </param>
        /// <returns>Task of Withdraw</returns>
        System.Threading.Tasks.Task<Withdraw> WithdrawKrwAsync (string amount);

        /// <summary>
        /// 원화 출금하기
        /// </summary>
        /// <remarks>
        /// ## 원화 출금을 요청한다. 등록된 출금 계좌로 출금된다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">출금 원화 수량 </param>
        /// <returns>Task of ApiResponse (Withdraw)</returns>
        System.Threading.Tasks.Task<ApiResponse<Withdraw>> WithdrawKrwAsyncWithHttpInfo (string amount);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WithdrawApi : IWithdrawApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WithdrawApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WithdrawApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WithdrawApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WithdrawApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// 출금 가능 정보 ## 해당 통화의 가능한 출금 정보를 확인한다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency Symbol </param>
        /// <returns>WithdrawChance</returns>
        public WithdrawChance WithdrawChance (string currency)
        {
             ApiResponse<WithdrawChance> localVarResponse = WithdrawChanceWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 출금 가능 정보 ## 해당 통화의 가능한 출금 정보를 확인한다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency Symbol </param>
        /// <returns>ApiResponse of WithdrawChance</returns>
        public ApiResponse< WithdrawChance > WithdrawChanceWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling WithdrawApi->WithdrawChance");

            var localVarPath = "/withdraws/chance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WithdrawChance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WithdrawChance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WithdrawChance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WithdrawChance)));
        }

        /// <summary>
        /// 출금 가능 정보 ## 해당 통화의 가능한 출금 정보를 확인한다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency Symbol </param>
        /// <returns>Task of WithdrawChance</returns>
        public async System.Threading.Tasks.Task<WithdrawChance> WithdrawChanceAsync (string currency)
        {
             ApiResponse<WithdrawChance> localVarResponse = await WithdrawChanceAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 출금 가능 정보 ## 해당 통화의 가능한 출금 정보를 확인한다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency Symbol </param>
        /// <returns>Task of ApiResponse (WithdrawChance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WithdrawChance>> WithdrawChanceAsyncWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling WithdrawApi->WithdrawChance");

            var localVarPath = "/withdraws/chance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WithdrawChance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WithdrawChance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WithdrawChance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WithdrawChance)));
        }

        /// <summary>
        /// 코인 출금하기 ## 코인 출금을 요청한다. **NOTE**: 바로출금 이용 시 유의사항 업비트 회원의 주소가 아닌 주소로 바로출금을 요청하는 경우, 출금이 정상적으로 수행되지 않습니다. 반드시 주소를 확인 후 출금을 진행하시기 바랍니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드 </param>
        /// <param name="amount">출금 수량 </param>
        /// <param name="address">출금 가능 주소에 등록된 출금 주소 </param>
        /// <param name="secondaryAddress">2차 출금 주소 (필요한 코인에 한해서)  (optional)</param>
        /// <param name="transactionType">출금 유형 - default : 일반출금 - internal : 바로출금  (optional)</param>
        /// <returns>WithdrawCoin</returns>
        public WithdrawCoin WithdrawCoin (string currency, string amount, string address, string secondaryAddress = null, string transactionType = null)
        {
             ApiResponse<WithdrawCoin> localVarResponse = WithdrawCoinWithHttpInfo(currency, amount, address, secondaryAddress, transactionType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 코인 출금하기 ## 코인 출금을 요청한다. **NOTE**: 바로출금 이용 시 유의사항 업비트 회원의 주소가 아닌 주소로 바로출금을 요청하는 경우, 출금이 정상적으로 수행되지 않습니다. 반드시 주소를 확인 후 출금을 진행하시기 바랍니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드 </param>
        /// <param name="amount">출금 수량 </param>
        /// <param name="address">출금 가능 주소에 등록된 출금 주소 </param>
        /// <param name="secondaryAddress">2차 출금 주소 (필요한 코인에 한해서)  (optional)</param>
        /// <param name="transactionType">출금 유형 - default : 일반출금 - internal : 바로출금  (optional)</param>
        /// <returns>ApiResponse of WithdrawCoin</returns>
        public ApiResponse< WithdrawCoin > WithdrawCoinWithHttpInfo (string currency, string amount, string address, string secondaryAddress = null, string transactionType = null)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling WithdrawApi->WithdrawCoin");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling WithdrawApi->WithdrawCoin");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling WithdrawApi->WithdrawCoin");

            var localVarPath = "/withdraws/coin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarFormParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // form parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (address != null) localVarFormParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // form parameter
            if (secondaryAddress != null) localVarFormParams.Add("secondary_address", this.Configuration.ApiClient.ParameterToString(secondaryAddress)); // form parameter
            if (transactionType != null) localVarFormParams.Add("transaction_type", this.Configuration.ApiClient.ParameterToString(transactionType)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WithdrawCoin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WithdrawCoin>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WithdrawCoin) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WithdrawCoin)));
        }

        /// <summary>
        /// 코인 출금하기 ## 코인 출금을 요청한다. **NOTE**: 바로출금 이용 시 유의사항 업비트 회원의 주소가 아닌 주소로 바로출금을 요청하는 경우, 출금이 정상적으로 수행되지 않습니다. 반드시 주소를 확인 후 출금을 진행하시기 바랍니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드 </param>
        /// <param name="amount">출금 수량 </param>
        /// <param name="address">출금 가능 주소에 등록된 출금 주소 </param>
        /// <param name="secondaryAddress">2차 출금 주소 (필요한 코인에 한해서)  (optional)</param>
        /// <param name="transactionType">출금 유형 - default : 일반출금 - internal : 바로출금  (optional)</param>
        /// <returns>Task of WithdrawCoin</returns>
        public async System.Threading.Tasks.Task<WithdrawCoin> WithdrawCoinAsync (string currency, string amount, string address, string secondaryAddress = null, string transactionType = null)
        {
             ApiResponse<WithdrawCoin> localVarResponse = await WithdrawCoinAsyncWithHttpInfo(currency, amount, address, secondaryAddress, transactionType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 코인 출금하기 ## 코인 출금을 요청한다. **NOTE**: 바로출금 이용 시 유의사항 업비트 회원의 주소가 아닌 주소로 바로출금을 요청하는 경우, 출금이 정상적으로 수행되지 않습니다. 반드시 주소를 확인 후 출금을 진행하시기 바랍니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드 </param>
        /// <param name="amount">출금 수량 </param>
        /// <param name="address">출금 가능 주소에 등록된 출금 주소 </param>
        /// <param name="secondaryAddress">2차 출금 주소 (필요한 코인에 한해서)  (optional)</param>
        /// <param name="transactionType">출금 유형 - default : 일반출금 - internal : 바로출금  (optional)</param>
        /// <returns>Task of ApiResponse (WithdrawCoin)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WithdrawCoin>> WithdrawCoinAsyncWithHttpInfo (string currency, string amount, string address, string secondaryAddress = null, string transactionType = null)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling WithdrawApi->WithdrawCoin");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling WithdrawApi->WithdrawCoin");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling WithdrawApi->WithdrawCoin");

            var localVarPath = "/withdraws/coin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarFormParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // form parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (address != null) localVarFormParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // form parameter
            if (secondaryAddress != null) localVarFormParams.Add("secondary_address", this.Configuration.ApiClient.ParameterToString(secondaryAddress)); // form parameter
            if (transactionType != null) localVarFormParams.Add("transaction_type", this.Configuration.ApiClient.ParameterToString(transactionType)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WithdrawCoin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WithdrawCoin>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WithdrawCoin) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WithdrawCoin)));
        }

        /// <summary>
        /// 개별 출금 조회 ## 출금 UUID를 통해 개별 출금 정보를 조회한다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">출금 UUID  (optional)</param>
        /// <param name="txid">출금 TXID  (optional)</param>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <returns>Withdraw</returns>
        public Withdraw WithdrawInfo (string uuid = null, string txid = null, string currency = null)
        {
             ApiResponse<Withdraw> localVarResponse = WithdrawInfoWithHttpInfo(uuid, txid, currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 개별 출금 조회 ## 출금 UUID를 통해 개별 출금 정보를 조회한다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">출금 UUID  (optional)</param>
        /// <param name="txid">출금 TXID  (optional)</param>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <returns>ApiResponse of Withdraw</returns>
        public ApiResponse< Withdraw > WithdrawInfoWithHttpInfo (string uuid = null, string txid = null, string currency = null)
        {

            var localVarPath = "/withdraw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uuid", uuid)); // query parameter
            if (txid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "txid", txid)); // query parameter
            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WithdrawInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Withdraw>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Withdraw) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Withdraw)));
        }

        /// <summary>
        /// 개별 출금 조회 ## 출금 UUID를 통해 개별 출금 정보를 조회한다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">출금 UUID  (optional)</param>
        /// <param name="txid">출금 TXID  (optional)</param>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <returns>Task of Withdraw</returns>
        public async System.Threading.Tasks.Task<Withdraw> WithdrawInfoAsync (string uuid = null, string txid = null, string currency = null)
        {
             ApiResponse<Withdraw> localVarResponse = await WithdrawInfoAsyncWithHttpInfo(uuid, txid, currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 개별 출금 조회 ## 출금 UUID를 통해 개별 출금 정보를 조회한다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">출금 UUID  (optional)</param>
        /// <param name="txid">출금 TXID  (optional)</param>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <returns>Task of ApiResponse (Withdraw)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Withdraw>> WithdrawInfoAsyncWithHttpInfo (string uuid = null, string txid = null, string currency = null)
        {

            var localVarPath = "/withdraw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uuid", uuid)); // query parameter
            if (txid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "txid", txid)); // query parameter
            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WithdrawInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Withdraw>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Withdraw) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Withdraw)));
        }

        /// <summary>
        /// 출금 리스트 조회 ## 출금 리스트를 조회한다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <param name="state">출금 상태 - submitting : 처리 중 - submitted : 처리 완료 - almost_accepted : 출금대기중 - rejected : 거부 - accepted : 승인됨 - processing : 처리 중 - done : 완료 - canceled : 취소됨  (optional)</param>
        /// <param name="uuids">출금 UUID의 목록  (optional)</param>
        /// <param name="txids">출금 TXID의 목록  (optional)</param>
        /// <param name="limit">개수 제한 (default: 100, max: 100)  (optional)</param>
        /// <param name="page">페이지 수, default: 1  (optional)</param>
        /// <param name="orderBy">정렬 방식 - asc : 오름차순 - desc : 내림차순 (default)  (optional)</param>
        /// <returns>List&lt;Withdraw&gt;</returns>
        public List<Withdraw> WithdrawInfoAll (string currency = null, string state = null, List<string> uuids = null, List<string> txids = null, decimal? limit = null, decimal? page = null, string orderBy = null)
        {
             ApiResponse<List<Withdraw>> localVarResponse = WithdrawInfoAllWithHttpInfo(currency, state, uuids, txids, limit, page, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 출금 리스트 조회 ## 출금 리스트를 조회한다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <param name="state">출금 상태 - submitting : 처리 중 - submitted : 처리 완료 - almost_accepted : 출금대기중 - rejected : 거부 - accepted : 승인됨 - processing : 처리 중 - done : 완료 - canceled : 취소됨  (optional)</param>
        /// <param name="uuids">출금 UUID의 목록  (optional)</param>
        /// <param name="txids">출금 TXID의 목록  (optional)</param>
        /// <param name="limit">개수 제한 (default: 100, max: 100)  (optional)</param>
        /// <param name="page">페이지 수, default: 1  (optional)</param>
        /// <param name="orderBy">정렬 방식 - asc : 오름차순 - desc : 내림차순 (default)  (optional)</param>
        /// <returns>ApiResponse of List&lt;Withdraw&gt;</returns>
        public ApiResponse< List<Withdraw> > WithdrawInfoAllWithHttpInfo (string currency = null, string state = null, List<string> uuids = null, List<string> txids = null, decimal? limit = null, decimal? page = null, string orderBy = null)
        {

            var localVarPath = "/withdraws";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (uuids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "uuids", uuids)); // query parameter
            if (txids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "txids", txids)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WithdrawInfoAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Withdraw>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Withdraw>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Withdraw>)));
        }

        /// <summary>
        /// 출금 리스트 조회 ## 출금 리스트를 조회한다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <param name="state">출금 상태 - submitting : 처리 중 - submitted : 처리 완료 - almost_accepted : 출금대기중 - rejected : 거부 - accepted : 승인됨 - processing : 처리 중 - done : 완료 - canceled : 취소됨  (optional)</param>
        /// <param name="uuids">출금 UUID의 목록  (optional)</param>
        /// <param name="txids">출금 TXID의 목록  (optional)</param>
        /// <param name="limit">개수 제한 (default: 100, max: 100)  (optional)</param>
        /// <param name="page">페이지 수, default: 1  (optional)</param>
        /// <param name="orderBy">정렬 방식 - asc : 오름차순 - desc : 내림차순 (default)  (optional)</param>
        /// <returns>Task of List&lt;Withdraw&gt;</returns>
        public async System.Threading.Tasks.Task<List<Withdraw>> WithdrawInfoAllAsync (string currency = null, string state = null, List<string> uuids = null, List<string> txids = null, decimal? limit = null, decimal? page = null, string orderBy = null)
        {
             ApiResponse<List<Withdraw>> localVarResponse = await WithdrawInfoAllAsyncWithHttpInfo(currency, state, uuids, txids, limit, page, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 출금 리스트 조회 ## 출금 리스트를 조회한다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <param name="state">출금 상태 - submitting : 처리 중 - submitted : 처리 완료 - almost_accepted : 출금대기중 - rejected : 거부 - accepted : 승인됨 - processing : 처리 중 - done : 완료 - canceled : 취소됨  (optional)</param>
        /// <param name="uuids">출금 UUID의 목록  (optional)</param>
        /// <param name="txids">출금 TXID의 목록  (optional)</param>
        /// <param name="limit">개수 제한 (default: 100, max: 100)  (optional)</param>
        /// <param name="page">페이지 수, default: 1  (optional)</param>
        /// <param name="orderBy">정렬 방식 - asc : 오름차순 - desc : 내림차순 (default)  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Withdraw&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Withdraw>>> WithdrawInfoAllAsyncWithHttpInfo (string currency = null, string state = null, List<string> uuids = null, List<string> txids = null, decimal? limit = null, decimal? page = null, string orderBy = null)
        {

            var localVarPath = "/withdraws";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (uuids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "uuids", uuids)); // query parameter
            if (txids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "txids", txids)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WithdrawInfoAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Withdraw>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Withdraw>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Withdraw>)));
        }

        /// <summary>
        /// 원화 출금하기 ## 원화 출금을 요청한다. 등록된 출금 계좌로 출금된다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">출금 원화 수량 </param>
        /// <returns>Withdraw</returns>
        public Withdraw WithdrawKrw (string amount)
        {
             ApiResponse<Withdraw> localVarResponse = WithdrawKrwWithHttpInfo(amount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 원화 출금하기 ## 원화 출금을 요청한다. 등록된 출금 계좌로 출금된다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">출금 원화 수량 </param>
        /// <returns>ApiResponse of Withdraw</returns>
        public ApiResponse< Withdraw > WithdrawKrwWithHttpInfo (string amount)
        {
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling WithdrawApi->WithdrawKrw");

            var localVarPath = "/withdraws/krw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WithdrawKrw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Withdraw>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Withdraw) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Withdraw)));
        }

        /// <summary>
        /// 원화 출금하기 ## 원화 출금을 요청한다. 등록된 출금 계좌로 출금된다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">출금 원화 수량 </param>
        /// <returns>Task of Withdraw</returns>
        public async System.Threading.Tasks.Task<Withdraw> WithdrawKrwAsync (string amount)
        {
             ApiResponse<Withdraw> localVarResponse = await WithdrawKrwAsyncWithHttpInfo(amount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 원화 출금하기 ## 원화 출금을 요청한다. 등록된 출금 계좌로 출금된다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount">출금 원화 수량 </param>
        /// <returns>Task of ApiResponse (Withdraw)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Withdraw>> WithdrawKrwAsyncWithHttpInfo (string amount)
        {
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling WithdrawApi->WithdrawKrw");

            var localVarPath = "/withdraws/krw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WithdrawKrw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Withdraw>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Withdraw) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Withdraw)));
        }

    }
}
