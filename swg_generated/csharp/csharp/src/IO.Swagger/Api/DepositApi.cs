/* 
 * Upbit Open API
 *
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDepositApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 개별 입금 주소 조회
        /// </summary>
        /// <remarks>
        /// ## 개별 입금 주소 조회  **NOTE**: 입금 주소 조회 요청 API 유의사항  입금 주소 생성 요청 이후 아직 발급되지 않은 상태일 경우 deposit_address가 null일 수 있습니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency symbol </param>
        /// <returns>DepositCompleteResponse</returns>
        DepositCompleteResponse DepositCoinAddress (string currency);

        /// <summary>
        /// 개별 입금 주소 조회
        /// </summary>
        /// <remarks>
        /// ## 개별 입금 주소 조회  **NOTE**: 입금 주소 조회 요청 API 유의사항  입금 주소 생성 요청 이후 아직 발급되지 않은 상태일 경우 deposit_address가 null일 수 있습니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency symbol </param>
        /// <returns>ApiResponse of DepositCompleteResponse</returns>
        ApiResponse<DepositCompleteResponse> DepositCoinAddressWithHttpInfo (string currency);
        /// <summary>
        /// 전체 입금 주소 조회
        /// </summary>
        /// <remarks>
        /// ## 내가 보유한 자산 리스트를 보여줍니다.  **NOTE**: 입금 주소 조회 요청 API 유의사항  입금 주소 생성 요청 이후 아직 발급되지 않은 상태일 경우 deposit_address가 null일 수 있습니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object DepositCoinAddresses ();

        /// <summary>
        /// 전체 입금 주소 조회
        /// </summary>
        /// <remarks>
        /// ## 내가 보유한 자산 리스트를 보여줍니다.  **NOTE**: 입금 주소 조회 요청 API 유의사항  입금 주소 생성 요청 이후 아직 발급되지 않은 상태일 경우 deposit_address가 null일 수 있습니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DepositCoinAddressesWithHttpInfo ();
        /// <summary>
        /// 입금 주소 생성 요청
        /// </summary>
        /// <remarks>
        /// 입금 주소 생성을 요청한다.  **NOTE**: 입금 주소 생성 요청 API 유의사항  입금 주소의 생성은 서버에서 비동기적으로 이뤄집니다. 비동기적 생성 특성상 요청과 동시에 입금 주소가 발급되지 않을 수 있습니다. 주소 발급 요청 시 결과로 Response1이 반환되며 주소 발급 완료 이전까지 계속 Response1이 반환됩니다. 주소가 발급된 이후부터는 새로운 주소가 발급되는 것이 아닌 이전에 발급된 주소가 Response2 형태로 반환됩니다. 정상적으로 주소가 생성되지 않는다면 일정 시간 이후 해당 API를 다시 호출해주시길 부탁드립니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드 </param>
        /// <returns>DepositCompleteResponse</returns>
        DepositCompleteResponse DepositGenerateCoinAddress (string currency);

        /// <summary>
        /// 입금 주소 생성 요청
        /// </summary>
        /// <remarks>
        /// 입금 주소 생성을 요청한다.  **NOTE**: 입금 주소 생성 요청 API 유의사항  입금 주소의 생성은 서버에서 비동기적으로 이뤄집니다. 비동기적 생성 특성상 요청과 동시에 입금 주소가 발급되지 않을 수 있습니다. 주소 발급 요청 시 결과로 Response1이 반환되며 주소 발급 완료 이전까지 계속 Response1이 반환됩니다. 주소가 발급된 이후부터는 새로운 주소가 발급되는 것이 아닌 이전에 발급된 주소가 Response2 형태로 반환됩니다. 정상적으로 주소가 생성되지 않는다면 일정 시간 이후 해당 API를 다시 호출해주시길 부탁드립니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드 </param>
        /// <returns>ApiResponse of DepositCompleteResponse</returns>
        ApiResponse<DepositCompleteResponse> DepositGenerateCoinAddressWithHttpInfo (string currency);
        /// <summary>
        /// 개별 입금 조회
        /// </summary>
        /// <remarks>
        /// ## 개별 입금 조회 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">입금 UUID  (optional)</param>
        /// <param name="txid">입금 TXID  (optional)</param>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <returns>Deposit</returns>
        Deposit DepositInfo (string uuid = null, string txid = null, string currency = null);

        /// <summary>
        /// 개별 입금 조회
        /// </summary>
        /// <remarks>
        /// ## 개별 입금 조회 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">입금 UUID  (optional)</param>
        /// <param name="txid">입금 TXID  (optional)</param>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <returns>ApiResponse of Deposit</returns>
        ApiResponse<Deposit> DepositInfoWithHttpInfo (string uuid = null, string txid = null, string currency = null);
        /// <summary>
        /// 입금 리스트 조회
        /// </summary>
        /// <remarks>
        /// ## 입금 리스트 조회 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <param name="state">출금 상태 - submitting : 처리 중 - submitted : 처리완료 - almost_accepted : 입금 대기 중 - rejected : 거절 - accepted : 승인됨 - processing : 처리 중  (optional)</param>
        /// <param name="uuids">입금 UUID의 목록  (optional)</param>
        /// <param name="txids">입금 TXID의 목록  (optional)</param>
        /// <param name="limit">개수 제한 (default: 100, max: 100)  (optional)</param>
        /// <param name="page">페이지 수, default: 1  (optional)</param>
        /// <param name="orderBy">정렬 방식 - asc : 오름차순 - desc : 내림차순 (default)  (optional)</param>
        /// <returns>List&lt;Deposit&gt;</returns>
        List<Deposit> DepositInfoAll (string currency = null, string state = null, List<string> uuids = null, List<string> txids = null, decimal? limit = null, decimal? page = null, string orderBy = null);

        /// <summary>
        /// 입금 리스트 조회
        /// </summary>
        /// <remarks>
        /// ## 입금 리스트 조회 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <param name="state">출금 상태 - submitting : 처리 중 - submitted : 처리완료 - almost_accepted : 입금 대기 중 - rejected : 거절 - accepted : 승인됨 - processing : 처리 중  (optional)</param>
        /// <param name="uuids">입금 UUID의 목록  (optional)</param>
        /// <param name="txids">입금 TXID의 목록  (optional)</param>
        /// <param name="limit">개수 제한 (default: 100, max: 100)  (optional)</param>
        /// <param name="page">페이지 수, default: 1  (optional)</param>
        /// <param name="orderBy">정렬 방식 - asc : 오름차순 - desc : 내림차순 (default)  (optional)</param>
        /// <returns>ApiResponse of List&lt;Deposit&gt;</returns>
        ApiResponse<List<Deposit>> DepositInfoAllWithHttpInfo (string currency = null, string state = null, List<string> uuids = null, List<string> txids = null, decimal? limit = null, decimal? page = null, string orderBy = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 개별 입금 주소 조회
        /// </summary>
        /// <remarks>
        /// ## 개별 입금 주소 조회  **NOTE**: 입금 주소 조회 요청 API 유의사항  입금 주소 생성 요청 이후 아직 발급되지 않은 상태일 경우 deposit_address가 null일 수 있습니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency symbol </param>
        /// <returns>Task of DepositCompleteResponse</returns>
        System.Threading.Tasks.Task<DepositCompleteResponse> DepositCoinAddressAsync (string currency);

        /// <summary>
        /// 개별 입금 주소 조회
        /// </summary>
        /// <remarks>
        /// ## 개별 입금 주소 조회  **NOTE**: 입금 주소 조회 요청 API 유의사항  입금 주소 생성 요청 이후 아직 발급되지 않은 상태일 경우 deposit_address가 null일 수 있습니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency symbol </param>
        /// <returns>Task of ApiResponse (DepositCompleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DepositCompleteResponse>> DepositCoinAddressAsyncWithHttpInfo (string currency);
        /// <summary>
        /// 전체 입금 주소 조회
        /// </summary>
        /// <remarks>
        /// ## 내가 보유한 자산 리스트를 보여줍니다.  **NOTE**: 입금 주소 조회 요청 API 유의사항  입금 주소 생성 요청 이후 아직 발급되지 않은 상태일 경우 deposit_address가 null일 수 있습니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DepositCoinAddressesAsync ();

        /// <summary>
        /// 전체 입금 주소 조회
        /// </summary>
        /// <remarks>
        /// ## 내가 보유한 자산 리스트를 보여줍니다.  **NOTE**: 입금 주소 조회 요청 API 유의사항  입금 주소 생성 요청 이후 아직 발급되지 않은 상태일 경우 deposit_address가 null일 수 있습니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DepositCoinAddressesAsyncWithHttpInfo ();
        /// <summary>
        /// 입금 주소 생성 요청
        /// </summary>
        /// <remarks>
        /// 입금 주소 생성을 요청한다.  **NOTE**: 입금 주소 생성 요청 API 유의사항  입금 주소의 생성은 서버에서 비동기적으로 이뤄집니다. 비동기적 생성 특성상 요청과 동시에 입금 주소가 발급되지 않을 수 있습니다. 주소 발급 요청 시 결과로 Response1이 반환되며 주소 발급 완료 이전까지 계속 Response1이 반환됩니다. 주소가 발급된 이후부터는 새로운 주소가 발급되는 것이 아닌 이전에 발급된 주소가 Response2 형태로 반환됩니다. 정상적으로 주소가 생성되지 않는다면 일정 시간 이후 해당 API를 다시 호출해주시길 부탁드립니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드 </param>
        /// <returns>Task of DepositCompleteResponse</returns>
        System.Threading.Tasks.Task<DepositCompleteResponse> DepositGenerateCoinAddressAsync (string currency);

        /// <summary>
        /// 입금 주소 생성 요청
        /// </summary>
        /// <remarks>
        /// 입금 주소 생성을 요청한다.  **NOTE**: 입금 주소 생성 요청 API 유의사항  입금 주소의 생성은 서버에서 비동기적으로 이뤄집니다. 비동기적 생성 특성상 요청과 동시에 입금 주소가 발급되지 않을 수 있습니다. 주소 발급 요청 시 결과로 Response1이 반환되며 주소 발급 완료 이전까지 계속 Response1이 반환됩니다. 주소가 발급된 이후부터는 새로운 주소가 발급되는 것이 아닌 이전에 발급된 주소가 Response2 형태로 반환됩니다. 정상적으로 주소가 생성되지 않는다면 일정 시간 이후 해당 API를 다시 호출해주시길 부탁드립니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드 </param>
        /// <returns>Task of ApiResponse (DepositCompleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DepositCompleteResponse>> DepositGenerateCoinAddressAsyncWithHttpInfo (string currency);
        /// <summary>
        /// 개별 입금 조회
        /// </summary>
        /// <remarks>
        /// ## 개별 입금 조회 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">입금 UUID  (optional)</param>
        /// <param name="txid">입금 TXID  (optional)</param>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <returns>Task of Deposit</returns>
        System.Threading.Tasks.Task<Deposit> DepositInfoAsync (string uuid = null, string txid = null, string currency = null);

        /// <summary>
        /// 개별 입금 조회
        /// </summary>
        /// <remarks>
        /// ## 개별 입금 조회 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">입금 UUID  (optional)</param>
        /// <param name="txid">입금 TXID  (optional)</param>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <returns>Task of ApiResponse (Deposit)</returns>
        System.Threading.Tasks.Task<ApiResponse<Deposit>> DepositInfoAsyncWithHttpInfo (string uuid = null, string txid = null, string currency = null);
        /// <summary>
        /// 입금 리스트 조회
        /// </summary>
        /// <remarks>
        /// ## 입금 리스트 조회 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <param name="state">출금 상태 - submitting : 처리 중 - submitted : 처리완료 - almost_accepted : 입금 대기 중 - rejected : 거절 - accepted : 승인됨 - processing : 처리 중  (optional)</param>
        /// <param name="uuids">입금 UUID의 목록  (optional)</param>
        /// <param name="txids">입금 TXID의 목록  (optional)</param>
        /// <param name="limit">개수 제한 (default: 100, max: 100)  (optional)</param>
        /// <param name="page">페이지 수, default: 1  (optional)</param>
        /// <param name="orderBy">정렬 방식 - asc : 오름차순 - desc : 내림차순 (default)  (optional)</param>
        /// <returns>Task of List&lt;Deposit&gt;</returns>
        System.Threading.Tasks.Task<List<Deposit>> DepositInfoAllAsync (string currency = null, string state = null, List<string> uuids = null, List<string> txids = null, decimal? limit = null, decimal? page = null, string orderBy = null);

        /// <summary>
        /// 입금 리스트 조회
        /// </summary>
        /// <remarks>
        /// ## 입금 리스트 조회 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <param name="state">출금 상태 - submitting : 처리 중 - submitted : 처리완료 - almost_accepted : 입금 대기 중 - rejected : 거절 - accepted : 승인됨 - processing : 처리 중  (optional)</param>
        /// <param name="uuids">입금 UUID의 목록  (optional)</param>
        /// <param name="txids">입금 TXID의 목록  (optional)</param>
        /// <param name="limit">개수 제한 (default: 100, max: 100)  (optional)</param>
        /// <param name="page">페이지 수, default: 1  (optional)</param>
        /// <param name="orderBy">정렬 방식 - asc : 오름차순 - desc : 내림차순 (default)  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Deposit&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Deposit>>> DepositInfoAllAsyncWithHttpInfo (string currency = null, string state = null, List<string> uuids = null, List<string> txids = null, decimal? limit = null, decimal? page = null, string orderBy = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DepositApi : IDepositApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DepositApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DepositApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DepositApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DepositApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// 개별 입금 주소 조회 ## 개별 입금 주소 조회  **NOTE**: 입금 주소 조회 요청 API 유의사항  입금 주소 생성 요청 이후 아직 발급되지 않은 상태일 경우 deposit_address가 null일 수 있습니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency symbol </param>
        /// <returns>DepositCompleteResponse</returns>
        public DepositCompleteResponse DepositCoinAddress (string currency)
        {
             ApiResponse<DepositCompleteResponse> localVarResponse = DepositCoinAddressWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 개별 입금 주소 조회 ## 개별 입금 주소 조회  **NOTE**: 입금 주소 조회 요청 API 유의사항  입금 주소 생성 요청 이후 아직 발급되지 않은 상태일 경우 deposit_address가 null일 수 있습니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency symbol </param>
        /// <returns>ApiResponse of DepositCompleteResponse</returns>
        public ApiResponse< DepositCompleteResponse > DepositCoinAddressWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling DepositApi->DepositCoinAddress");

            var localVarPath = "/deposits/coin_address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DepositCoinAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DepositCompleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DepositCompleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DepositCompleteResponse)));
        }

        /// <summary>
        /// 개별 입금 주소 조회 ## 개별 입금 주소 조회  **NOTE**: 입금 주소 조회 요청 API 유의사항  입금 주소 생성 요청 이후 아직 발급되지 않은 상태일 경우 deposit_address가 null일 수 있습니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency symbol </param>
        /// <returns>Task of DepositCompleteResponse</returns>
        public async System.Threading.Tasks.Task<DepositCompleteResponse> DepositCoinAddressAsync (string currency)
        {
             ApiResponse<DepositCompleteResponse> localVarResponse = await DepositCoinAddressAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 개별 입금 주소 조회 ## 개별 입금 주소 조회  **NOTE**: 입금 주소 조회 요청 API 유의사항  입금 주소 생성 요청 이후 아직 발급되지 않은 상태일 경우 deposit_address가 null일 수 있습니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency symbol </param>
        /// <returns>Task of ApiResponse (DepositCompleteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DepositCompleteResponse>> DepositCoinAddressAsyncWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling DepositApi->DepositCoinAddress");

            var localVarPath = "/deposits/coin_address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DepositCoinAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DepositCompleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DepositCompleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DepositCompleteResponse)));
        }

        /// <summary>
        /// 전체 입금 주소 조회 ## 내가 보유한 자산 리스트를 보여줍니다.  **NOTE**: 입금 주소 조회 요청 API 유의사항  입금 주소 생성 요청 이후 아직 발급되지 않은 상태일 경우 deposit_address가 null일 수 있습니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object DepositCoinAddresses ()
        {
             ApiResponse<Object> localVarResponse = DepositCoinAddressesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// 전체 입금 주소 조회 ## 내가 보유한 자산 리스트를 보여줍니다.  **NOTE**: 입금 주소 조회 요청 API 유의사항  입금 주소 생성 요청 이후 아직 발급되지 않은 상태일 경우 deposit_address가 null일 수 있습니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DepositCoinAddressesWithHttpInfo ()
        {

            var localVarPath = "/deposits/coin_addresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DepositCoinAddresses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// 전체 입금 주소 조회 ## 내가 보유한 자산 리스트를 보여줍니다.  **NOTE**: 입금 주소 조회 요청 API 유의사항  입금 주소 생성 요청 이후 아직 발급되지 않은 상태일 경우 deposit_address가 null일 수 있습니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DepositCoinAddressesAsync ()
        {
             ApiResponse<Object> localVarResponse = await DepositCoinAddressesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// 전체 입금 주소 조회 ## 내가 보유한 자산 리스트를 보여줍니다.  **NOTE**: 입금 주소 조회 요청 API 유의사항  입금 주소 생성 요청 이후 아직 발급되지 않은 상태일 경우 deposit_address가 null일 수 있습니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DepositCoinAddressesAsyncWithHttpInfo ()
        {

            var localVarPath = "/deposits/coin_addresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DepositCoinAddresses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// 입금 주소 생성 요청 입금 주소 생성을 요청한다.  **NOTE**: 입금 주소 생성 요청 API 유의사항  입금 주소의 생성은 서버에서 비동기적으로 이뤄집니다. 비동기적 생성 특성상 요청과 동시에 입금 주소가 발급되지 않을 수 있습니다. 주소 발급 요청 시 결과로 Response1이 반환되며 주소 발급 완료 이전까지 계속 Response1이 반환됩니다. 주소가 발급된 이후부터는 새로운 주소가 발급되는 것이 아닌 이전에 발급된 주소가 Response2 형태로 반환됩니다. 정상적으로 주소가 생성되지 않는다면 일정 시간 이후 해당 API를 다시 호출해주시길 부탁드립니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드 </param>
        /// <returns>DepositCompleteResponse</returns>
        public DepositCompleteResponse DepositGenerateCoinAddress (string currency)
        {
             ApiResponse<DepositCompleteResponse> localVarResponse = DepositGenerateCoinAddressWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 입금 주소 생성 요청 입금 주소 생성을 요청한다.  **NOTE**: 입금 주소 생성 요청 API 유의사항  입금 주소의 생성은 서버에서 비동기적으로 이뤄집니다. 비동기적 생성 특성상 요청과 동시에 입금 주소가 발급되지 않을 수 있습니다. 주소 발급 요청 시 결과로 Response1이 반환되며 주소 발급 완료 이전까지 계속 Response1이 반환됩니다. 주소가 발급된 이후부터는 새로운 주소가 발급되는 것이 아닌 이전에 발급된 주소가 Response2 형태로 반환됩니다. 정상적으로 주소가 생성되지 않는다면 일정 시간 이후 해당 API를 다시 호출해주시길 부탁드립니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드 </param>
        /// <returns>ApiResponse of DepositCompleteResponse</returns>
        public ApiResponse< DepositCompleteResponse > DepositGenerateCoinAddressWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling DepositApi->DepositGenerateCoinAddress");

            var localVarPath = "/deposits/generate_coin_address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarFormParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DepositGenerateCoinAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DepositCompleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DepositCompleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DepositCompleteResponse)));
        }

        /// <summary>
        /// 입금 주소 생성 요청 입금 주소 생성을 요청한다.  **NOTE**: 입금 주소 생성 요청 API 유의사항  입금 주소의 생성은 서버에서 비동기적으로 이뤄집니다. 비동기적 생성 특성상 요청과 동시에 입금 주소가 발급되지 않을 수 있습니다. 주소 발급 요청 시 결과로 Response1이 반환되며 주소 발급 완료 이전까지 계속 Response1이 반환됩니다. 주소가 발급된 이후부터는 새로운 주소가 발급되는 것이 아닌 이전에 발급된 주소가 Response2 형태로 반환됩니다. 정상적으로 주소가 생성되지 않는다면 일정 시간 이후 해당 API를 다시 호출해주시길 부탁드립니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드 </param>
        /// <returns>Task of DepositCompleteResponse</returns>
        public async System.Threading.Tasks.Task<DepositCompleteResponse> DepositGenerateCoinAddressAsync (string currency)
        {
             ApiResponse<DepositCompleteResponse> localVarResponse = await DepositGenerateCoinAddressAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 입금 주소 생성 요청 입금 주소 생성을 요청한다.  **NOTE**: 입금 주소 생성 요청 API 유의사항  입금 주소의 생성은 서버에서 비동기적으로 이뤄집니다. 비동기적 생성 특성상 요청과 동시에 입금 주소가 발급되지 않을 수 있습니다. 주소 발급 요청 시 결과로 Response1이 반환되며 주소 발급 완료 이전까지 계속 Response1이 반환됩니다. 주소가 발급된 이후부터는 새로운 주소가 발급되는 것이 아닌 이전에 발급된 주소가 Response2 형태로 반환됩니다. 정상적으로 주소가 생성되지 않는다면 일정 시간 이후 해당 API를 다시 호출해주시길 부탁드립니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드 </param>
        /// <returns>Task of ApiResponse (DepositCompleteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DepositCompleteResponse>> DepositGenerateCoinAddressAsyncWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling DepositApi->DepositGenerateCoinAddress");

            var localVarPath = "/deposits/generate_coin_address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarFormParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DepositGenerateCoinAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DepositCompleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DepositCompleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DepositCompleteResponse)));
        }

        /// <summary>
        /// 개별 입금 조회 ## 개별 입금 조회 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">입금 UUID  (optional)</param>
        /// <param name="txid">입금 TXID  (optional)</param>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <returns>Deposit</returns>
        public Deposit DepositInfo (string uuid = null, string txid = null, string currency = null)
        {
             ApiResponse<Deposit> localVarResponse = DepositInfoWithHttpInfo(uuid, txid, currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 개별 입금 조회 ## 개별 입금 조회 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">입금 UUID  (optional)</param>
        /// <param name="txid">입금 TXID  (optional)</param>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <returns>ApiResponse of Deposit</returns>
        public ApiResponse< Deposit > DepositInfoWithHttpInfo (string uuid = null, string txid = null, string currency = null)
        {

            var localVarPath = "/deposit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uuid", uuid)); // query parameter
            if (txid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "txid", txid)); // query parameter
            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DepositInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Deposit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Deposit) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Deposit)));
        }

        /// <summary>
        /// 개별 입금 조회 ## 개별 입금 조회 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">입금 UUID  (optional)</param>
        /// <param name="txid">입금 TXID  (optional)</param>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <returns>Task of Deposit</returns>
        public async System.Threading.Tasks.Task<Deposit> DepositInfoAsync (string uuid = null, string txid = null, string currency = null)
        {
             ApiResponse<Deposit> localVarResponse = await DepositInfoAsyncWithHttpInfo(uuid, txid, currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 개별 입금 조회 ## 개별 입금 조회 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">입금 UUID  (optional)</param>
        /// <param name="txid">입금 TXID  (optional)</param>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <returns>Task of ApiResponse (Deposit)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Deposit>> DepositInfoAsyncWithHttpInfo (string uuid = null, string txid = null, string currency = null)
        {

            var localVarPath = "/deposit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uuid", uuid)); // query parameter
            if (txid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "txid", txid)); // query parameter
            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DepositInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Deposit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Deposit) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Deposit)));
        }

        /// <summary>
        /// 입금 리스트 조회 ## 입금 리스트 조회 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <param name="state">출금 상태 - submitting : 처리 중 - submitted : 처리완료 - almost_accepted : 입금 대기 중 - rejected : 거절 - accepted : 승인됨 - processing : 처리 중  (optional)</param>
        /// <param name="uuids">입금 UUID의 목록  (optional)</param>
        /// <param name="txids">입금 TXID의 목록  (optional)</param>
        /// <param name="limit">개수 제한 (default: 100, max: 100)  (optional)</param>
        /// <param name="page">페이지 수, default: 1  (optional)</param>
        /// <param name="orderBy">정렬 방식 - asc : 오름차순 - desc : 내림차순 (default)  (optional)</param>
        /// <returns>List&lt;Deposit&gt;</returns>
        public List<Deposit> DepositInfoAll (string currency = null, string state = null, List<string> uuids = null, List<string> txids = null, decimal? limit = null, decimal? page = null, string orderBy = null)
        {
             ApiResponse<List<Deposit>> localVarResponse = DepositInfoAllWithHttpInfo(currency, state, uuids, txids, limit, page, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 입금 리스트 조회 ## 입금 리스트 조회 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <param name="state">출금 상태 - submitting : 처리 중 - submitted : 처리완료 - almost_accepted : 입금 대기 중 - rejected : 거절 - accepted : 승인됨 - processing : 처리 중  (optional)</param>
        /// <param name="uuids">입금 UUID의 목록  (optional)</param>
        /// <param name="txids">입금 TXID의 목록  (optional)</param>
        /// <param name="limit">개수 제한 (default: 100, max: 100)  (optional)</param>
        /// <param name="page">페이지 수, default: 1  (optional)</param>
        /// <param name="orderBy">정렬 방식 - asc : 오름차순 - desc : 내림차순 (default)  (optional)</param>
        /// <returns>ApiResponse of List&lt;Deposit&gt;</returns>
        public ApiResponse< List<Deposit> > DepositInfoAllWithHttpInfo (string currency = null, string state = null, List<string> uuids = null, List<string> txids = null, decimal? limit = null, decimal? page = null, string orderBy = null)
        {

            var localVarPath = "/deposits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (uuids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "uuids", uuids)); // query parameter
            if (txids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "txids", txids)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DepositInfoAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Deposit>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Deposit>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Deposit>)));
        }

        /// <summary>
        /// 입금 리스트 조회 ## 입금 리스트 조회 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <param name="state">출금 상태 - submitting : 처리 중 - submitted : 처리완료 - almost_accepted : 입금 대기 중 - rejected : 거절 - accepted : 승인됨 - processing : 처리 중  (optional)</param>
        /// <param name="uuids">입금 UUID의 목록  (optional)</param>
        /// <param name="txids">입금 TXID의 목록  (optional)</param>
        /// <param name="limit">개수 제한 (default: 100, max: 100)  (optional)</param>
        /// <param name="page">페이지 수, default: 1  (optional)</param>
        /// <param name="orderBy">정렬 방식 - asc : 오름차순 - desc : 내림차순 (default)  (optional)</param>
        /// <returns>Task of List&lt;Deposit&gt;</returns>
        public async System.Threading.Tasks.Task<List<Deposit>> DepositInfoAllAsync (string currency = null, string state = null, List<string> uuids = null, List<string> txids = null, decimal? limit = null, decimal? page = null, string orderBy = null)
        {
             ApiResponse<List<Deposit>> localVarResponse = await DepositInfoAllAsyncWithHttpInfo(currency, state, uuids, txids, limit, page, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 입금 리스트 조회 ## 입금 리스트 조회 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency 코드  (optional)</param>
        /// <param name="state">출금 상태 - submitting : 처리 중 - submitted : 처리완료 - almost_accepted : 입금 대기 중 - rejected : 거절 - accepted : 승인됨 - processing : 처리 중  (optional)</param>
        /// <param name="uuids">입금 UUID의 목록  (optional)</param>
        /// <param name="txids">입금 TXID의 목록  (optional)</param>
        /// <param name="limit">개수 제한 (default: 100, max: 100)  (optional)</param>
        /// <param name="page">페이지 수, default: 1  (optional)</param>
        /// <param name="orderBy">정렬 방식 - asc : 오름차순 - desc : 내림차순 (default)  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Deposit&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Deposit>>> DepositInfoAllAsyncWithHttpInfo (string currency = null, string state = null, List<string> uuids = null, List<string> txids = null, decimal? limit = null, decimal? page = null, string orderBy = null)
        {

            var localVarPath = "/deposits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (uuids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "uuids", uuids)); // query parameter
            if (txids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "txids", txids)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DepositInfoAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Deposit>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Deposit>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Deposit>)));
        }

    }
}
