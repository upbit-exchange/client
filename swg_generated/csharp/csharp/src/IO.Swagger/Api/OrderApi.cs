/* 
 * Upbit Open API
 *
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 주문 취소 접수
        /// </summary>
        /// <remarks>
        /// ## 주문 UUID를 통해 해당 주문에 대한 취소 접수를 한다. **NOTE**: &#x60;uuid&#x60; 혹은 &#x60;identifier&#x60; 둘 중 하나의 값이 반드시 포함되어야 합니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">취소할 주문의 UUID  (optional)</param>
        /// <param name="identifier">조회용 사용자 지정 값  (optional)</param>
        /// <returns>Order</returns>
        Order OrderCancel (string uuid = null, string identifier = null);

        /// <summary>
        /// 주문 취소 접수
        /// </summary>
        /// <remarks>
        /// ## 주문 UUID를 통해 해당 주문에 대한 취소 접수를 한다. **NOTE**: &#x60;uuid&#x60; 혹은 &#x60;identifier&#x60; 둘 중 하나의 값이 반드시 포함되어야 합니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">취소할 주문의 UUID  (optional)</param>
        /// <param name="identifier">조회용 사용자 지정 값  (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> OrderCancelWithHttpInfo (string uuid = null, string identifier = null);
        /// <summary>
        /// 주문 가능 정보
        /// </summary>
        /// <remarks>
        /// ## 마켓별 주문 가능 정보를 확인한다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Market ID </param>
        /// <returns>OrderChance</returns>
        OrderChance OrderChance (string market);

        /// <summary>
        /// 주문 가능 정보
        /// </summary>
        /// <remarks>
        /// ## 마켓별 주문 가능 정보를 확인한다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Market ID </param>
        /// <returns>ApiResponse of OrderChance</returns>
        ApiResponse<OrderChance> OrderChanceWithHttpInfo (string market);
        /// <summary>
        /// 개별 주문 조회
        /// </summary>
        /// <remarks>
        /// ## 주문 UUID를 통해 개별 주문건을 조회한다. **NOTE**: &#x60;uuid&#x60; 혹은 &#x60;identifier&#x60; 둘 중 하나의 값이 반드시 포함되어야 합니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">주문 UUID  (optional)</param>
        /// <param name="identifier">조회용 사용자 지정 값  (optional)</param>
        /// <returns>OrderInfo</returns>
        OrderInfo OrderInfo (string uuid = null, string identifier = null);

        /// <summary>
        /// 개별 주문 조회
        /// </summary>
        /// <remarks>
        /// ## 주문 UUID를 통해 개별 주문건을 조회한다. **NOTE**: &#x60;uuid&#x60; 혹은 &#x60;identifier&#x60; 둘 중 하나의 값이 반드시 포함되어야 합니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">주문 UUID  (optional)</param>
        /// <param name="identifier">조회용 사용자 지정 값  (optional)</param>
        /// <returns>ApiResponse of OrderInfo</returns>
        ApiResponse<OrderInfo> OrderInfoWithHttpInfo (string uuid = null, string identifier = null);
        /// <summary>
        /// 주문 리스트 조회
        /// </summary>
        /// <remarks>
        /// ## 주문 리스트를 조회한다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">마켓 아이디  (optional)</param>
        /// <param name="state">주문 상태   - wait : 체결 대기 (default)   - done : 전체 체결 완료   - cancel : 주문 취소  (optional)</param>
        /// <param name="states">주문 상태의 목록  (optional)</param>
        /// <param name="uuids">주문 UUID의 목록  (optional)</param>
        /// <param name="identifiers">주문 identifier의 목록  (optional)</param>
        /// <param name="page">페이지 수, default: 1  (optional)</param>
        /// <param name="limit">요청 개수, default: 100  (optional)</param>
        /// <param name="orderBy">정렬 방식 - asc : 오름차순 - desc : 내림차순 (default)  (optional)</param>
        /// <returns>List&lt;Order&gt;</returns>
        List<Order> OrderInfoAll (string market = null, string state = null, List<string> states = null, List<string> uuids = null, List<string> identifiers = null, decimal? page = null, decimal? limit = null, string orderBy = null);

        /// <summary>
        /// 주문 리스트 조회
        /// </summary>
        /// <remarks>
        /// ## 주문 리스트를 조회한다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">마켓 아이디  (optional)</param>
        /// <param name="state">주문 상태   - wait : 체결 대기 (default)   - done : 전체 체결 완료   - cancel : 주문 취소  (optional)</param>
        /// <param name="states">주문 상태의 목록  (optional)</param>
        /// <param name="uuids">주문 UUID의 목록  (optional)</param>
        /// <param name="identifiers">주문 identifier의 목록  (optional)</param>
        /// <param name="page">페이지 수, default: 1  (optional)</param>
        /// <param name="limit">요청 개수, default: 100  (optional)</param>
        /// <param name="orderBy">정렬 방식 - asc : 오름차순 - desc : 내림차순 (default)  (optional)</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        ApiResponse<List<Order>> OrderInfoAllWithHttpInfo (string market = null, string state = null, List<string> states = null, List<string> uuids = null, List<string> identifiers = null, decimal? page = null, decimal? limit = null, string orderBy = null);
        /// <summary>
        /// 주문하기
        /// </summary>
        /// <remarks>
        /// ## 주문 요청을 한다. **NOTE**: 원화 마켓 가격 단위를 확인하세요. 원화 마켓에서 주문을 요청 할 경우, [원화 마켓 주문 가격 단위](https://docs.upbit.com/docs/market-info-trade-price-detail)를 확인하여 값을 입력해주세요. **NOTE**: identifier 파라미터 사용 &#x60;identifier&#x60;는 서비스에서 발급하는 &#x60;uuid&#x60;가 아닌 이용자가 직접 발급하는 키값으로, 주문을 조회하기 위해 할당하는 값입니다. 해당 값은 사용자의 전체 주문 내 유일한 값을 전달해야하며, 비록 주문 요청시 오류가 발생하더라도 같은 값으로 다시 요청을 보낼 수 없습니다. 주문의 성공 / 실패 여부와 관계없이 중복해서 들어온 &#x60;identifier&#x60; 값에서는 중복 오류가 발생하니, 매 요청시 새로운 값을 생성해주세요. **NOTE**: 시장가 주문 시장가 주문은 &#x60;ord_type&#x60; 필드를 &#x60;price&#x60; or &#x60;market&#x60; 으로 설정해야됩니다. 매수 주문의 경우 &#x60;ord_type&#x60;을 &#x60;price&#x60;로 설정하고 &#x60;volume&#x60;을 &#x60;null&#x60; 혹은 제외해야됩니다. 매도 주문의 경우 &#x60;ord_type&#x60;을 &#x60;market&#x60;로 설정하고 &#x60;price&#x60;을 &#x60;null&#x60; 혹은 제외해야됩니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">마켓 ID (필수) </param>
        /// <param name="side">주문 종류 (필수) - bid : 매수 - ask : 매도 </param>
        /// <param name="ordType">주문 타입 (필수) - limit : 지정가 주문 - price : 시장가 주문(매수) - market : 시장가 주문(매도) </param>
        /// <param name="volume">주문량 (지정가, 시장가 매도 시 필수)  (optional, default to null)</param>
        /// <param name="price">주문 가격. (지정가, 시장가 매수 시 필수) ex) KRW-BTC 마켓에서 1BTC당 1,000 KRW로 거래할 경우, 값은 1000 이 된다. ex) KRW-BTC 마켓에서 1BTC당 매도 1호가가 500 KRW 인 경우, 시장가 매수 시 값을 1000으로 세팅하면 2BTC가 매수된다. (수수료가 존재하거나 매도 1호가의 수량에 따라 상이할 수 있음)  (optional, default to null)</param>
        /// <param name="identifier">조회용 사용자 지정값 (선택)  (optional)</param>
        /// <returns>NewOrder</returns>
        NewOrder OrderNew (string market, string side, string ordType, string volume = null, string price = null, string identifier = null);

        /// <summary>
        /// 주문하기
        /// </summary>
        /// <remarks>
        /// ## 주문 요청을 한다. **NOTE**: 원화 마켓 가격 단위를 확인하세요. 원화 마켓에서 주문을 요청 할 경우, [원화 마켓 주문 가격 단위](https://docs.upbit.com/docs/market-info-trade-price-detail)를 확인하여 값을 입력해주세요. **NOTE**: identifier 파라미터 사용 &#x60;identifier&#x60;는 서비스에서 발급하는 &#x60;uuid&#x60;가 아닌 이용자가 직접 발급하는 키값으로, 주문을 조회하기 위해 할당하는 값입니다. 해당 값은 사용자의 전체 주문 내 유일한 값을 전달해야하며, 비록 주문 요청시 오류가 발생하더라도 같은 값으로 다시 요청을 보낼 수 없습니다. 주문의 성공 / 실패 여부와 관계없이 중복해서 들어온 &#x60;identifier&#x60; 값에서는 중복 오류가 발생하니, 매 요청시 새로운 값을 생성해주세요. **NOTE**: 시장가 주문 시장가 주문은 &#x60;ord_type&#x60; 필드를 &#x60;price&#x60; or &#x60;market&#x60; 으로 설정해야됩니다. 매수 주문의 경우 &#x60;ord_type&#x60;을 &#x60;price&#x60;로 설정하고 &#x60;volume&#x60;을 &#x60;null&#x60; 혹은 제외해야됩니다. 매도 주문의 경우 &#x60;ord_type&#x60;을 &#x60;market&#x60;로 설정하고 &#x60;price&#x60;을 &#x60;null&#x60; 혹은 제외해야됩니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">마켓 ID (필수) </param>
        /// <param name="side">주문 종류 (필수) - bid : 매수 - ask : 매도 </param>
        /// <param name="ordType">주문 타입 (필수) - limit : 지정가 주문 - price : 시장가 주문(매수) - market : 시장가 주문(매도) </param>
        /// <param name="volume">주문량 (지정가, 시장가 매도 시 필수)  (optional, default to null)</param>
        /// <param name="price">주문 가격. (지정가, 시장가 매수 시 필수) ex) KRW-BTC 마켓에서 1BTC당 1,000 KRW로 거래할 경우, 값은 1000 이 된다. ex) KRW-BTC 마켓에서 1BTC당 매도 1호가가 500 KRW 인 경우, 시장가 매수 시 값을 1000으로 세팅하면 2BTC가 매수된다. (수수료가 존재하거나 매도 1호가의 수량에 따라 상이할 수 있음)  (optional, default to null)</param>
        /// <param name="identifier">조회용 사용자 지정값 (선택)  (optional)</param>
        /// <returns>ApiResponse of NewOrder</returns>
        ApiResponse<NewOrder> OrderNewWithHttpInfo (string market, string side, string ordType, string volume = null, string price = null, string identifier = null);
        /// <summary>
        /// 시세 호가 정보(Orderbook) 조회
        /// </summary>
        /// <remarks>
        /// ## 호가 정보 조회 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markets">마켓 코드 목록 (ex. KRW-BTC,KRW-ADA) </param>
        /// <returns>List&lt;Orderbook&gt;</returns>
        List<Orderbook> OrderOrderbook (List<string> markets);

        /// <summary>
        /// 시세 호가 정보(Orderbook) 조회
        /// </summary>
        /// <remarks>
        /// ## 호가 정보 조회 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markets">마켓 코드 목록 (ex. KRW-BTC,KRW-ADA) </param>
        /// <returns>ApiResponse of List&lt;Orderbook&gt;</returns>
        ApiResponse<List<Orderbook>> OrderOrderbookWithHttpInfo (List<string> markets);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 주문 취소 접수
        /// </summary>
        /// <remarks>
        /// ## 주문 UUID를 통해 해당 주문에 대한 취소 접수를 한다. **NOTE**: &#x60;uuid&#x60; 혹은 &#x60;identifier&#x60; 둘 중 하나의 값이 반드시 포함되어야 합니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">취소할 주문의 UUID  (optional)</param>
        /// <param name="identifier">조회용 사용자 지정 값  (optional)</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> OrderCancelAsync (string uuid = null, string identifier = null);

        /// <summary>
        /// 주문 취소 접수
        /// </summary>
        /// <remarks>
        /// ## 주문 UUID를 통해 해당 주문에 대한 취소 접수를 한다. **NOTE**: &#x60;uuid&#x60; 혹은 &#x60;identifier&#x60; 둘 중 하나의 값이 반드시 포함되어야 합니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">취소할 주문의 UUID  (optional)</param>
        /// <param name="identifier">조회용 사용자 지정 값  (optional)</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> OrderCancelAsyncWithHttpInfo (string uuid = null, string identifier = null);
        /// <summary>
        /// 주문 가능 정보
        /// </summary>
        /// <remarks>
        /// ## 마켓별 주문 가능 정보를 확인한다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Market ID </param>
        /// <returns>Task of OrderChance</returns>
        System.Threading.Tasks.Task<OrderChance> OrderChanceAsync (string market);

        /// <summary>
        /// 주문 가능 정보
        /// </summary>
        /// <remarks>
        /// ## 마켓별 주문 가능 정보를 확인한다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Market ID </param>
        /// <returns>Task of ApiResponse (OrderChance)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderChance>> OrderChanceAsyncWithHttpInfo (string market);
        /// <summary>
        /// 개별 주문 조회
        /// </summary>
        /// <remarks>
        /// ## 주문 UUID를 통해 개별 주문건을 조회한다. **NOTE**: &#x60;uuid&#x60; 혹은 &#x60;identifier&#x60; 둘 중 하나의 값이 반드시 포함되어야 합니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">주문 UUID  (optional)</param>
        /// <param name="identifier">조회용 사용자 지정 값  (optional)</param>
        /// <returns>Task of OrderInfo</returns>
        System.Threading.Tasks.Task<OrderInfo> OrderInfoAsync (string uuid = null, string identifier = null);

        /// <summary>
        /// 개별 주문 조회
        /// </summary>
        /// <remarks>
        /// ## 주문 UUID를 통해 개별 주문건을 조회한다. **NOTE**: &#x60;uuid&#x60; 혹은 &#x60;identifier&#x60; 둘 중 하나의 값이 반드시 포함되어야 합니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">주문 UUID  (optional)</param>
        /// <param name="identifier">조회용 사용자 지정 값  (optional)</param>
        /// <returns>Task of ApiResponse (OrderInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderInfo>> OrderInfoAsyncWithHttpInfo (string uuid = null, string identifier = null);
        /// <summary>
        /// 주문 리스트 조회
        /// </summary>
        /// <remarks>
        /// ## 주문 리스트를 조회한다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">마켓 아이디  (optional)</param>
        /// <param name="state">주문 상태   - wait : 체결 대기 (default)   - done : 전체 체결 완료   - cancel : 주문 취소  (optional)</param>
        /// <param name="states">주문 상태의 목록  (optional)</param>
        /// <param name="uuids">주문 UUID의 목록  (optional)</param>
        /// <param name="identifiers">주문 identifier의 목록  (optional)</param>
        /// <param name="page">페이지 수, default: 1  (optional)</param>
        /// <param name="limit">요청 개수, default: 100  (optional)</param>
        /// <param name="orderBy">정렬 방식 - asc : 오름차순 - desc : 내림차순 (default)  (optional)</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        System.Threading.Tasks.Task<List<Order>> OrderInfoAllAsync (string market = null, string state = null, List<string> states = null, List<string> uuids = null, List<string> identifiers = null, decimal? page = null, decimal? limit = null, string orderBy = null);

        /// <summary>
        /// 주문 리스트 조회
        /// </summary>
        /// <remarks>
        /// ## 주문 리스트를 조회한다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">마켓 아이디  (optional)</param>
        /// <param name="state">주문 상태   - wait : 체결 대기 (default)   - done : 전체 체결 완료   - cancel : 주문 취소  (optional)</param>
        /// <param name="states">주문 상태의 목록  (optional)</param>
        /// <param name="uuids">주문 UUID의 목록  (optional)</param>
        /// <param name="identifiers">주문 identifier의 목록  (optional)</param>
        /// <param name="page">페이지 수, default: 1  (optional)</param>
        /// <param name="limit">요청 개수, default: 100  (optional)</param>
        /// <param name="orderBy">정렬 방식 - asc : 오름차순 - desc : 내림차순 (default)  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Order>>> OrderInfoAllAsyncWithHttpInfo (string market = null, string state = null, List<string> states = null, List<string> uuids = null, List<string> identifiers = null, decimal? page = null, decimal? limit = null, string orderBy = null);
        /// <summary>
        /// 주문하기
        /// </summary>
        /// <remarks>
        /// ## 주문 요청을 한다. **NOTE**: 원화 마켓 가격 단위를 확인하세요. 원화 마켓에서 주문을 요청 할 경우, [원화 마켓 주문 가격 단위](https://docs.upbit.com/docs/market-info-trade-price-detail)를 확인하여 값을 입력해주세요. **NOTE**: identifier 파라미터 사용 &#x60;identifier&#x60;는 서비스에서 발급하는 &#x60;uuid&#x60;가 아닌 이용자가 직접 발급하는 키값으로, 주문을 조회하기 위해 할당하는 값입니다. 해당 값은 사용자의 전체 주문 내 유일한 값을 전달해야하며, 비록 주문 요청시 오류가 발생하더라도 같은 값으로 다시 요청을 보낼 수 없습니다. 주문의 성공 / 실패 여부와 관계없이 중복해서 들어온 &#x60;identifier&#x60; 값에서는 중복 오류가 발생하니, 매 요청시 새로운 값을 생성해주세요. **NOTE**: 시장가 주문 시장가 주문은 &#x60;ord_type&#x60; 필드를 &#x60;price&#x60; or &#x60;market&#x60; 으로 설정해야됩니다. 매수 주문의 경우 &#x60;ord_type&#x60;을 &#x60;price&#x60;로 설정하고 &#x60;volume&#x60;을 &#x60;null&#x60; 혹은 제외해야됩니다. 매도 주문의 경우 &#x60;ord_type&#x60;을 &#x60;market&#x60;로 설정하고 &#x60;price&#x60;을 &#x60;null&#x60; 혹은 제외해야됩니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">마켓 ID (필수) </param>
        /// <param name="side">주문 종류 (필수) - bid : 매수 - ask : 매도 </param>
        /// <param name="ordType">주문 타입 (필수) - limit : 지정가 주문 - price : 시장가 주문(매수) - market : 시장가 주문(매도) </param>
        /// <param name="volume">주문량 (지정가, 시장가 매도 시 필수)  (optional, default to null)</param>
        /// <param name="price">주문 가격. (지정가, 시장가 매수 시 필수) ex) KRW-BTC 마켓에서 1BTC당 1,000 KRW로 거래할 경우, 값은 1000 이 된다. ex) KRW-BTC 마켓에서 1BTC당 매도 1호가가 500 KRW 인 경우, 시장가 매수 시 값을 1000으로 세팅하면 2BTC가 매수된다. (수수료가 존재하거나 매도 1호가의 수량에 따라 상이할 수 있음)  (optional, default to null)</param>
        /// <param name="identifier">조회용 사용자 지정값 (선택)  (optional)</param>
        /// <returns>Task of NewOrder</returns>
        System.Threading.Tasks.Task<NewOrder> OrderNewAsync (string market, string side, string ordType, string volume = null, string price = null, string identifier = null);

        /// <summary>
        /// 주문하기
        /// </summary>
        /// <remarks>
        /// ## 주문 요청을 한다. **NOTE**: 원화 마켓 가격 단위를 확인하세요. 원화 마켓에서 주문을 요청 할 경우, [원화 마켓 주문 가격 단위](https://docs.upbit.com/docs/market-info-trade-price-detail)를 확인하여 값을 입력해주세요. **NOTE**: identifier 파라미터 사용 &#x60;identifier&#x60;는 서비스에서 발급하는 &#x60;uuid&#x60;가 아닌 이용자가 직접 발급하는 키값으로, 주문을 조회하기 위해 할당하는 값입니다. 해당 값은 사용자의 전체 주문 내 유일한 값을 전달해야하며, 비록 주문 요청시 오류가 발생하더라도 같은 값으로 다시 요청을 보낼 수 없습니다. 주문의 성공 / 실패 여부와 관계없이 중복해서 들어온 &#x60;identifier&#x60; 값에서는 중복 오류가 발생하니, 매 요청시 새로운 값을 생성해주세요. **NOTE**: 시장가 주문 시장가 주문은 &#x60;ord_type&#x60; 필드를 &#x60;price&#x60; or &#x60;market&#x60; 으로 설정해야됩니다. 매수 주문의 경우 &#x60;ord_type&#x60;을 &#x60;price&#x60;로 설정하고 &#x60;volume&#x60;을 &#x60;null&#x60; 혹은 제외해야됩니다. 매도 주문의 경우 &#x60;ord_type&#x60;을 &#x60;market&#x60;로 설정하고 &#x60;price&#x60;을 &#x60;null&#x60; 혹은 제외해야됩니다. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">마켓 ID (필수) </param>
        /// <param name="side">주문 종류 (필수) - bid : 매수 - ask : 매도 </param>
        /// <param name="ordType">주문 타입 (필수) - limit : 지정가 주문 - price : 시장가 주문(매수) - market : 시장가 주문(매도) </param>
        /// <param name="volume">주문량 (지정가, 시장가 매도 시 필수)  (optional, default to null)</param>
        /// <param name="price">주문 가격. (지정가, 시장가 매수 시 필수) ex) KRW-BTC 마켓에서 1BTC당 1,000 KRW로 거래할 경우, 값은 1000 이 된다. ex) KRW-BTC 마켓에서 1BTC당 매도 1호가가 500 KRW 인 경우, 시장가 매수 시 값을 1000으로 세팅하면 2BTC가 매수된다. (수수료가 존재하거나 매도 1호가의 수량에 따라 상이할 수 있음)  (optional, default to null)</param>
        /// <param name="identifier">조회용 사용자 지정값 (선택)  (optional)</param>
        /// <returns>Task of ApiResponse (NewOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewOrder>> OrderNewAsyncWithHttpInfo (string market, string side, string ordType, string volume = null, string price = null, string identifier = null);
        /// <summary>
        /// 시세 호가 정보(Orderbook) 조회
        /// </summary>
        /// <remarks>
        /// ## 호가 정보 조회 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markets">마켓 코드 목록 (ex. KRW-BTC,KRW-ADA) </param>
        /// <returns>Task of List&lt;Orderbook&gt;</returns>
        System.Threading.Tasks.Task<List<Orderbook>> OrderOrderbookAsync (List<string> markets);

        /// <summary>
        /// 시세 호가 정보(Orderbook) 조회
        /// </summary>
        /// <remarks>
        /// ## 호가 정보 조회 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markets">마켓 코드 목록 (ex. KRW-BTC,KRW-ADA) </param>
        /// <returns>Task of ApiResponse (List&lt;Orderbook&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Orderbook>>> OrderOrderbookAsyncWithHttpInfo (List<string> markets);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrderApi : IOrderApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrderApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// 주문 취소 접수 ## 주문 UUID를 통해 해당 주문에 대한 취소 접수를 한다. **NOTE**: &#x60;uuid&#x60; 혹은 &#x60;identifier&#x60; 둘 중 하나의 값이 반드시 포함되어야 합니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">취소할 주문의 UUID  (optional)</param>
        /// <param name="identifier">조회용 사용자 지정 값  (optional)</param>
        /// <returns>Order</returns>
        public Order OrderCancel (string uuid = null, string identifier = null)
        {
             ApiResponse<Order> localVarResponse = OrderCancelWithHttpInfo(uuid, identifier);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 주문 취소 접수 ## 주문 UUID를 통해 해당 주문에 대한 취소 접수를 한다. **NOTE**: &#x60;uuid&#x60; 혹은 &#x60;identifier&#x60; 둘 중 하나의 값이 반드시 포함되어야 합니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">취소할 주문의 UUID  (optional)</param>
        /// <param name="identifier">조회용 사용자 지정 값  (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        public ApiResponse< Order > OrderCancelWithHttpInfo (string uuid = null, string identifier = null)
        {

            var localVarPath = "/order";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uuid", uuid)); // query parameter
            if (identifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "identifier", identifier)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderCancel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }

        /// <summary>
        /// 주문 취소 접수 ## 주문 UUID를 통해 해당 주문에 대한 취소 접수를 한다. **NOTE**: &#x60;uuid&#x60; 혹은 &#x60;identifier&#x60; 둘 중 하나의 값이 반드시 포함되어야 합니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">취소할 주문의 UUID  (optional)</param>
        /// <param name="identifier">조회용 사용자 지정 값  (optional)</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> OrderCancelAsync (string uuid = null, string identifier = null)
        {
             ApiResponse<Order> localVarResponse = await OrderCancelAsyncWithHttpInfo(uuid, identifier);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 주문 취소 접수 ## 주문 UUID를 통해 해당 주문에 대한 취소 접수를 한다. **NOTE**: &#x60;uuid&#x60; 혹은 &#x60;identifier&#x60; 둘 중 하나의 값이 반드시 포함되어야 합니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">취소할 주문의 UUID  (optional)</param>
        /// <param name="identifier">조회용 사용자 지정 값  (optional)</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Order>> OrderCancelAsyncWithHttpInfo (string uuid = null, string identifier = null)
        {

            var localVarPath = "/order";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uuid", uuid)); // query parameter
            if (identifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "identifier", identifier)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderCancel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }

        /// <summary>
        /// 주문 가능 정보 ## 마켓별 주문 가능 정보를 확인한다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Market ID </param>
        /// <returns>OrderChance</returns>
        public OrderChance OrderChance (string market)
        {
             ApiResponse<OrderChance> localVarResponse = OrderChanceWithHttpInfo(market);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 주문 가능 정보 ## 마켓별 주문 가능 정보를 확인한다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Market ID </param>
        /// <returns>ApiResponse of OrderChance</returns>
        public ApiResponse< OrderChance > OrderChanceWithHttpInfo (string market)
        {
            // verify the required parameter 'market' is set
            if (market == null)
                throw new ApiException(400, "Missing required parameter 'market' when calling OrderApi->OrderChance");

            var localVarPath = "/orders/chance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (market != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "market", market)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderChance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderChance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderChance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderChance)));
        }

        /// <summary>
        /// 주문 가능 정보 ## 마켓별 주문 가능 정보를 확인한다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Market ID </param>
        /// <returns>Task of OrderChance</returns>
        public async System.Threading.Tasks.Task<OrderChance> OrderChanceAsync (string market)
        {
             ApiResponse<OrderChance> localVarResponse = await OrderChanceAsyncWithHttpInfo(market);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 주문 가능 정보 ## 마켓별 주문 가능 정보를 확인한다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Market ID </param>
        /// <returns>Task of ApiResponse (OrderChance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderChance>> OrderChanceAsyncWithHttpInfo (string market)
        {
            // verify the required parameter 'market' is set
            if (market == null)
                throw new ApiException(400, "Missing required parameter 'market' when calling OrderApi->OrderChance");

            var localVarPath = "/orders/chance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (market != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "market", market)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderChance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderChance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderChance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderChance)));
        }

        /// <summary>
        /// 개별 주문 조회 ## 주문 UUID를 통해 개별 주문건을 조회한다. **NOTE**: &#x60;uuid&#x60; 혹은 &#x60;identifier&#x60; 둘 중 하나의 값이 반드시 포함되어야 합니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">주문 UUID  (optional)</param>
        /// <param name="identifier">조회용 사용자 지정 값  (optional)</param>
        /// <returns>OrderInfo</returns>
        public OrderInfo OrderInfo (string uuid = null, string identifier = null)
        {
             ApiResponse<OrderInfo> localVarResponse = OrderInfoWithHttpInfo(uuid, identifier);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 개별 주문 조회 ## 주문 UUID를 통해 개별 주문건을 조회한다. **NOTE**: &#x60;uuid&#x60; 혹은 &#x60;identifier&#x60; 둘 중 하나의 값이 반드시 포함되어야 합니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">주문 UUID  (optional)</param>
        /// <param name="identifier">조회용 사용자 지정 값  (optional)</param>
        /// <returns>ApiResponse of OrderInfo</returns>
        public ApiResponse< OrderInfo > OrderInfoWithHttpInfo (string uuid = null, string identifier = null)
        {

            var localVarPath = "/order";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uuid", uuid)); // query parameter
            if (identifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "identifier", identifier)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderInfo)));
        }

        /// <summary>
        /// 개별 주문 조회 ## 주문 UUID를 통해 개별 주문건을 조회한다. **NOTE**: &#x60;uuid&#x60; 혹은 &#x60;identifier&#x60; 둘 중 하나의 값이 반드시 포함되어야 합니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">주문 UUID  (optional)</param>
        /// <param name="identifier">조회용 사용자 지정 값  (optional)</param>
        /// <returns>Task of OrderInfo</returns>
        public async System.Threading.Tasks.Task<OrderInfo> OrderInfoAsync (string uuid = null, string identifier = null)
        {
             ApiResponse<OrderInfo> localVarResponse = await OrderInfoAsyncWithHttpInfo(uuid, identifier);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 개별 주문 조회 ## 주문 UUID를 통해 개별 주문건을 조회한다. **NOTE**: &#x60;uuid&#x60; 혹은 &#x60;identifier&#x60; 둘 중 하나의 값이 반드시 포함되어야 합니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">주문 UUID  (optional)</param>
        /// <param name="identifier">조회용 사용자 지정 값  (optional)</param>
        /// <returns>Task of ApiResponse (OrderInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderInfo>> OrderInfoAsyncWithHttpInfo (string uuid = null, string identifier = null)
        {

            var localVarPath = "/order";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uuid", uuid)); // query parameter
            if (identifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "identifier", identifier)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderInfo)));
        }

        /// <summary>
        /// 주문 리스트 조회 ## 주문 리스트를 조회한다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">마켓 아이디  (optional)</param>
        /// <param name="state">주문 상태   - wait : 체결 대기 (default)   - done : 전체 체결 완료   - cancel : 주문 취소  (optional)</param>
        /// <param name="states">주문 상태의 목록  (optional)</param>
        /// <param name="uuids">주문 UUID의 목록  (optional)</param>
        /// <param name="identifiers">주문 identifier의 목록  (optional)</param>
        /// <param name="page">페이지 수, default: 1  (optional)</param>
        /// <param name="limit">요청 개수, default: 100  (optional)</param>
        /// <param name="orderBy">정렬 방식 - asc : 오름차순 - desc : 내림차순 (default)  (optional)</param>
        /// <returns>List&lt;Order&gt;</returns>
        public List<Order> OrderInfoAll (string market = null, string state = null, List<string> states = null, List<string> uuids = null, List<string> identifiers = null, decimal? page = null, decimal? limit = null, string orderBy = null)
        {
             ApiResponse<List<Order>> localVarResponse = OrderInfoAllWithHttpInfo(market, state, states, uuids, identifiers, page, limit, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 주문 리스트 조회 ## 주문 리스트를 조회한다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">마켓 아이디  (optional)</param>
        /// <param name="state">주문 상태   - wait : 체결 대기 (default)   - done : 전체 체결 완료   - cancel : 주문 취소  (optional)</param>
        /// <param name="states">주문 상태의 목록  (optional)</param>
        /// <param name="uuids">주문 UUID의 목록  (optional)</param>
        /// <param name="identifiers">주문 identifier의 목록  (optional)</param>
        /// <param name="page">페이지 수, default: 1  (optional)</param>
        /// <param name="limit">요청 개수, default: 100  (optional)</param>
        /// <param name="orderBy">정렬 방식 - asc : 오름차순 - desc : 내림차순 (default)  (optional)</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        public ApiResponse< List<Order> > OrderInfoAllWithHttpInfo (string market = null, string state = null, List<string> states = null, List<string> uuids = null, List<string> identifiers = null, decimal? page = null, decimal? limit = null, string orderBy = null)
        {

            var localVarPath = "/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (market != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "market", market)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (states != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "states", states)); // query parameter
            if (uuids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "uuids", uuids)); // query parameter
            if (identifiers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "identifiers", identifiers)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderInfoAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Order>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Order>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Order>)));
        }

        /// <summary>
        /// 주문 리스트 조회 ## 주문 리스트를 조회한다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">마켓 아이디  (optional)</param>
        /// <param name="state">주문 상태   - wait : 체결 대기 (default)   - done : 전체 체결 완료   - cancel : 주문 취소  (optional)</param>
        /// <param name="states">주문 상태의 목록  (optional)</param>
        /// <param name="uuids">주문 UUID의 목록  (optional)</param>
        /// <param name="identifiers">주문 identifier의 목록  (optional)</param>
        /// <param name="page">페이지 수, default: 1  (optional)</param>
        /// <param name="limit">요청 개수, default: 100  (optional)</param>
        /// <param name="orderBy">정렬 방식 - asc : 오름차순 - desc : 내림차순 (default)  (optional)</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        public async System.Threading.Tasks.Task<List<Order>> OrderInfoAllAsync (string market = null, string state = null, List<string> states = null, List<string> uuids = null, List<string> identifiers = null, decimal? page = null, decimal? limit = null, string orderBy = null)
        {
             ApiResponse<List<Order>> localVarResponse = await OrderInfoAllAsyncWithHttpInfo(market, state, states, uuids, identifiers, page, limit, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 주문 리스트 조회 ## 주문 리스트를 조회한다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">마켓 아이디  (optional)</param>
        /// <param name="state">주문 상태   - wait : 체결 대기 (default)   - done : 전체 체결 완료   - cancel : 주문 취소  (optional)</param>
        /// <param name="states">주문 상태의 목록  (optional)</param>
        /// <param name="uuids">주문 UUID의 목록  (optional)</param>
        /// <param name="identifiers">주문 identifier의 목록  (optional)</param>
        /// <param name="page">페이지 수, default: 1  (optional)</param>
        /// <param name="limit">요청 개수, default: 100  (optional)</param>
        /// <param name="orderBy">정렬 방식 - asc : 오름차순 - desc : 내림차순 (default)  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Order>>> OrderInfoAllAsyncWithHttpInfo (string market = null, string state = null, List<string> states = null, List<string> uuids = null, List<string> identifiers = null, decimal? page = null, decimal? limit = null, string orderBy = null)
        {

            var localVarPath = "/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (market != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "market", market)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (states != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "states", states)); // query parameter
            if (uuids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "uuids", uuids)); // query parameter
            if (identifiers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "identifiers", identifiers)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderInfoAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Order>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Order>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Order>)));
        }

        /// <summary>
        /// 주문하기 ## 주문 요청을 한다. **NOTE**: 원화 마켓 가격 단위를 확인하세요. 원화 마켓에서 주문을 요청 할 경우, [원화 마켓 주문 가격 단위](https://docs.upbit.com/docs/market-info-trade-price-detail)를 확인하여 값을 입력해주세요. **NOTE**: identifier 파라미터 사용 &#x60;identifier&#x60;는 서비스에서 발급하는 &#x60;uuid&#x60;가 아닌 이용자가 직접 발급하는 키값으로, 주문을 조회하기 위해 할당하는 값입니다. 해당 값은 사용자의 전체 주문 내 유일한 값을 전달해야하며, 비록 주문 요청시 오류가 발생하더라도 같은 값으로 다시 요청을 보낼 수 없습니다. 주문의 성공 / 실패 여부와 관계없이 중복해서 들어온 &#x60;identifier&#x60; 값에서는 중복 오류가 발생하니, 매 요청시 새로운 값을 생성해주세요. **NOTE**: 시장가 주문 시장가 주문은 &#x60;ord_type&#x60; 필드를 &#x60;price&#x60; or &#x60;market&#x60; 으로 설정해야됩니다. 매수 주문의 경우 &#x60;ord_type&#x60;을 &#x60;price&#x60;로 설정하고 &#x60;volume&#x60;을 &#x60;null&#x60; 혹은 제외해야됩니다. 매도 주문의 경우 &#x60;ord_type&#x60;을 &#x60;market&#x60;로 설정하고 &#x60;price&#x60;을 &#x60;null&#x60; 혹은 제외해야됩니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">마켓 ID (필수) </param>
        /// <param name="side">주문 종류 (필수) - bid : 매수 - ask : 매도 </param>
        /// <param name="ordType">주문 타입 (필수) - limit : 지정가 주문 - price : 시장가 주문(매수) - market : 시장가 주문(매도) </param>
        /// <param name="volume">주문량 (지정가, 시장가 매도 시 필수)  (optional, default to null)</param>
        /// <param name="price">주문 가격. (지정가, 시장가 매수 시 필수) ex) KRW-BTC 마켓에서 1BTC당 1,000 KRW로 거래할 경우, 값은 1000 이 된다. ex) KRW-BTC 마켓에서 1BTC당 매도 1호가가 500 KRW 인 경우, 시장가 매수 시 값을 1000으로 세팅하면 2BTC가 매수된다. (수수료가 존재하거나 매도 1호가의 수량에 따라 상이할 수 있음)  (optional, default to null)</param>
        /// <param name="identifier">조회용 사용자 지정값 (선택)  (optional)</param>
        /// <returns>NewOrder</returns>
        public NewOrder OrderNew (string market, string side, string ordType, string volume = null, string price = null, string identifier = null)
        {
             ApiResponse<NewOrder> localVarResponse = OrderNewWithHttpInfo(market, side, ordType, volume, price, identifier);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 주문하기 ## 주문 요청을 한다. **NOTE**: 원화 마켓 가격 단위를 확인하세요. 원화 마켓에서 주문을 요청 할 경우, [원화 마켓 주문 가격 단위](https://docs.upbit.com/docs/market-info-trade-price-detail)를 확인하여 값을 입력해주세요. **NOTE**: identifier 파라미터 사용 &#x60;identifier&#x60;는 서비스에서 발급하는 &#x60;uuid&#x60;가 아닌 이용자가 직접 발급하는 키값으로, 주문을 조회하기 위해 할당하는 값입니다. 해당 값은 사용자의 전체 주문 내 유일한 값을 전달해야하며, 비록 주문 요청시 오류가 발생하더라도 같은 값으로 다시 요청을 보낼 수 없습니다. 주문의 성공 / 실패 여부와 관계없이 중복해서 들어온 &#x60;identifier&#x60; 값에서는 중복 오류가 발생하니, 매 요청시 새로운 값을 생성해주세요. **NOTE**: 시장가 주문 시장가 주문은 &#x60;ord_type&#x60; 필드를 &#x60;price&#x60; or &#x60;market&#x60; 으로 설정해야됩니다. 매수 주문의 경우 &#x60;ord_type&#x60;을 &#x60;price&#x60;로 설정하고 &#x60;volume&#x60;을 &#x60;null&#x60; 혹은 제외해야됩니다. 매도 주문의 경우 &#x60;ord_type&#x60;을 &#x60;market&#x60;로 설정하고 &#x60;price&#x60;을 &#x60;null&#x60; 혹은 제외해야됩니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">마켓 ID (필수) </param>
        /// <param name="side">주문 종류 (필수) - bid : 매수 - ask : 매도 </param>
        /// <param name="ordType">주문 타입 (필수) - limit : 지정가 주문 - price : 시장가 주문(매수) - market : 시장가 주문(매도) </param>
        /// <param name="volume">주문량 (지정가, 시장가 매도 시 필수)  (optional, default to null)</param>
        /// <param name="price">주문 가격. (지정가, 시장가 매수 시 필수) ex) KRW-BTC 마켓에서 1BTC당 1,000 KRW로 거래할 경우, 값은 1000 이 된다. ex) KRW-BTC 마켓에서 1BTC당 매도 1호가가 500 KRW 인 경우, 시장가 매수 시 값을 1000으로 세팅하면 2BTC가 매수된다. (수수료가 존재하거나 매도 1호가의 수량에 따라 상이할 수 있음)  (optional, default to null)</param>
        /// <param name="identifier">조회용 사용자 지정값 (선택)  (optional)</param>
        /// <returns>ApiResponse of NewOrder</returns>
        public ApiResponse< NewOrder > OrderNewWithHttpInfo (string market, string side, string ordType, string volume = null, string price = null, string identifier = null)
        {
            // verify the required parameter 'market' is set
            if (market == null)
                throw new ApiException(400, "Missing required parameter 'market' when calling OrderApi->OrderNew");
            // verify the required parameter 'side' is set
            if (side == null)
                throw new ApiException(400, "Missing required parameter 'side' when calling OrderApi->OrderNew");
            // verify the required parameter 'ordType' is set
            if (ordType == null)
                throw new ApiException(400, "Missing required parameter 'ordType' when calling OrderApi->OrderNew");

            var localVarPath = "/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "multipart/form-data", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (market != null) localVarFormParams.Add("market", this.Configuration.ApiClient.ParameterToString(market)); // form parameter
            if (side != null) localVarFormParams.Add("side", this.Configuration.ApiClient.ParameterToString(side)); // form parameter
            if (volume != null) localVarFormParams.Add("volume", this.Configuration.ApiClient.ParameterToString(volume)); // form parameter
            if (price != null) localVarFormParams.Add("price", this.Configuration.ApiClient.ParameterToString(price)); // form parameter
            if (ordType != null) localVarFormParams.Add("ord_type", this.Configuration.ApiClient.ParameterToString(ordType)); // form parameter
            if (identifier != null) localVarFormParams.Add("identifier", this.Configuration.ApiClient.ParameterToString(identifier)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderNew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NewOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NewOrder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NewOrder)));
        }

        /// <summary>
        /// 주문하기 ## 주문 요청을 한다. **NOTE**: 원화 마켓 가격 단위를 확인하세요. 원화 마켓에서 주문을 요청 할 경우, [원화 마켓 주문 가격 단위](https://docs.upbit.com/docs/market-info-trade-price-detail)를 확인하여 값을 입력해주세요. **NOTE**: identifier 파라미터 사용 &#x60;identifier&#x60;는 서비스에서 발급하는 &#x60;uuid&#x60;가 아닌 이용자가 직접 발급하는 키값으로, 주문을 조회하기 위해 할당하는 값입니다. 해당 값은 사용자의 전체 주문 내 유일한 값을 전달해야하며, 비록 주문 요청시 오류가 발생하더라도 같은 값으로 다시 요청을 보낼 수 없습니다. 주문의 성공 / 실패 여부와 관계없이 중복해서 들어온 &#x60;identifier&#x60; 값에서는 중복 오류가 발생하니, 매 요청시 새로운 값을 생성해주세요. **NOTE**: 시장가 주문 시장가 주문은 &#x60;ord_type&#x60; 필드를 &#x60;price&#x60; or &#x60;market&#x60; 으로 설정해야됩니다. 매수 주문의 경우 &#x60;ord_type&#x60;을 &#x60;price&#x60;로 설정하고 &#x60;volume&#x60;을 &#x60;null&#x60; 혹은 제외해야됩니다. 매도 주문의 경우 &#x60;ord_type&#x60;을 &#x60;market&#x60;로 설정하고 &#x60;price&#x60;을 &#x60;null&#x60; 혹은 제외해야됩니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">마켓 ID (필수) </param>
        /// <param name="side">주문 종류 (필수) - bid : 매수 - ask : 매도 </param>
        /// <param name="ordType">주문 타입 (필수) - limit : 지정가 주문 - price : 시장가 주문(매수) - market : 시장가 주문(매도) </param>
        /// <param name="volume">주문량 (지정가, 시장가 매도 시 필수)  (optional, default to null)</param>
        /// <param name="price">주문 가격. (지정가, 시장가 매수 시 필수) ex) KRW-BTC 마켓에서 1BTC당 1,000 KRW로 거래할 경우, 값은 1000 이 된다. ex) KRW-BTC 마켓에서 1BTC당 매도 1호가가 500 KRW 인 경우, 시장가 매수 시 값을 1000으로 세팅하면 2BTC가 매수된다. (수수료가 존재하거나 매도 1호가의 수량에 따라 상이할 수 있음)  (optional, default to null)</param>
        /// <param name="identifier">조회용 사용자 지정값 (선택)  (optional)</param>
        /// <returns>Task of NewOrder</returns>
        public async System.Threading.Tasks.Task<NewOrder> OrderNewAsync (string market, string side, string ordType, string volume = null, string price = null, string identifier = null)
        {
             ApiResponse<NewOrder> localVarResponse = await OrderNewAsyncWithHttpInfo(market, side, ordType, volume, price, identifier);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 주문하기 ## 주문 요청을 한다. **NOTE**: 원화 마켓 가격 단위를 확인하세요. 원화 마켓에서 주문을 요청 할 경우, [원화 마켓 주문 가격 단위](https://docs.upbit.com/docs/market-info-trade-price-detail)를 확인하여 값을 입력해주세요. **NOTE**: identifier 파라미터 사용 &#x60;identifier&#x60;는 서비스에서 발급하는 &#x60;uuid&#x60;가 아닌 이용자가 직접 발급하는 키값으로, 주문을 조회하기 위해 할당하는 값입니다. 해당 값은 사용자의 전체 주문 내 유일한 값을 전달해야하며, 비록 주문 요청시 오류가 발생하더라도 같은 값으로 다시 요청을 보낼 수 없습니다. 주문의 성공 / 실패 여부와 관계없이 중복해서 들어온 &#x60;identifier&#x60; 값에서는 중복 오류가 발생하니, 매 요청시 새로운 값을 생성해주세요. **NOTE**: 시장가 주문 시장가 주문은 &#x60;ord_type&#x60; 필드를 &#x60;price&#x60; or &#x60;market&#x60; 으로 설정해야됩니다. 매수 주문의 경우 &#x60;ord_type&#x60;을 &#x60;price&#x60;로 설정하고 &#x60;volume&#x60;을 &#x60;null&#x60; 혹은 제외해야됩니다. 매도 주문의 경우 &#x60;ord_type&#x60;을 &#x60;market&#x60;로 설정하고 &#x60;price&#x60;을 &#x60;null&#x60; 혹은 제외해야됩니다. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">마켓 ID (필수) </param>
        /// <param name="side">주문 종류 (필수) - bid : 매수 - ask : 매도 </param>
        /// <param name="ordType">주문 타입 (필수) - limit : 지정가 주문 - price : 시장가 주문(매수) - market : 시장가 주문(매도) </param>
        /// <param name="volume">주문량 (지정가, 시장가 매도 시 필수)  (optional, default to null)</param>
        /// <param name="price">주문 가격. (지정가, 시장가 매수 시 필수) ex) KRW-BTC 마켓에서 1BTC당 1,000 KRW로 거래할 경우, 값은 1000 이 된다. ex) KRW-BTC 마켓에서 1BTC당 매도 1호가가 500 KRW 인 경우, 시장가 매수 시 값을 1000으로 세팅하면 2BTC가 매수된다. (수수료가 존재하거나 매도 1호가의 수량에 따라 상이할 수 있음)  (optional, default to null)</param>
        /// <param name="identifier">조회용 사용자 지정값 (선택)  (optional)</param>
        /// <returns>Task of ApiResponse (NewOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NewOrder>> OrderNewAsyncWithHttpInfo (string market, string side, string ordType, string volume = null, string price = null, string identifier = null)
        {
            // verify the required parameter 'market' is set
            if (market == null)
                throw new ApiException(400, "Missing required parameter 'market' when calling OrderApi->OrderNew");
            // verify the required parameter 'side' is set
            if (side == null)
                throw new ApiException(400, "Missing required parameter 'side' when calling OrderApi->OrderNew");
            // verify the required parameter 'ordType' is set
            if (ordType == null)
                throw new ApiException(400, "Missing required parameter 'ordType' when calling OrderApi->OrderNew");

            var localVarPath = "/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "multipart/form-data", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (market != null) localVarFormParams.Add("market", this.Configuration.ApiClient.ParameterToString(market)); // form parameter
            if (side != null) localVarFormParams.Add("side", this.Configuration.ApiClient.ParameterToString(side)); // form parameter
            if (volume != null) localVarFormParams.Add("volume", this.Configuration.ApiClient.ParameterToString(volume)); // form parameter
            if (price != null) localVarFormParams.Add("price", this.Configuration.ApiClient.ParameterToString(price)); // form parameter
            if (ordType != null) localVarFormParams.Add("ord_type", this.Configuration.ApiClient.ParameterToString(ordType)); // form parameter
            if (identifier != null) localVarFormParams.Add("identifier", this.Configuration.ApiClient.ParameterToString(identifier)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderNew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NewOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NewOrder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NewOrder)));
        }

        /// <summary>
        /// 시세 호가 정보(Orderbook) 조회 ## 호가 정보 조회 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markets">마켓 코드 목록 (ex. KRW-BTC,KRW-ADA) </param>
        /// <returns>List&lt;Orderbook&gt;</returns>
        public List<Orderbook> OrderOrderbook (List<string> markets)
        {
             ApiResponse<List<Orderbook>> localVarResponse = OrderOrderbookWithHttpInfo(markets);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 시세 호가 정보(Orderbook) 조회 ## 호가 정보 조회 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markets">마켓 코드 목록 (ex. KRW-BTC,KRW-ADA) </param>
        /// <returns>ApiResponse of List&lt;Orderbook&gt;</returns>
        public ApiResponse< List<Orderbook> > OrderOrderbookWithHttpInfo (List<string> markets)
        {
            // verify the required parameter 'markets' is set
            if (markets == null)
                throw new ApiException(400, "Missing required parameter 'markets' when calling OrderApi->OrderOrderbook");

            var localVarPath = "/orderbook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (markets != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "markets", markets)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderOrderbook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Orderbook>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Orderbook>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Orderbook>)));
        }

        /// <summary>
        /// 시세 호가 정보(Orderbook) 조회 ## 호가 정보 조회 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markets">마켓 코드 목록 (ex. KRW-BTC,KRW-ADA) </param>
        /// <returns>Task of List&lt;Orderbook&gt;</returns>
        public async System.Threading.Tasks.Task<List<Orderbook>> OrderOrderbookAsync (List<string> markets)
        {
             ApiResponse<List<Orderbook>> localVarResponse = await OrderOrderbookAsyncWithHttpInfo(markets);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 시세 호가 정보(Orderbook) 조회 ## 호가 정보 조회 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markets">마켓 코드 목록 (ex. KRW-BTC,KRW-ADA) </param>
        /// <returns>Task of ApiResponse (List&lt;Orderbook&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Orderbook>>> OrderOrderbookAsyncWithHttpInfo (List<string> markets)
        {
            // verify the required parameter 'markets' is set
            if (markets == null)
                throw new ApiException(400, "Missing required parameter 'markets' when calling OrderApi->OrderOrderbook");

            var localVarPath = "/orderbook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (markets != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "markets", markets)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderOrderbook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Orderbook>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Orderbook>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Orderbook>)));
        }

    }
}
