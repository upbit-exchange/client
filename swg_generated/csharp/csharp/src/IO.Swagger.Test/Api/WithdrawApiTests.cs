/* 
 * Upbit Open API
 *
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing WithdrawApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class WithdrawApiTests
    {
        private WithdrawApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new WithdrawApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of WithdrawApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' WithdrawApi
            //Assert.IsInstanceOfType(typeof(WithdrawApi), instance, "instance is a WithdrawApi");
        }

        
        /// <summary>
        /// Test WithdrawChance
        /// </summary>
        [Test]
        public void WithdrawChanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string currency = null;
            //var response = instance.WithdrawChance(currency);
            //Assert.IsInstanceOf<WithdrawChance> (response, "response is WithdrawChance");
        }
        
        /// <summary>
        /// Test WithdrawCoin
        /// </summary>
        [Test]
        public void WithdrawCoinTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string currency = null;
            //string amount = null;
            //string address = null;
            //string secondaryAddress = null;
            //string transactionType = null;
            //var response = instance.WithdrawCoin(currency, amount, address, secondaryAddress, transactionType);
            //Assert.IsInstanceOf<WithdrawCoin> (response, "response is WithdrawCoin");
        }
        
        /// <summary>
        /// Test WithdrawInfo
        /// </summary>
        [Test]
        public void WithdrawInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uuid = null;
            //string txid = null;
            //string currency = null;
            //var response = instance.WithdrawInfo(uuid, txid, currency);
            //Assert.IsInstanceOf<Withdraw> (response, "response is Withdraw");
        }
        
        /// <summary>
        /// Test WithdrawInfoAll
        /// </summary>
        [Test]
        public void WithdrawInfoAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string currency = null;
            //string state = null;
            //List<string> uuids = null;
            //List<string> txids = null;
            //decimal? limit = null;
            //decimal? page = null;
            //string orderBy = null;
            //var response = instance.WithdrawInfoAll(currency, state, uuids, txids, limit, page, orderBy);
            //Assert.IsInstanceOf<List<Withdraw>> (response, "response is List<Withdraw>");
        }
        
        /// <summary>
        /// Test WithdrawKrw
        /// </summary>
        [Test]
        public void WithdrawKrwTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string amount = null;
            //var response = instance.WithdrawKrw(amount);
            //Assert.IsInstanceOf<Withdraw> (response, "response is Withdraw");
        }
        
    }

}
