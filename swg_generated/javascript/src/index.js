/*
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/APIKey', 'model/Account', 'model/Ask', 'model/AskAccount', 'model/Bid', 'model/BidAccount', 'model/CandleDate', 'model/CandleDays', 'model/CandleMinutes', 'model/Currency', 'model/Deposit', 'model/DepositCompleteResponse', 'model/DepositTransferResponse', 'model/Error', 'model/ErrorInfo', 'model/Market', 'model/MarketInfo', 'model/MemberLevel', 'model/NewOrder', 'model/Order', 'model/OrderChance', 'model/OrderInfo', 'model/Orderbook', 'model/OrderbookUnit', 'model/Ticker', 'model/Trade', 'model/TradeTicks', 'model/Wallet', 'model/Withdraw', 'model/WithdrawChance', 'model/WithdrawCoin', 'model/WithdrawLimit', 'api/APIKeyApi', 'api/AccountApi', 'api/CandleApi', 'api/DepositApi', 'api/MarketApi', 'api/OrderApi', 'api/TradeApi', 'api/WithdrawApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/APIKey'), require('./model/Account'), require('./model/Ask'), require('./model/AskAccount'), require('./model/Bid'), require('./model/BidAccount'), require('./model/CandleDate'), require('./model/CandleDays'), require('./model/CandleMinutes'), require('./model/Currency'), require('./model/Deposit'), require('./model/DepositCompleteResponse'), require('./model/DepositTransferResponse'), require('./model/Error'), require('./model/ErrorInfo'), require('./model/Market'), require('./model/MarketInfo'), require('./model/MemberLevel'), require('./model/NewOrder'), require('./model/Order'), require('./model/OrderChance'), require('./model/OrderInfo'), require('./model/Orderbook'), require('./model/OrderbookUnit'), require('./model/Ticker'), require('./model/Trade'), require('./model/TradeTicks'), require('./model/Wallet'), require('./model/Withdraw'), require('./model/WithdrawChance'), require('./model/WithdrawCoin'), require('./model/WithdrawLimit'), require('./api/APIKeyApi'), require('./api/AccountApi'), require('./api/CandleApi'), require('./api/DepositApi'), require('./api/MarketApi'), require('./api/OrderApi'), require('./api/TradeApi'), require('./api/WithdrawApi'));
  }
}(function(ApiClient, APIKey, Account, Ask, AskAccount, Bid, BidAccount, CandleDate, CandleDays, CandleMinutes, Currency, Deposit, DepositCompleteResponse, DepositTransferResponse, Error, ErrorInfo, Market, MarketInfo, MemberLevel, NewOrder, Order, OrderChance, OrderInfo, Orderbook, OrderbookUnit, Ticker, Trade, TradeTicks, Wallet, Withdraw, WithdrawChance, WithdrawCoin, WithdrawLimit, APIKeyApi, AccountApi, CandleApi, DepositApi, MarketApi, OrderApi, TradeApi, WithdrawApi) {
  'use strict';

  /**
   * _REST_API_for_Upbit_Exchange__Base_URL__httpsapi_upbit_com__Official_Upbit_API_Documents__httpsdocs_upbit_com__Official_Support_email__open_apiupbit_com.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var UpbitOpenApi = require('index'); // See note below*.
   * var xxxSvc = new UpbitOpenApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new UpbitOpenApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new UpbitOpenApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new UpbitOpenApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The APIKey model constructor.
     * @property {module:model/APIKey}
     */
    APIKey: APIKey,
    /**
     * The Account model constructor.
     * @property {module:model/Account}
     */
    Account: Account,
    /**
     * The Ask model constructor.
     * @property {module:model/Ask}
     */
    Ask: Ask,
    /**
     * The AskAccount model constructor.
     * @property {module:model/AskAccount}
     */
    AskAccount: AskAccount,
    /**
     * The Bid model constructor.
     * @property {module:model/Bid}
     */
    Bid: Bid,
    /**
     * The BidAccount model constructor.
     * @property {module:model/BidAccount}
     */
    BidAccount: BidAccount,
    /**
     * The CandleDate model constructor.
     * @property {module:model/CandleDate}
     */
    CandleDate: CandleDate,
    /**
     * The CandleDays model constructor.
     * @property {module:model/CandleDays}
     */
    CandleDays: CandleDays,
    /**
     * The CandleMinutes model constructor.
     * @property {module:model/CandleMinutes}
     */
    CandleMinutes: CandleMinutes,
    /**
     * The Currency model constructor.
     * @property {module:model/Currency}
     */
    Currency: Currency,
    /**
     * The Deposit model constructor.
     * @property {module:model/Deposit}
     */
    Deposit: Deposit,
    /**
     * The DepositCompleteResponse model constructor.
     * @property {module:model/DepositCompleteResponse}
     */
    DepositCompleteResponse: DepositCompleteResponse,
    /**
     * The DepositTransferResponse model constructor.
     * @property {module:model/DepositTransferResponse}
     */
    DepositTransferResponse: DepositTransferResponse,
    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error: Error,
    /**
     * The ErrorInfo model constructor.
     * @property {module:model/ErrorInfo}
     */
    ErrorInfo: ErrorInfo,
    /**
     * The Market model constructor.
     * @property {module:model/Market}
     */
    Market: Market,
    /**
     * The MarketInfo model constructor.
     * @property {module:model/MarketInfo}
     */
    MarketInfo: MarketInfo,
    /**
     * The MemberLevel model constructor.
     * @property {module:model/MemberLevel}
     */
    MemberLevel: MemberLevel,
    /**
     * The NewOrder model constructor.
     * @property {module:model/NewOrder}
     */
    NewOrder: NewOrder,
    /**
     * The Order model constructor.
     * @property {module:model/Order}
     */
    Order: Order,
    /**
     * The OrderChance model constructor.
     * @property {module:model/OrderChance}
     */
    OrderChance: OrderChance,
    /**
     * The OrderInfo model constructor.
     * @property {module:model/OrderInfo}
     */
    OrderInfo: OrderInfo,
    /**
     * The Orderbook model constructor.
     * @property {module:model/Orderbook}
     */
    Orderbook: Orderbook,
    /**
     * The OrderbookUnit model constructor.
     * @property {module:model/OrderbookUnit}
     */
    OrderbookUnit: OrderbookUnit,
    /**
     * The Ticker model constructor.
     * @property {module:model/Ticker}
     */
    Ticker: Ticker,
    /**
     * The Trade model constructor.
     * @property {module:model/Trade}
     */
    Trade: Trade,
    /**
     * The TradeTicks model constructor.
     * @property {module:model/TradeTicks}
     */
    TradeTicks: TradeTicks,
    /**
     * The Wallet model constructor.
     * @property {module:model/Wallet}
     */
    Wallet: Wallet,
    /**
     * The Withdraw model constructor.
     * @property {module:model/Withdraw}
     */
    Withdraw: Withdraw,
    /**
     * The WithdrawChance model constructor.
     * @property {module:model/WithdrawChance}
     */
    WithdrawChance: WithdrawChance,
    /**
     * The WithdrawCoin model constructor.
     * @property {module:model/WithdrawCoin}
     */
    WithdrawCoin: WithdrawCoin,
    /**
     * The WithdrawLimit model constructor.
     * @property {module:model/WithdrawLimit}
     */
    WithdrawLimit: WithdrawLimit,
    /**
     * The APIKeyApi service constructor.
     * @property {module:api/APIKeyApi}
     */
    APIKeyApi: APIKeyApi,
    /**
     * The AccountApi service constructor.
     * @property {module:api/AccountApi}
     */
    AccountApi: AccountApi,
    /**
     * The CandleApi service constructor.
     * @property {module:api/CandleApi}
     */
    CandleApi: CandleApi,
    /**
     * The DepositApi service constructor.
     * @property {module:api/DepositApi}
     */
    DepositApi: DepositApi,
    /**
     * The MarketApi service constructor.
     * @property {module:api/MarketApi}
     */
    MarketApi: MarketApi,
    /**
     * The OrderApi service constructor.
     * @property {module:api/OrderApi}
     */
    OrderApi: OrderApi,
    /**
     * The TradeApi service constructor.
     * @property {module:api/TradeApi}
     */
    TradeApi: TradeApi,
    /**
     * The WithdrawApi service constructor.
     * @property {module:api/WithdrawApi}
     */
    WithdrawApi: WithdrawApi
  };

  return exports;
}));
