/*
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/Withdraw', 'model/WithdrawChance', 'model/WithdrawCoin'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/Withdraw'), require('../model/WithdrawChance'), require('../model/WithdrawCoin'));
  } else {
    // Browser globals (root is window)
    if (!root.UpbitOpenApi) {
      root.UpbitOpenApi = {};
    }
    root.UpbitOpenApi.WithdrawApi = factory(root.UpbitOpenApi.ApiClient, root.UpbitOpenApi.Error, root.UpbitOpenApi.Withdraw, root.UpbitOpenApi.WithdrawChance, root.UpbitOpenApi.WithdrawCoin);
  }
}(this, function(ApiClient, Error, Withdraw, WithdrawChance, WithdrawCoin) {
  'use strict';

  /**
   * Withdraw service.
   * @module api/WithdrawApi
   * @version 1.0.0
   */

  /**
   * Constructs a new WithdrawApi. 
   * @alias module:api/WithdrawApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the withdrawChance operation.
     * @callback module:api/WithdrawApi~withdrawChanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WithdrawChance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 출금 가능 정보
     * ## 해당 통화의 가능한 출금 정보를 확인한다. 
     * @param {String} currency Currency Symbol 
     * @param {module:api/WithdrawApi~withdrawChanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WithdrawChance}
     */
    this.withdrawChance = function(currency, callback) {
      var postBody = null;

      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling withdrawChance");
      }


      var pathParams = {
      };
      var queryParams = {
        'currency': currency,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = WithdrawChance;

      return this.apiClient.callApi(
        '/withdraws/chance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the withdrawCoin operation.
     * @callback module:api/WithdrawApi~withdrawCoinCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WithdrawCoin} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 코인 출금하기
     * ## 코인 출금을 요청한다. **NOTE**: 바로출금 이용 시 유의사항 업비트 회원의 주소가 아닌 주소로 바로출금을 요청하는 경우, 출금이 정상적으로 수행되지 않습니다. 반드시 주소를 확인 후 출금을 진행하시기 바랍니다. 
     * @param {String} currency Currency 코드 
     * @param {String} amount 출금 수량 
     * @param {String} address 출금 가능 주소에 등록된 출금 주소 
     * @param {Object} opts Optional parameters
     * @param {String} opts.secondaryAddress 2차 출금 주소 (필요한 코인에 한해서) 
     * @param {String} opts.transactionType 출금 유형 - default : 일반출금 - internal : 바로출금 
     * @param {module:api/WithdrawApi~withdrawCoinCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WithdrawCoin}
     */
    this.withdrawCoin = function(currency, amount, address, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling withdrawCoin");
      }

      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling withdrawCoin");
      }

      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling withdrawCoin");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'currency': currency,
        'amount': amount,
        'address': address,
        'secondary_address': opts['secondaryAddress'],
        'transaction_type': opts['transactionType']
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = WithdrawCoin;

      return this.apiClient.callApi(
        '/withdraws/coin', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the withdrawInfo operation.
     * @callback module:api/WithdrawApi~withdrawInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Withdraw} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 개별 출금 조회
     * ## 출금 UUID를 통해 개별 출금 정보를 조회한다. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.uuid 출금 UUID 
     * @param {String} opts.txid 출금 TXID 
     * @param {String} opts.currency Currency 코드 
     * @param {module:api/WithdrawApi~withdrawInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Withdraw}
     */
    this.withdrawInfo = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'uuid': opts['uuid'],
        'txid': opts['txid'],
        'currency': opts['currency'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Withdraw;

      return this.apiClient.callApi(
        '/withdraw', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the withdrawInfoAll operation.
     * @callback module:api/WithdrawApi~withdrawInfoAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Withdraw>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 출금 리스트 조회
     * ## 출금 리스트를 조회한다. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.currency Currency 코드 
     * @param {String} opts.state 출금 상태 - submitting : 처리 중 - submitted : 처리 완료 - almost_accepted : 출금대기중 - rejected : 거부 - accepted : 승인됨 - processing : 처리 중 - done : 완료 - canceled : 취소됨 
     * @param {Array.<String>} opts.uuids 출금 UUID의 목록 
     * @param {Array.<String>} opts.txids 출금 TXID의 목록 
     * @param {Number} opts.limit 개수 제한 (default: 100, max: 100) 
     * @param {Number} opts.page 페이지 수, default: 1 
     * @param {String} opts.orderBy 정렬 방식 - asc : 오름차순 - desc : 내림차순 (default) 
     * @param {module:api/WithdrawApi~withdrawInfoAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Withdraw>}
     */
    this.withdrawInfoAll = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'currency': opts['currency'],
        'state': opts['state'],
        'limit': opts['limit'],
        'page': opts['page'],
        'order_by': opts['orderBy'],
      };
      var collectionQueryParams = {
        'uuids': {
          value: opts['uuids'],
          collectionFormat: 'multi'
        },
        'txids': {
          value: opts['txids'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Withdraw];

      return this.apiClient.callApi(
        '/withdraws', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the withdrawKrw operation.
     * @callback module:api/WithdrawApi~withdrawKrwCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Withdraw} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 원화 출금하기
     * ## 원화 출금을 요청한다. 등록된 출금 계좌로 출금된다. 
     * @param {String} amount 출금 원화 수량 
     * @param {module:api/WithdrawApi~withdrawKrwCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Withdraw}
     */
    this.withdrawKrw = function(amount, callback) {
      var postBody = null;

      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling withdrawKrw");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'amount': amount
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = Withdraw;

      return this.apiClient.callApi(
        '/withdraws/krw', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
