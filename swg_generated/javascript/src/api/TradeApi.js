/*
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'));
  } else {
    // Browser globals (root is window)
    if (!root.UpbitOpenApi) {
      root.UpbitOpenApi = {};
    }
    root.UpbitOpenApi.TradeApi = factory(root.UpbitOpenApi.ApiClient, root.UpbitOpenApi.Error);
  }
}(this, function(ApiClient, Error) {
  'use strict';

  /**
   * Trade service.
   * @module api/TradeApi
   * @version 1.0.0
   */

  /**
   * Constructs a new TradeApi. 
   * @alias module:api/TradeApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the tradeTicker operation.
     * @callback module:api/TradeApi~tradeTickerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 시세 Ticker 조회
     * ## 현재가 정보 요청 당시 종목의 스냅샷을 반환한다. 
     * @param {String} markets 반점으로 구분되는 마켓 코드 (ex. KRW-BTC, BTC-BCC) 
     * @param {module:api/TradeApi~tradeTickerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.tradeTicker = function(markets, callback) {
      var postBody = null;

      // verify the required parameter 'markets' is set
      if (markets === undefined || markets === null) {
        throw new Error("Missing the required parameter 'markets' when calling tradeTicker");
      }


      var pathParams = {
      };
      var queryParams = {
        'markets': markets,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/ticker', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tradeTicks operation.
     * @callback module:api/TradeApi~tradeTicksCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 시세 체결 조회
     * ## 최근 체결 내역 
     * @param {String} market 마켓 코드 (ex. KRW-BTC, BTC-BCC) 
     * @param {Object} opts Optional parameters
     * @param {String} opts.to 마지막 체결 시각. 형식 : `[HHmmss 또는 HH:mm:ss]`. 비워서 요청시 가장 최근 데이터 
     * @param {Number} opts.count 체결 개수 
     * @param {String} opts.cursor 페이지네이션 커서 (sequentialId) `sequential_id` 필드는 체결의 유일성 판단을 위한 근거로 쓰일 수 있습니다. 하지만 체결의 순서를 보장하지는 못합니다. 
     * @param {Number} opts.daysAgo 최근 체결 날짜 기준 7일 이내의 이전 데이터 조회 가능. 비워서 요청 시 가장 최근 체결 날짜 반환. (범위: 1 ~ 7) 
     * @param {module:api/TradeApi~tradeTicksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.tradeTicks = function(market, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'market' is set
      if (market === undefined || market === null) {
        throw new Error("Missing the required parameter 'market' when calling tradeTicks");
      }


      var pathParams = {
      };
      var queryParams = {
        'market': market,
        'to': opts['to'],
        'count': opts['count'],
        'cursor': opts['cursor'],
        'daysAgo': opts['daysAgo'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/trades/ticks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
