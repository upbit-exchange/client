/*
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.UpbitOpenApi) {
      root.UpbitOpenApi = {};
    }
    root.UpbitOpenApi.Ticker = factory(root.UpbitOpenApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The Ticker model module.
   * @module model/Ticker
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>Ticker</code>.
   * @alias module:model/Ticker
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>Ticker</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Ticker} obj Optional instance to populate.
   * @return {module:model/Ticker} The populated <code>Ticker</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('market'))
        obj.market = ApiClient.convertToType(data['market'], 'String');
      if (data.hasOwnProperty('trade_date'))
        obj.tradeDate = ApiClient.convertToType(data['trade_date'], 'String');
      if (data.hasOwnProperty('trade_time'))
        obj.tradeTime = ApiClient.convertToType(data['trade_time'], 'String');
      if (data.hasOwnProperty('trade_date_kst'))
        obj.tradeDateKst = ApiClient.convertToType(data['trade_date_kst'], 'String');
      if (data.hasOwnProperty('trade_time_kst'))
        obj.tradeTimeKst = ApiClient.convertToType(data['trade_time_kst'], 'String');
      if (data.hasOwnProperty('opening_price'))
        obj.openingPrice = ApiClient.convertToType(data['opening_price'], 'Number');
      if (data.hasOwnProperty('high_price'))
        obj.highPrice = ApiClient.convertToType(data['high_price'], 'Number');
      if (data.hasOwnProperty('low_price'))
        obj.lowPrice = ApiClient.convertToType(data['low_price'], 'Number');
      if (data.hasOwnProperty('trade_price'))
        obj.tradePrice = ApiClient.convertToType(data['trade_price'], 'Number');
      if (data.hasOwnProperty('prev_closing_price'))
        obj.prevClosingPrice = ApiClient.convertToType(data['prev_closing_price'], 'Number');
      if (data.hasOwnProperty('change'))
        obj.change = ApiClient.convertToType(data['change'], 'String');
      if (data.hasOwnProperty('change_price'))
        obj.changePrice = ApiClient.convertToType(data['change_price'], 'Number');
      if (data.hasOwnProperty('change_rate'))
        obj.changeRate = ApiClient.convertToType(data['change_rate'], 'Number');
      if (data.hasOwnProperty('signed_change_price'))
        obj.signedChangePrice = ApiClient.convertToType(data['signed_change_price'], 'Number');
      if (data.hasOwnProperty('signed_change_rate'))
        obj.signedChangeRate = ApiClient.convertToType(data['signed_change_rate'], 'Number');
      if (data.hasOwnProperty('trade_volume'))
        obj.tradeVolume = ApiClient.convertToType(data['trade_volume'], 'Number');
      if (data.hasOwnProperty('acc_trade_price'))
        obj.accTradePrice = ApiClient.convertToType(data['acc_trade_price'], 'Number');
      if (data.hasOwnProperty('acc_trade_price_24h'))
        obj.accTradePrice24h = ApiClient.convertToType(data['acc_trade_price_24h'], 'Number');
      if (data.hasOwnProperty('acc_trade_volume'))
        obj.accTradeVolume = ApiClient.convertToType(data['acc_trade_volume'], 'Number');
      if (data.hasOwnProperty('acc_trade_volume_24h'))
        obj.accTradeVolume24h = ApiClient.convertToType(data['acc_trade_volume_24h'], 'Number');
      if (data.hasOwnProperty('highest_52_week_price'))
        obj.highest52WeekPrice = ApiClient.convertToType(data['highest_52_week_price'], 'Number');
      if (data.hasOwnProperty('highest_52_week_date'))
        obj.highest52WeekDate = ApiClient.convertToType(data['highest_52_week_date'], 'String');
      if (data.hasOwnProperty('lowest_52_week_price'))
        obj.lowest52WeekPrice = ApiClient.convertToType(data['lowest_52_week_price'], 'Number');
      if (data.hasOwnProperty('lowest_52_week_date'))
        obj.lowest52WeekDate = ApiClient.convertToType(data['lowest_52_week_date'], 'String');
      if (data.hasOwnProperty('timestamp'))
        obj.timestamp = ApiClient.convertToType(data['timestamp'], 'Number');
    }
    return obj;
  }

  /**
   * 종목 구분 코드
   * @member {String} market
   */
  exports.prototype.market = undefined;

  /**
   * 최근 거래 일자(UTC)
   * @member {String} tradeDate
   */
  exports.prototype.tradeDate = undefined;

  /**
   * 최근 거래 시각(UTC)
   * @member {String} tradeTime
   */
  exports.prototype.tradeTime = undefined;

  /**
   * 최근 거래 일자(KST)
   * @member {String} tradeDateKst
   */
  exports.prototype.tradeDateKst = undefined;

  /**
   * 최근 거래 시각(KST)
   * @member {String} tradeTimeKst
   */
  exports.prototype.tradeTimeKst = undefined;

  /**
   * 시가
   * @member {Number} openingPrice
   */
  exports.prototype.openingPrice = undefined;

  /**
   * 고가
   * @member {Number} highPrice
   */
  exports.prototype.highPrice = undefined;

  /**
   * 저가
   * @member {Number} lowPrice
   */
  exports.prototype.lowPrice = undefined;

  /**
   * 종가
   * @member {Number} tradePrice
   */
  exports.prototype.tradePrice = undefined;

  /**
   * 전일 종가
   * @member {Number} prevClosingPrice
   */
  exports.prototype.prevClosingPrice = undefined;

  /**
   * EVEN : 보합 RISE : 상승 FALL : 하락 
   * @member {String} change
   */
  exports.prototype.change = undefined;

  /**
   * 변화액의 절대값
   * @member {Number} changePrice
   */
  exports.prototype.changePrice = undefined;

  /**
   * 변화율의 절대값
   * @member {Number} changeRate
   */
  exports.prototype.changeRate = undefined;

  /**
   * 부호가 있는 변화액
   * @member {Number} signedChangePrice
   */
  exports.prototype.signedChangePrice = undefined;

  /**
   * 부호가 있는 변화율
   * @member {Number} signedChangeRate
   */
  exports.prototype.signedChangeRate = undefined;

  /**
   * 가장 최근 거래량
   * @member {Number} tradeVolume
   */
  exports.prototype.tradeVolume = undefined;

  /**
   * 누적 거래대금 (UTC 0시 기준)
   * @member {Number} accTradePrice
   */
  exports.prototype.accTradePrice = undefined;

  /**
   * 24시간 누적 거래대금
   * @member {Number} accTradePrice24h
   */
  exports.prototype.accTradePrice24h = undefined;

  /**
   * 누적 거래량 (UTC 0시 기준)
   * @member {Number} accTradeVolume
   */
  exports.prototype.accTradeVolume = undefined;

  /**
   * 24시간 누적 거래량
   * @member {Number} accTradeVolume24h
   */
  exports.prototype.accTradeVolume24h = undefined;

  /**
   * 52주 신고가
   * @member {Number} highest52WeekPrice
   */
  exports.prototype.highest52WeekPrice = undefined;

  /**
   * 52주 신고가 달성일
   * @member {String} highest52WeekDate
   */
  exports.prototype.highest52WeekDate = undefined;

  /**
   * 52주 신저가
   * @member {Number} lowest52WeekPrice
   */
  exports.prototype.lowest52WeekPrice = undefined;

  /**
   * 52주 신저가 달성일
   * @member {String} lowest52WeekDate
   */
  exports.prototype.lowest52WeekDate = undefined;

  /**
   * 타임스탬프
   * @member {Number} timestamp
   */
  exports.prototype.timestamp = undefined;


  return exports;

}));
