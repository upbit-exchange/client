/*
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.UpbitOpenApi);
  }
}(this, function(expect, UpbitOpenApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new UpbitOpenApi.AccountApi();
  });

  describe('(package)', function() {
    describe('AccountApi', function() {
      describe('accountInfo', function() {
        it('should call accountInfo successfully', function(done) {
          // TODO: uncomment accountInfo call and complete the assertions
          /*

          instance.accountInfo(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(UpbitOpenApi.Account);
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("KRW");
              expect(data.balance).to.be.a('string');
              expect(data.balance).to.be("1000000.0");
              expect(data.locked).to.be.a('string');
              expect(data.locked).to.be("0.0");
              expect(data.avgBuyPrice).to.be.a('string');
              expect(data.avgBuyPrice).to.be("101000");
              expect(data.avgBuyPriceModified).to.be.a('boolean');
              expect(data.avgBuyPriceModified).to.be(false);
              expect(data.unitCurrency).to.be.a('string');
              expect(data.unitCurrency).to.be("KRW");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('accountWallet', function() {
        it('should call accountWallet successfully', function(done) {
          // TODO: uncomment accountWallet call and complete the assertions
          /*

          instance.accountWallet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(UpbitOpenApi.Wallet);
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("BTC");
              expect(data.walletState).to.be.a('string');
              expect(data.walletState).to.be("working");
              expect(data.blockState).to.be.a('string');
              expect(data.blockState).to.be("normal");
              expect(data.blockHeight).to.be.a('number');
              expect(data.blockHeight).to.be(637432.0);
              expect(data.blockUpdatedAt).to.be.a('string');
              expect(data.blockUpdatedAt).to.be("2020-07-03T02:04:45.523+0000");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
