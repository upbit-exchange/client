/*
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.UpbitOpenApi);
  }
}(this, function(expect, UpbitOpenApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new UpbitOpenApi.WithdrawApi();
  });

  describe('(package)', function() {
    describe('WithdrawApi', function() {
      describe('withdrawChance', function() {
        it('should call withdrawChance successfully', function(done) {
          // TODO: uncomment, update parameter values for withdrawChance call and complete the assertions
          /*
          var currency = "currency_example";

          instance.withdrawChance(currency, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UpbitOpenApi.WithdrawChance);
            expect(data.memberLevel).to.be.a(UpbitOpenApi.MemberLevel);
                  expect(data.memberLevel.securityLevel).to.be.a('number');
              expect(data.memberLevel.securityLevel).to.be(3.0);
              expect(data.memberLevel.feeLevel).to.be.a('number');
              expect(data.memberLevel.feeLevel).to.be(0.0);
              expect(data.memberLevel.emailVerified).to.be.a('boolean');
              expect(data.memberLevel.emailVerified).to.be(true);
              expect(data.memberLevel.identityAuthVerified).to.be.a('boolean');
              expect(data.memberLevel.identityAuthVerified).to.be(true);
              expect(data.memberLevel.bankAccountVerified).to.be.a('boolean');
              expect(data.memberLevel.bankAccountVerified).to.be(true);
              expect(data.memberLevel.kakaoPayAuthVerified).to.be.a('boolean');
              expect(data.memberLevel.kakaoPayAuthVerified).to.be(false);
              expect(data.memberLevel.locked).to.be.a('boolean');
              expect(data.memberLevel.locked).to.be(false);
              expect(data.memberLevel.walletLocked).to.be.a('boolean');
              expect(data.memberLevel.walletLocked).to.be(false);
            expect(data.currency).to.be.a(UpbitOpenApi.Currency);
                  expect(data.currency.code).to.be.a('string');
              expect(data.currency.code).to.be("BTC");
              expect(data.currency.withdrawFee).to.be.a('string');
              expect(data.currency.withdrawFee).to.be("5.0E-4");
              expect(data.currency.isCoin).to.be.a('boolean');
              expect(data.currency.isCoin).to.be(true);
              expect(data.currency.walletState).to.be.a('string');
              expect(data.currency.walletState).to.be("working");
              {
                let dataCtr = data.currency.walletSupport;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            expect(data.account).to.be.a(UpbitOpenApi.Account);
                  expect(data.account.currency).to.be.a('string');
              expect(data.account.currency).to.be("KRW");
              expect(data.account.balance).to.be.a('string');
              expect(data.account.balance).to.be("1000000.0");
              expect(data.account.locked).to.be.a('string');
              expect(data.account.locked).to.be("0.0");
              expect(data.account.avgBuyPrice).to.be.a('string');
              expect(data.account.avgBuyPrice).to.be("101000");
              expect(data.account.avgBuyPriceModified).to.be.a('boolean');
              expect(data.account.avgBuyPriceModified).to.be(false);
              expect(data.account.unitCurrency).to.be.a('string');
              expect(data.account.unitCurrency).to.be("KRW");
            expect(data.withdrawLimit).to.be.a(UpbitOpenApi.WithdrawLimit);
                  expect(data.withdrawLimit.currency).to.be.a('string');
              expect(data.withdrawLimit.currency).to.be("BTC");
              expect(data.withdrawLimit.minimum).to.be.a('string');
              expect(data.withdrawLimit.minimum).to.be("");
              expect(data.withdrawLimit.onetime).to.be.a('string');
              expect(data.withdrawLimit.onetime).to.be("");
              expect(data.withdrawLimit.daily).to.be.a('string');
              expect(data.withdrawLimit.daily).to.be("10.0");
              expect(data.withdrawLimit.remainingDaily).to.be.a('string');
              expect(data.withdrawLimit.remainingDaily).to.be("10.0");
              expect(data.withdrawLimit.remainingDailyKrw).to.be.a('string');
              expect(data.withdrawLimit.remainingDailyKrw).to.be("0.0");
              expect(data.withdrawLimit.fixed).to.be.a('number');
              expect(data.withdrawLimit.fixed).to.be();
              expect(data.withdrawLimit.canWithdraw).to.be.a('boolean');
              expect(data.withdrawLimit.canWithdraw).to.be(true);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('withdrawCoin', function() {
        it('should call withdrawCoin successfully', function(done) {
          // TODO: uncomment, update parameter values for withdrawCoin call and complete the assertions
          /*
          var currency = "currency_example";
          var amount = "amount_example";
          var address = "address_example";
          var opts = {};
          opts.secondaryAddress = "secondaryAddress_example";
          opts.transactionType = "transactionType_example";

          instance.withdrawCoin(currency, amount, address, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UpbitOpenApi.WithdrawCoin);
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("withdraw");
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("35a4f1dc-1db5-4d6b-89b5-7ec137875956");
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("XRP");
            expect(data.txid).to.be.a('string');
            expect(data.txid).to.be("98c15999f0bdc4ae0e8a-ed35868bb0c204fe6ec29e4058a3451e-88636d1040f4baddf943274ce37cf9cc");
            expect(data.state).to.be.a('string');
            expect(data.state).to.be("DONE");
            expect(data.createdAt).to.be.a('string');
            expect(data.createdAt).to.be("");
            expect(data.doneAt).to.be.a('string');
            expect(data.doneAt).to.be("");
            expect(data.amount).to.be.a('string');
            expect(data.amount).to.be("1.0");
            expect(data.fee).to.be.a('string');
            expect(data.fee).to.be("0.0");
            expect(data.krwAmount).to.be.a('string');
            expect(data.krwAmount).to.be("80420.0");
            expect(data.transactionType).to.be.a('string');
            expect(data.transactionType).to.be("default");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('withdrawInfo', function() {
        it('should call withdrawInfo successfully', function(done) {
          // TODO: uncomment, update parameter values for withdrawInfo call and complete the assertions
          /*
          var opts = {};
          opts.uuid = "uuid_example";
          opts.txid = "txid_example";
          opts.currency = "currency_example";

          instance.withdrawInfo(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UpbitOpenApi.Withdraw);
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("withdraw");
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("35a4f1dc-1db5-4d6b-89b5-7ec137875956");
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("XRP");
            expect(data.txid).to.be.a('string');
            expect(data.txid).to.be("98c15999f0bdc4ae0e8a-ed35868bb0c204fe6ec29e4058a3451e-88636d1040f4baddf943274ce37cf9cc");
            expect(data.state).to.be.a('string');
            expect(data.state).to.be("DONE");
            expect(data.createdAt).to.be.a('string');
            expect(data.createdAt).to.be("");
            expect(data.doneAt).to.be.a('string');
            expect(data.doneAt).to.be("");
            expect(data.amount).to.be.a('string');
            expect(data.amount).to.be("1.0");
            expect(data.fee).to.be.a('string');
            expect(data.fee).to.be("0.0");
            expect(data.transactionType).to.be.a('string');
            expect(data.transactionType).to.be("default");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('withdrawInfoAll', function() {
        it('should call withdrawInfoAll successfully', function(done) {
          // TODO: uncomment, update parameter values for withdrawInfoAll call and complete the assertions
          /*
          var opts = {};
          opts.currency = "currency_example";
          opts.state = "state_example";
          opts.uuids = ["uuids_example"];
          opts.txids = ["txids_example"];
          opts.limit = 8.14;
          opts.page = 8.14;
          opts.orderBy = "orderBy_example";

          instance.withdrawInfoAll(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(UpbitOpenApi.Withdraw);
              expect(data.type).to.be.a('string');
              expect(data.type).to.be("withdraw");
              expect(data.uuid).to.be.a('string');
              expect(data.uuid).to.be("35a4f1dc-1db5-4d6b-89b5-7ec137875956");
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("XRP");
              expect(data.txid).to.be.a('string');
              expect(data.txid).to.be("98c15999f0bdc4ae0e8a-ed35868bb0c204fe6ec29e4058a3451e-88636d1040f4baddf943274ce37cf9cc");
              expect(data.state).to.be.a('string');
              expect(data.state).to.be("DONE");
              expect(data.createdAt).to.be.a('string');
              expect(data.createdAt).to.be("");
              expect(data.doneAt).to.be.a('string');
              expect(data.doneAt).to.be("");
              expect(data.amount).to.be.a('string');
              expect(data.amount).to.be("1.0");
              expect(data.fee).to.be.a('string');
              expect(data.fee).to.be("0.0");
              expect(data.transactionType).to.be.a('string');
              expect(data.transactionType).to.be("default");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('withdrawKrw', function() {
        it('should call withdrawKrw successfully', function(done) {
          // TODO: uncomment, update parameter values for withdrawKrw call and complete the assertions
          /*
          var amount = "amount_example";

          instance.withdrawKrw(amount, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UpbitOpenApi.Withdraw);
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("withdraw");
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("35a4f1dc-1db5-4d6b-89b5-7ec137875956");
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("XRP");
            expect(data.txid).to.be.a('string');
            expect(data.txid).to.be("98c15999f0bdc4ae0e8a-ed35868bb0c204fe6ec29e4058a3451e-88636d1040f4baddf943274ce37cf9cc");
            expect(data.state).to.be.a('string');
            expect(data.state).to.be("DONE");
            expect(data.createdAt).to.be.a('string');
            expect(data.createdAt).to.be("");
            expect(data.doneAt).to.be.a('string');
            expect(data.doneAt).to.be("");
            expect(data.amount).to.be.a('string');
            expect(data.amount).to.be("1.0");
            expect(data.fee).to.be.a('string');
            expect(data.fee).to.be("0.0");
            expect(data.transactionType).to.be.a('string');
            expect(data.transactionType).to.be("default");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
