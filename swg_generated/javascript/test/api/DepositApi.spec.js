/*
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.UpbitOpenApi);
  }
}(this, function(expect, UpbitOpenApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new UpbitOpenApi.DepositApi();
  });

  describe('(package)', function() {
    describe('DepositApi', function() {
      describe('depositCoinAddress', function() {
        it('should call depositCoinAddress successfully', function(done) {
          // TODO: uncomment, update parameter values for depositCoinAddress call and complete the assertions
          /*
          var currency = "currency_example";

          instance.depositCoinAddress(currency, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UpbitOpenApi.DepositCompleteResponse);
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("BTC");
            expect(data.depositAddress).to.be.a('string');
            expect(data.depositAddress).to.be("3EusRwybuZUhVDeHL7gh3HSLmbhLcy7NqD");
            expect(data.secondaryAddress).to.be.a('string');
            expect(data.secondaryAddress).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('depositCoinAddresses', function() {
        it('should call depositCoinAddresses successfully', function(done) {
          // TODO: uncomment depositCoinAddresses call and complete the assertions
          /*

          instance.depositCoinAddresses(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('depositGenerateCoinAddress', function() {
        it('should call depositGenerateCoinAddress successfully', function(done) {
          // TODO: uncomment, update parameter values for depositGenerateCoinAddress call and complete the assertions
          /*
          var currency = "currency_example";

          instance.depositGenerateCoinAddress(currency, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UpbitOpenApi.DepositCompleteResponse);
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("BTC");
            expect(data.depositAddress).to.be.a('string');
            expect(data.depositAddress).to.be("3EusRwybuZUhVDeHL7gh3HSLmbhLcy7NqD");
            expect(data.secondaryAddress).to.be.a('string');
            expect(data.secondaryAddress).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('depositInfo', function() {
        it('should call depositInfo successfully', function(done) {
          // TODO: uncomment, update parameter values for depositInfo call and complete the assertions
          /*
          var opts = {};
          opts.uuid = "uuid_example";
          opts.txid = "txid_example";
          opts.currency = "currency_example";

          instance.depositInfo(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UpbitOpenApi.Deposit);
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("deposit");
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("94332e99-3a87-4a35-ad98-28b0c969f830");
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("KRW");
            expect(data.txid).to.be.a('string');
            expect(data.txid).to.be("9e37c537-6849-4c8b-a134-57313f5dfc5a");
            expect(data.state).to.be.a('string');
            expect(data.state).to.be("ACCEPTED");
            expect(data.createdAt).to.be.a('string');
            expect(data.createdAt).to.be("");
            expect(data.doneAt).to.be.a('string');
            expect(data.doneAt).to.be("");
            expect(data.amount).to.be.a('string');
            expect(data.amount).to.be("100000.0");
            expect(data.fee).to.be.a('string');
            expect(data.fee).to.be("0.0");
            expect(data.transactionType).to.be.a('string');
            expect(data.transactionType).to.be("default");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('depositInfoAll', function() {
        it('should call depositInfoAll successfully', function(done) {
          // TODO: uncomment, update parameter values for depositInfoAll call and complete the assertions
          /*
          var opts = {};
          opts.currency = "currency_example";
          opts.state = "state_example";
          opts.uuids = ["uuids_example"];
          opts.txids = ["txids_example"];
          opts.limit = 8.14;
          opts.page = 8.14;
          opts.orderBy = "orderBy_example";

          instance.depositInfoAll(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(UpbitOpenApi.Deposit);
              expect(data.type).to.be.a('string');
              expect(data.type).to.be("deposit");
              expect(data.uuid).to.be.a('string');
              expect(data.uuid).to.be("94332e99-3a87-4a35-ad98-28b0c969f830");
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("KRW");
              expect(data.txid).to.be.a('string');
              expect(data.txid).to.be("9e37c537-6849-4c8b-a134-57313f5dfc5a");
              expect(data.state).to.be.a('string');
              expect(data.state).to.be("ACCEPTED");
              expect(data.createdAt).to.be.a('string');
              expect(data.createdAt).to.be("");
              expect(data.doneAt).to.be.a('string');
              expect(data.doneAt).to.be("");
              expect(data.amount).to.be.a('string');
              expect(data.amount).to.be("100000.0");
              expect(data.fee).to.be.a('string');
              expect(data.fee).to.be("0.0");
              expect(data.transactionType).to.be.a('string');
              expect(data.transactionType).to.be("default");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
