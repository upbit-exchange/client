/*
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.UpbitOpenApi);
  }
}(this, function(expect, UpbitOpenApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('OrderInfo', function() {
      beforeEach(function() {
        instance = new UpbitOpenApi.OrderInfo();
      });

      it('should create an instance of OrderInfo', function() {
        // TODO: update the code to test OrderInfo
        expect(instance).to.be.a(UpbitOpenApi.OrderInfo);
      });

      it('should have the property uuid (base name: "uuid")', function() {
        // TODO: update the code to test the property uuid
        expect(instance).to.have.property('uuid');
        // expect(instance.uuid).to.be(expectedValueLiteral);
      });

      it('should have the property side (base name: "side")', function() {
        // TODO: update the code to test the property side
        expect(instance).to.have.property('side');
        // expect(instance.side).to.be(expectedValueLiteral);
      });

      it('should have the property ordType (base name: "ord_type")', function() {
        // TODO: update the code to test the property ordType
        expect(instance).to.have.property('ordType');
        // expect(instance.ordType).to.be(expectedValueLiteral);
      });

      it('should have the property price (base name: "price")', function() {
        // TODO: update the code to test the property price
        expect(instance).to.have.property('price');
        // expect(instance.price).to.be(expectedValueLiteral);
      });

      it('should have the property state (base name: "state")', function() {
        // TODO: update the code to test the property state
        expect(instance).to.have.property('state');
        // expect(instance.state).to.be(expectedValueLiteral);
      });

      it('should have the property market (base name: "market")', function() {
        // TODO: update the code to test the property market
        expect(instance).to.have.property('market');
        // expect(instance.market).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "created_at")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property volume (base name: "volume")', function() {
        // TODO: update the code to test the property volume
        expect(instance).to.have.property('volume');
        // expect(instance.volume).to.be(expectedValueLiteral);
      });

      it('should have the property remainingVolume (base name: "remaining_volume")', function() {
        // TODO: update the code to test the property remainingVolume
        expect(instance).to.have.property('remainingVolume');
        // expect(instance.remainingVolume).to.be(expectedValueLiteral);
      });

      it('should have the property reservedFee (base name: "reserved_fee")', function() {
        // TODO: update the code to test the property reservedFee
        expect(instance).to.have.property('reservedFee');
        // expect(instance.reservedFee).to.be(expectedValueLiteral);
      });

      it('should have the property remainingFee (base name: "remaining_fee")', function() {
        // TODO: update the code to test the property remainingFee
        expect(instance).to.have.property('remainingFee');
        // expect(instance.remainingFee).to.be(expectedValueLiteral);
      });

      it('should have the property paidFee (base name: "paid_fee")', function() {
        // TODO: update the code to test the property paidFee
        expect(instance).to.have.property('paidFee');
        // expect(instance.paidFee).to.be(expectedValueLiteral);
      });

      it('should have the property locked (base name: "locked")', function() {
        // TODO: update the code to test the property locked
        expect(instance).to.have.property('locked');
        // expect(instance.locked).to.be(expectedValueLiteral);
      });

      it('should have the property executedVolume (base name: "executed_volume")', function() {
        // TODO: update the code to test the property executedVolume
        expect(instance).to.have.property('executedVolume');
        // expect(instance.executedVolume).to.be(expectedValueLiteral);
      });

      it('should have the property tradesCount (base name: "trades_count")', function() {
        // TODO: update the code to test the property tradesCount
        expect(instance).to.have.property('tradesCount');
        // expect(instance.tradesCount).to.be(expectedValueLiteral);
      });

      it('should have the property trades (base name: "trades")', function() {
        // TODO: update the code to test the property trades
        expect(instance).to.have.property('trades');
        // expect(instance.trades).to.be(expectedValueLiteral);
      });

    });
  });

}));
