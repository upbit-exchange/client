/*
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.UpbitOpenApi);
  }
}(this, function(expect, UpbitOpenApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Ticker', function() {
      beforeEach(function() {
        instance = new UpbitOpenApi.Ticker();
      });

      it('should create an instance of Ticker', function() {
        // TODO: update the code to test Ticker
        expect(instance).to.be.a(UpbitOpenApi.Ticker);
      });

      it('should have the property market (base name: "market")', function() {
        // TODO: update the code to test the property market
        expect(instance).to.have.property('market');
        // expect(instance.market).to.be(expectedValueLiteral);
      });

      it('should have the property tradeDate (base name: "trade_date")', function() {
        // TODO: update the code to test the property tradeDate
        expect(instance).to.have.property('tradeDate');
        // expect(instance.tradeDate).to.be(expectedValueLiteral);
      });

      it('should have the property tradeTime (base name: "trade_time")', function() {
        // TODO: update the code to test the property tradeTime
        expect(instance).to.have.property('tradeTime');
        // expect(instance.tradeTime).to.be(expectedValueLiteral);
      });

      it('should have the property tradeDateKst (base name: "trade_date_kst")', function() {
        // TODO: update the code to test the property tradeDateKst
        expect(instance).to.have.property('tradeDateKst');
        // expect(instance.tradeDateKst).to.be(expectedValueLiteral);
      });

      it('should have the property tradeTimeKst (base name: "trade_time_kst")', function() {
        // TODO: update the code to test the property tradeTimeKst
        expect(instance).to.have.property('tradeTimeKst');
        // expect(instance.tradeTimeKst).to.be(expectedValueLiteral);
      });

      it('should have the property openingPrice (base name: "opening_price")', function() {
        // TODO: update the code to test the property openingPrice
        expect(instance).to.have.property('openingPrice');
        // expect(instance.openingPrice).to.be(expectedValueLiteral);
      });

      it('should have the property highPrice (base name: "high_price")', function() {
        // TODO: update the code to test the property highPrice
        expect(instance).to.have.property('highPrice');
        // expect(instance.highPrice).to.be(expectedValueLiteral);
      });

      it('should have the property lowPrice (base name: "low_price")', function() {
        // TODO: update the code to test the property lowPrice
        expect(instance).to.have.property('lowPrice');
        // expect(instance.lowPrice).to.be(expectedValueLiteral);
      });

      it('should have the property tradePrice (base name: "trade_price")', function() {
        // TODO: update the code to test the property tradePrice
        expect(instance).to.have.property('tradePrice');
        // expect(instance.tradePrice).to.be(expectedValueLiteral);
      });

      it('should have the property prevClosingPrice (base name: "prev_closing_price")', function() {
        // TODO: update the code to test the property prevClosingPrice
        expect(instance).to.have.property('prevClosingPrice');
        // expect(instance.prevClosingPrice).to.be(expectedValueLiteral);
      });

      it('should have the property change (base name: "change")', function() {
        // TODO: update the code to test the property change
        expect(instance).to.have.property('change');
        // expect(instance.change).to.be(expectedValueLiteral);
      });

      it('should have the property changePrice (base name: "change_price")', function() {
        // TODO: update the code to test the property changePrice
        expect(instance).to.have.property('changePrice');
        // expect(instance.changePrice).to.be(expectedValueLiteral);
      });

      it('should have the property changeRate (base name: "change_rate")', function() {
        // TODO: update the code to test the property changeRate
        expect(instance).to.have.property('changeRate');
        // expect(instance.changeRate).to.be(expectedValueLiteral);
      });

      it('should have the property signedChangePrice (base name: "signed_change_price")', function() {
        // TODO: update the code to test the property signedChangePrice
        expect(instance).to.have.property('signedChangePrice');
        // expect(instance.signedChangePrice).to.be(expectedValueLiteral);
      });

      it('should have the property signedChangeRate (base name: "signed_change_rate")', function() {
        // TODO: update the code to test the property signedChangeRate
        expect(instance).to.have.property('signedChangeRate');
        // expect(instance.signedChangeRate).to.be(expectedValueLiteral);
      });

      it('should have the property tradeVolume (base name: "trade_volume")', function() {
        // TODO: update the code to test the property tradeVolume
        expect(instance).to.have.property('tradeVolume');
        // expect(instance.tradeVolume).to.be(expectedValueLiteral);
      });

      it('should have the property accTradePrice (base name: "acc_trade_price")', function() {
        // TODO: update the code to test the property accTradePrice
        expect(instance).to.have.property('accTradePrice');
        // expect(instance.accTradePrice).to.be(expectedValueLiteral);
      });

      it('should have the property accTradePrice24h (base name: "acc_trade_price_24h")', function() {
        // TODO: update the code to test the property accTradePrice24h
        expect(instance).to.have.property('accTradePrice24h');
        // expect(instance.accTradePrice24h).to.be(expectedValueLiteral);
      });

      it('should have the property accTradeVolume (base name: "acc_trade_volume")', function() {
        // TODO: update the code to test the property accTradeVolume
        expect(instance).to.have.property('accTradeVolume');
        // expect(instance.accTradeVolume).to.be(expectedValueLiteral);
      });

      it('should have the property accTradeVolume24h (base name: "acc_trade_volume_24h")', function() {
        // TODO: update the code to test the property accTradeVolume24h
        expect(instance).to.have.property('accTradeVolume24h');
        // expect(instance.accTradeVolume24h).to.be(expectedValueLiteral);
      });

      it('should have the property highest52WeekPrice (base name: "highest_52_week_price")', function() {
        // TODO: update the code to test the property highest52WeekPrice
        expect(instance).to.have.property('highest52WeekPrice');
        // expect(instance.highest52WeekPrice).to.be(expectedValueLiteral);
      });

      it('should have the property highest52WeekDate (base name: "highest_52_week_date")', function() {
        // TODO: update the code to test the property highest52WeekDate
        expect(instance).to.have.property('highest52WeekDate');
        // expect(instance.highest52WeekDate).to.be(expectedValueLiteral);
      });

      it('should have the property lowest52WeekPrice (base name: "lowest_52_week_price")', function() {
        // TODO: update the code to test the property lowest52WeekPrice
        expect(instance).to.have.property('lowest52WeekPrice');
        // expect(instance.lowest52WeekPrice).to.be(expectedValueLiteral);
      });

      it('should have the property lowest52WeekDate (base name: "lowest_52_week_date")', function() {
        // TODO: update the code to test the property lowest52WeekDate
        expect(instance).to.have.property('lowest52WeekDate');
        // expect(instance.lowest52WeekDate).to.be(expectedValueLiteral);
      });

      it('should have the property timestamp (base name: "timestamp")', function() {
        // TODO: update the code to test the property timestamp
        expect(instance).to.have.property('timestamp');
        // expect(instance.timestamp).to.be(expectedValueLiteral);
      });

    });
  });

}));
