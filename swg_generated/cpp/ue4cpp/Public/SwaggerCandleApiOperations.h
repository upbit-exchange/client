/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
#pragma once

#include "SwaggerBaseModel.h"
#include "SwaggerCandleApi.h"

#include "SwaggerError.h"

namespace Swagger 
{

/* 시세 캔들 조회 (일 단위)
 *
 * ## 일(Day) 캔들 
*/
class SWAGGER_API SwaggerCandleApi::CandleDaysRequest : public Request
{
public:
    virtual ~CandleDaysRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* 마켓 코드 (ex. KRW-BTC)  */
	FString Market;
	/* 마지막 캔들 시각 (exclusive). 포맷 : `yyyy-MM-dd'T'HH:mm:ssXXX` or `yyyy-MM-dd HH:mm:ss`. 비워서 요청 시 가장 최근 캔들  */
	TOptional<FString> To;
	/* 캔들 개수  */
	TOptional<double> Count;
	/* 종가 환산 화폐 단위 (생략 가능, KRW로 명시할 시 원화 환산 가격을 반환.) `convertingPriceUnit` 파라미터의 경우, 원화 마켓이 아닌 다른 마켓(ex. BTC, ETH)의 일봉 요청 시 종가를 명시된 파라미터 값으로 환산해 `converted_trade_price` 필드에 추가하여 반환합니다. 현재는 원화(`KRW`) 로 변환하는 기능만 제공하며 추후 기능을 확장할 수 있습니다.  */
	TOptional<FString> ConvertingPriceUnit;
};

class SWAGGER_API SwaggerCandleApi::CandleDaysResponse : public Response
{
public:
    virtual ~CandleDaysResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    TSharedPtr<FJsonObject> Content;
};

/* 시세 캔들 조회 (분 단위)
 *
 * ## 분(Minute) 캔들 
*/
class SWAGGER_API SwaggerCandleApi::CandleMinutesRequest : public Request
{
public:
    virtual ~CandleMinutesRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* 분 단위. 가능한 값 : 1, 3, 5, 15, 10, 30, 60, 240  */
	int32 Unit;
	/* 마켓 코드 (ex. KRW-BTC)  */
	FString Market;
	/* 마지막 캔들 시각 (exclusive). 포맷 : `yyyy-MM-dd'T'HH:mm:ssXXX` or `yyyy-MM-dd HH:mm:ss`. 비워서 요청 시 가장 최근 캔들  */
	TOptional<FString> To;
	/* 캔들 개수 (최대 200개까지 요청 가능)  */
	TOptional<double> Count;
};

class SWAGGER_API SwaggerCandleApi::CandleMinutesResponse : public Response
{
public:
    virtual ~CandleMinutesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    TSharedPtr<FJsonObject> Content;
};

/* 시세 캔들 조회 (월 단위)
 *
 * ## 월(Month) 캔들 
*/
class SWAGGER_API SwaggerCandleApi::CandleMonthRequest : public Request
{
public:
    virtual ~CandleMonthRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* 마켓 코드 (ex. KRW-BTC)  */
	FString Market;
	/* 마지막 캔들 시각 (exclusive). 포맷 : `yyyy-MM-dd'T'HH:mm:ssXXX` or `yyyy-MM-dd HH:mm:ss`. 비워서 요청 시 가장 최근 캔들  */
	TOptional<FString> To;
	/* 캔들 개수  */
	TOptional<double> Count;
};

class SWAGGER_API SwaggerCandleApi::CandleMonthResponse : public Response
{
public:
    virtual ~CandleMonthResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    TSharedPtr<FJsonObject> Content;
};

/* 시세 캔들 조회 (주 단위)
 *
 * ## 주(Week) 캔들 
*/
class SWAGGER_API SwaggerCandleApi::CandleWeeksRequest : public Request
{
public:
    virtual ~CandleWeeksRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* 마켓 코드 (ex. KRW-BTC)  */
	FString Market;
	/* 마지막 캔들 시각 (exclusive). 포맷 : `yyyy-MM-dd'T'HH:mm:ssXXX` or `yyyy-MM-dd HH:mm:ss`. 비워서 요청 시 가장 최근 캔들  */
	TOptional<FString> To;
	/* 캔들 개수  */
	TOptional<double> Count;
};

class SWAGGER_API SwaggerCandleApi::CandleWeeksResponse : public Response
{
public:
    virtual ~CandleWeeksResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    TSharedPtr<FJsonObject> Content;
};

}
