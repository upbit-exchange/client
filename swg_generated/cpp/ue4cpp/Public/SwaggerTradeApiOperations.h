/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
#pragma once

#include "SwaggerBaseModel.h"
#include "SwaggerTradeApi.h"

#include "SwaggerError.h"

namespace Swagger 
{

/* 시세 Ticker 조회
 *
 * ## 현재가 정보 요청 당시 종목의 스냅샷을 반환한다. 
*/
class SWAGGER_API SwaggerTradeApi::TradeTickerRequest : public Request
{
public:
    virtual ~TradeTickerRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* 반점으로 구분되는 마켓 코드 (ex. KRW-BTC, BTC-BCC)  */
	FString Markets;
};

class SWAGGER_API SwaggerTradeApi::TradeTickerResponse : public Response
{
public:
    virtual ~TradeTickerResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    TSharedPtr<FJsonObject> Content;
};

/* 시세 체결 조회
 *
 * ## 최근 체결 내역 
*/
class SWAGGER_API SwaggerTradeApi::TradeTicksRequest : public Request
{
public:
    virtual ~TradeTicksRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* 마켓 코드 (ex. KRW-BTC, BTC-BCC)  */
	FString Market;
	/* 마지막 체결 시각. 형식 : `[HHmmss 또는 HH:mm:ss]`. 비워서 요청시 가장 최근 데이터  */
	TOptional<FString> To;
	/* 체결 개수  */
	TOptional<double> Count;
	/* 페이지네이션 커서 (sequentialId) `sequential_id` 필드는 체결의 유일성 판단을 위한 근거로 쓰일 수 있습니다. 하지만 체결의 순서를 보장하지는 못합니다.  */
	TOptional<FString> Cursor;
	/* 최근 체결 날짜 기준 7일 이내의 이전 데이터 조회 가능. 비워서 요청 시 가장 최근 체결 날짜 반환. (범위: 1 ~ 7)  */
	TOptional<double> DaysAgo;
};

class SWAGGER_API SwaggerTradeApi::TradeTicksResponse : public Response
{
public:
    virtual ~TradeTicksResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    TSharedPtr<FJsonObject> Content;
};

}
