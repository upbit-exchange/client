/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
#include "SwaggerOrderApiOperations.h"

#include "SwaggerModule.h"
#include "SwaggerHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace Swagger 
{

FString SwaggerOrderApi::OrderCancelRequest::ComputePath() const
{
	FString Path(TEXT("/order"));
	TArray<FString> QueryParams;
	if(Uuid.IsSet())
	{
		QueryParams.Add(FString(TEXT("uuid=")) + ToUrlString(Uuid.GetValue()));
	}
	if(Identifier.IsSet())
	{
		QueryParams.Add(FString(TEXT("identifier=")) + ToUrlString(Identifier.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void SwaggerOrderApi::OrderCancelRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("DELETE"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogSwagger, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void SwaggerOrderApi::OrderCancelResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
	default:
		SetResponseString(TEXT("OK"));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request"));
		break;
	case 401:
		SetResponseString(TEXT("Unauthorized"));
		break;
	case 403:
		SetResponseString(TEXT("Forbidden"));
		break;
	case 404:
		SetResponseString(TEXT("Not Found"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error"));
		break;
	}
}

bool SwaggerOrderApi::OrderCancelResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString SwaggerOrderApi::OrderChanceRequest::ComputePath() const
{
	FString Path(TEXT("/orders/chance"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("market=")) + ToUrlString(Market));
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void SwaggerOrderApi::OrderChanceRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogSwagger, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void SwaggerOrderApi::OrderChanceResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
	default:
		SetResponseString(TEXT("OK"));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request"));
		break;
	case 401:
		SetResponseString(TEXT("Unauthorized"));
		break;
	case 403:
		SetResponseString(TEXT("Forbidden"));
		break;
	case 404:
		SetResponseString(TEXT("Not Found"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error"));
		break;
	}
}

bool SwaggerOrderApi::OrderChanceResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString SwaggerOrderApi::OrderInfoRequest::ComputePath() const
{
	FString Path(TEXT("/order"));
	TArray<FString> QueryParams;
	if(Uuid.IsSet())
	{
		QueryParams.Add(FString(TEXT("uuid=")) + ToUrlString(Uuid.GetValue()));
	}
	if(Identifier.IsSet())
	{
		QueryParams.Add(FString(TEXT("identifier=")) + ToUrlString(Identifier.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void SwaggerOrderApi::OrderInfoRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogSwagger, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void SwaggerOrderApi::OrderInfoResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
	default:
		SetResponseString(TEXT("OK"));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request"));
		break;
	case 401:
		SetResponseString(TEXT("Unauthorized"));
		break;
	case 403:
		SetResponseString(TEXT("Forbidden"));
		break;
	case 404:
		SetResponseString(TEXT("Not Found"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error"));
		break;
	}
}

bool SwaggerOrderApi::OrderInfoResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString SwaggerOrderApi::OrderInfoAllRequest::ComputePath() const
{
	FString Path(TEXT("/orders"));
	TArray<FString> QueryParams;
	if(Market.IsSet())
	{
		QueryParams.Add(FString(TEXT("market=")) + ToUrlString(Market.GetValue()));
	}
	if(State.IsSet())
	{
		QueryParams.Add(FString(TEXT("state=")) + ToUrlString(State.GetValue()));
	}
	if(States.IsSet())
	{
		QueryParams.Add(FString(TEXT("states=")) + CollectionToUrlString_multi(States.GetValue(), TEXT("states")));
	}
	if(Uuids.IsSet())
	{
		QueryParams.Add(FString(TEXT("uuids=")) + CollectionToUrlString_multi(Uuids.GetValue(), TEXT("uuids")));
	}
	if(Identifiers.IsSet())
	{
		QueryParams.Add(FString(TEXT("identifiers=")) + CollectionToUrlString_multi(Identifiers.GetValue(), TEXT("identifiers")));
	}
	if(Page.IsSet())
	{
		QueryParams.Add(FString(TEXT("page=")) + ToUrlString(Page.GetValue()));
	}
	if(Limit.IsSet())
	{
		QueryParams.Add(FString(TEXT("limit=")) + ToUrlString(Limit.GetValue()));
	}
	if(OrderBy.IsSet())
	{
		QueryParams.Add(FString(TEXT("order_by=")) + ToUrlString(OrderBy.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void SwaggerOrderApi::OrderInfoAllRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogSwagger, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void SwaggerOrderApi::OrderInfoAllResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
	default:
		SetResponseString(TEXT("OK"));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request"));
		break;
	case 401:
		SetResponseString(TEXT("Unauthorized"));
		break;
	case 403:
		SetResponseString(TEXT("Forbidden"));
		break;
	case 404:
		SetResponseString(TEXT("Not Found"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error"));
		break;
	}
}

bool SwaggerOrderApi::OrderInfoAllResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString SwaggerOrderApi::OrderNewRequest::ComputePath() const
{
	FString Path(TEXT("/orders"));
	return Path;
}

void SwaggerOrderApi::OrderNewRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/x-www-form-urlencoded"), TEXT("multipart/form-data"), TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		UE_LOG(LogSwagger, Error, TEXT("Form parameter (market) was ignored, cannot be used in JsonBody"));
		UE_LOG(LogSwagger, Error, TEXT("Form parameter (side) was ignored, cannot be used in JsonBody"));
		UE_LOG(LogSwagger, Error, TEXT("Form parameter (volume) was ignored, cannot be used in JsonBody"));
		UE_LOG(LogSwagger, Error, TEXT("Form parameter (price) was ignored, cannot be used in JsonBody"));
		UE_LOG(LogSwagger, Error, TEXT("Form parameter (ord_type) was ignored, cannot be used in JsonBody"));
		UE_LOG(LogSwagger, Error, TEXT("Form parameter (identifier) was ignored, cannot be used in JsonBody"));
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		HttpMultipartFormData FormData;
		FormData.AddStringPart(TEXT("market"), *ToUrlString(Market));
		FormData.AddStringPart(TEXT("side"), *ToUrlString(Side));
		if(Volume.IsSet())
		{
			FormData.AddStringPart(TEXT("volume"), *ToUrlString(Volume.GetValue()));
		}
		if(Price.IsSet())
		{
			FormData.AddStringPart(TEXT("price"), *ToUrlString(Price.GetValue()));
		}
		FormData.AddStringPart(TEXT("ord_type"), *ToUrlString(OrdType));
		if(Identifier.IsSet())
		{
			FormData.AddStringPart(TEXT("identifier"), *ToUrlString(Identifier.GetValue()));
		}

		FormData.SetupHttpRequest(HttpRequest);
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		TArray<FString> FormParams;
		FormParams.Add(FString(TEXT("market=")) + ToUrlString(Market));
		FormParams.Add(FString(TEXT("side=")) + ToUrlString(Side));
		if(Volume.IsSet())
		{
			FormParams.Add(FString(TEXT("volume=")) + ToUrlString(Volume.GetValue()));
		}
		if(Price.IsSet())
		{
			FormParams.Add(FString(TEXT("price=")) + ToUrlString(Price.GetValue()));
		}
		FormParams.Add(FString(TEXT("ord_type=")) + ToUrlString(OrdType));
		if(Identifier.IsSet())
		{
			FormParams.Add(FString(TEXT("identifier=")) + ToUrlString(Identifier.GetValue()));
		}
		
		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/x-www-form-urlencoded; charset=utf-8"));
		HttpRequest->SetContentAsString(FString::Join(FormParams, TEXT("&")));
	}
	else
	{
		UE_LOG(LogSwagger, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void SwaggerOrderApi::OrderNewResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
	default:
		SetResponseString(TEXT("OK"));
		break;
	case 201:
		SetResponseString(TEXT("Create"));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request"));
		break;
	case 401:
		SetResponseString(TEXT("Unauthorized"));
		break;
	case 403:
		SetResponseString(TEXT("Forbidden"));
		break;
	case 404:
		SetResponseString(TEXT("Not Found"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error"));
		break;
	}
}

bool SwaggerOrderApi::OrderNewResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString SwaggerOrderApi::OrderOrderbookRequest::ComputePath() const
{
	FString Path(TEXT("/orderbook"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("markets=")) + CollectionToUrlString_multi(Markets, TEXT("markets")));
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void SwaggerOrderApi::OrderOrderbookRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogSwagger, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void SwaggerOrderApi::OrderOrderbookResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
	default:
		SetResponseString(TEXT("OK"));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request"));
		break;
	case 401:
		SetResponseString(TEXT("Unauthorized"));
		break;
	case 403:
		SetResponseString(TEXT("Forbidden"));
		break;
	case 404:
		SetResponseString(TEXT("Not Found"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error"));
		break;
	}
}

bool SwaggerOrderApi::OrderOrderbookResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
