/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
#include "SwaggerTicker.h"

#include "SwaggerModule.h"
#include "SwaggerHelpers.h"

#include "Templates/SharedPointer.h"

namespace Swagger 
{

void SwaggerTicker::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Market.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("market")); WriteJsonValue(Writer, Market.GetValue());	
	}
	if (TradeDate.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("trade_date")); WriteJsonValue(Writer, TradeDate.GetValue());	
	}
	if (TradeTime.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("trade_time")); WriteJsonValue(Writer, TradeTime.GetValue());	
	}
	if (TradeDateKst.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("trade_date_kst")); WriteJsonValue(Writer, TradeDateKst.GetValue());	
	}
	if (TradeTimeKst.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("trade_time_kst")); WriteJsonValue(Writer, TradeTimeKst.GetValue());	
	}
	if (OpeningPrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("opening_price")); WriteJsonValue(Writer, OpeningPrice.GetValue());	
	}
	if (HighPrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("high_price")); WriteJsonValue(Writer, HighPrice.GetValue());	
	}
	if (LowPrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("low_price")); WriteJsonValue(Writer, LowPrice.GetValue());	
	}
	if (TradePrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("trade_price")); WriteJsonValue(Writer, TradePrice.GetValue());	
	}
	if (PrevClosingPrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("prev_closing_price")); WriteJsonValue(Writer, PrevClosingPrice.GetValue());	
	}
	if (Change.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("change")); WriteJsonValue(Writer, Change.GetValue());	
	}
	if (ChangePrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("change_price")); WriteJsonValue(Writer, ChangePrice.GetValue());	
	}
	if (ChangeRate.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("change_rate")); WriteJsonValue(Writer, ChangeRate.GetValue());	
	}
	if (SignedChangePrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("signed_change_price")); WriteJsonValue(Writer, SignedChangePrice.GetValue());	
	}
	if (SignedChangeRate.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("signed_change_rate")); WriteJsonValue(Writer, SignedChangeRate.GetValue());	
	}
	if (TradeVolume.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("trade_volume")); WriteJsonValue(Writer, TradeVolume.GetValue());	
	}
	if (AccTradePrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("acc_trade_price")); WriteJsonValue(Writer, AccTradePrice.GetValue());	
	}
	if (AccTradePrice24h.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("acc_trade_price_24h")); WriteJsonValue(Writer, AccTradePrice24h.GetValue());	
	}
	if (AccTradeVolume.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("acc_trade_volume")); WriteJsonValue(Writer, AccTradeVolume.GetValue());	
	}
	if (AccTradeVolume24h.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("acc_trade_volume_24h")); WriteJsonValue(Writer, AccTradeVolume24h.GetValue());	
	}
	if (Highest52WeekPrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("highest_52_week_price")); WriteJsonValue(Writer, Highest52WeekPrice.GetValue());	
	}
	if (Highest52WeekDate.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("highest_52_week_date")); WriteJsonValue(Writer, Highest52WeekDate.GetValue());	
	}
	if (Lowest52WeekPrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("lowest_52_week_price")); WriteJsonValue(Writer, Lowest52WeekPrice.GetValue());	
	}
	if (Lowest52WeekDate.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("lowest_52_week_date")); WriteJsonValue(Writer, Lowest52WeekDate.GetValue());	
	}
	if (Timestamp.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("timestamp")); WriteJsonValue(Writer, Timestamp.GetValue());	
	}
	Writer->WriteObjectEnd();
}

bool SwaggerTicker::FromJson(const TSharedPtr<FJsonObject>& JsonObject)
{
	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("market"), Market);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("trade_date"), TradeDate);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("trade_time"), TradeTime);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("trade_date_kst"), TradeDateKst);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("trade_time_kst"), TradeTimeKst);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("opening_price"), OpeningPrice);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("high_price"), HighPrice);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("low_price"), LowPrice);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("trade_price"), TradePrice);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("prev_closing_price"), PrevClosingPrice);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("change"), Change);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("change_price"), ChangePrice);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("change_rate"), ChangeRate);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("signed_change_price"), SignedChangePrice);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("signed_change_rate"), SignedChangeRate);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("trade_volume"), TradeVolume);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("acc_trade_price"), AccTradePrice);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("acc_trade_price_24h"), AccTradePrice24h);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("acc_trade_volume"), AccTradeVolume);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("acc_trade_volume_24h"), AccTradeVolume24h);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("highest_52_week_price"), Highest52WeekPrice);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("highest_52_week_date"), Highest52WeekDate);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("lowest_52_week_price"), Lowest52WeekPrice);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("lowest_52_week_date"), Lowest52WeekDate);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("timestamp"), Timestamp);

	return ParseSuccess;
}
}
