/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
#include "SwaggerCandleApiOperations.h"

#include "SwaggerModule.h"
#include "SwaggerHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace Swagger 
{

FString SwaggerCandleApi::CandleDaysRequest::ComputePath() const
{
	FString Path(TEXT("/candles/days"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("market=")) + ToUrlString(Market));
	if(To.IsSet())
	{
		QueryParams.Add(FString(TEXT("to=")) + ToUrlString(To.GetValue()));
	}
	if(Count.IsSet())
	{
		QueryParams.Add(FString(TEXT("count=")) + ToUrlString(Count.GetValue()));
	}
	if(ConvertingPriceUnit.IsSet())
	{
		QueryParams.Add(FString(TEXT("convertingPriceUnit=")) + ToUrlString(ConvertingPriceUnit.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void SwaggerCandleApi::CandleDaysRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogSwagger, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void SwaggerCandleApi::CandleDaysResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
	default:
		SetResponseString(TEXT("OK"));
		break;
	case 400:
		SetResponseString(TEXT("Status: Bad Request "));
		break;
	case 401:
		SetResponseString(TEXT("Status: Unauthorized "));
		break;
	case 403:
		SetResponseString(TEXT("Status: Forbidden "));
		break;
	case 404:
		SetResponseString(TEXT("Status: Not Found "));
		break;
	case 500:
		SetResponseString(TEXT("Status: Internal Server Error "));
		break;
	}
}

bool SwaggerCandleApi::CandleDaysResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString SwaggerCandleApi::CandleMinutesRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("unit"), ToStringFormatArg(Unit) } };

	FString Path = FString::Format(TEXT("/candles/minutes/{unit}"), PathParams);
	
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("market=")) + ToUrlString(Market));
	if(To.IsSet())
	{
		QueryParams.Add(FString(TEXT("to=")) + ToUrlString(To.GetValue()));
	}
	if(Count.IsSet())
	{
		QueryParams.Add(FString(TEXT("count=")) + ToUrlString(Count.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void SwaggerCandleApi::CandleMinutesRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogSwagger, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void SwaggerCandleApi::CandleMinutesResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
	default:
		SetResponseString(TEXT("OK"));
		break;
	case 400:
		SetResponseString(TEXT("Status: Bad Request "));
		break;
	case 401:
		SetResponseString(TEXT("Status: Unauthorized "));
		break;
	case 403:
		SetResponseString(TEXT("Status: Forbidden "));
		break;
	case 404:
		SetResponseString(TEXT("Status: Not Found "));
		break;
	case 500:
		SetResponseString(TEXT("Status: Internal Server Error "));
		break;
	}
}

bool SwaggerCandleApi::CandleMinutesResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString SwaggerCandleApi::CandleMonthRequest::ComputePath() const
{
	FString Path(TEXT("/candles/months"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("market=")) + ToUrlString(Market));
	if(To.IsSet())
	{
		QueryParams.Add(FString(TEXT("to=")) + ToUrlString(To.GetValue()));
	}
	if(Count.IsSet())
	{
		QueryParams.Add(FString(TEXT("count=")) + ToUrlString(Count.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void SwaggerCandleApi::CandleMonthRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogSwagger, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void SwaggerCandleApi::CandleMonthResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
	default:
		SetResponseString(TEXT("OK"));
		break;
	case 400:
		SetResponseString(TEXT("Status: Bad Request "));
		break;
	case 401:
		SetResponseString(TEXT("Status: Unauthorized "));
		break;
	case 403:
		SetResponseString(TEXT("Status: Forbidden "));
		break;
	case 404:
		SetResponseString(TEXT("Status: Not Found "));
		break;
	case 500:
		SetResponseString(TEXT("Status: Internal Server Error "));
		break;
	}
}

bool SwaggerCandleApi::CandleMonthResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString SwaggerCandleApi::CandleWeeksRequest::ComputePath() const
{
	FString Path(TEXT("/candles/weeks"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("market=")) + ToUrlString(Market));
	if(To.IsSet())
	{
		QueryParams.Add(FString(TEXT("to=")) + ToUrlString(To.GetValue()));
	}
	if(Count.IsSet())
	{
		QueryParams.Add(FString(TEXT("count=")) + ToUrlString(Count.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void SwaggerCandleApi::CandleWeeksRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogSwagger, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void SwaggerCandleApi::CandleWeeksResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
	default:
		SetResponseString(TEXT("OK"));
		break;
	case 400:
		SetResponseString(TEXT("Status: Bad Request "));
		break;
	case 401:
		SetResponseString(TEXT("Status: Unauthorized "));
		break;
	case 403:
		SetResponseString(TEXT("Status: Forbidden "));
		break;
	case 404:
		SetResponseString(TEXT("Status: Not Found "));
		break;
	case 500:
		SetResponseString(TEXT("Status: Internal Server Error "));
		break;
	}
}

bool SwaggerCandleApi::CandleWeeksResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
