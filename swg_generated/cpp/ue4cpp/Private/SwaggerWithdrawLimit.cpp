/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
#include "SwaggerWithdrawLimit.h"

#include "SwaggerModule.h"
#include "SwaggerHelpers.h"

#include "Templates/SharedPointer.h"

namespace Swagger 
{

void SwaggerWithdrawLimit::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Currency.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("currency")); WriteJsonValue(Writer, Currency.GetValue());	
	}
	if (Minimum.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("minimum")); WriteJsonValue(Writer, Minimum.GetValue());	
	}
	if (Onetime.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("onetime")); WriteJsonValue(Writer, Onetime.GetValue());	
	}
	if (Daily.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("daily")); WriteJsonValue(Writer, Daily.GetValue());	
	}
	if (RemainingDaily.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("remaining_daily")); WriteJsonValue(Writer, RemainingDaily.GetValue());	
	}
	if (RemainingDailyKrw.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("remaining_daily_krw")); WriteJsonValue(Writer, RemainingDailyKrw.GetValue());	
	}
	if (Fixed.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("fixed")); WriteJsonValue(Writer, Fixed.GetValue());	
	}
	if (CanWithdraw.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("can_withdraw")); WriteJsonValue(Writer, CanWithdraw.GetValue());	
	}
	Writer->WriteObjectEnd();
}

bool SwaggerWithdrawLimit::FromJson(const TSharedPtr<FJsonObject>& JsonObject)
{
	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("currency"), Currency);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("minimum"), Minimum);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("onetime"), Onetime);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("daily"), Daily);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("remaining_daily"), RemainingDaily);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("remaining_daily_krw"), RemainingDailyKrw);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("fixed"), Fixed);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("can_withdraw"), CanWithdraw);

	return ParseSuccess;
}
}
