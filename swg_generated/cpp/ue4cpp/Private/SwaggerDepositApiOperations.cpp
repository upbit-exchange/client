/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
#include "SwaggerDepositApiOperations.h"

#include "SwaggerModule.h"
#include "SwaggerHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace Swagger 
{

FString SwaggerDepositApi::DepositCoinAddressRequest::ComputePath() const
{
	FString Path(TEXT("/deposits/coin_address"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("currency=")) + ToUrlString(Currency));
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void SwaggerDepositApi::DepositCoinAddressRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogSwagger, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void SwaggerDepositApi::DepositCoinAddressResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
	default:
		SetResponseString(TEXT("OK"));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request"));
		break;
	case 401:
		SetResponseString(TEXT("Unauthorized"));
		break;
	case 403:
		SetResponseString(TEXT("Forbidden"));
		break;
	case 404:
		SetResponseString(TEXT("Not Found"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error"));
		break;
	}
}

bool SwaggerDepositApi::DepositCoinAddressResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString SwaggerDepositApi::DepositCoinAddressesRequest::ComputePath() const
{
	FString Path(TEXT("/deposits/coin_addresses"));
	return Path;
}

void SwaggerDepositApi::DepositCoinAddressesRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogSwagger, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void SwaggerDepositApi::DepositCoinAddressesResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
	default:
		SetResponseString(TEXT("OK"));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request"));
		break;
	case 401:
		SetResponseString(TEXT("Unauthorized"));
		break;
	case 403:
		SetResponseString(TEXT("Forbidden"));
		break;
	case 404:
		SetResponseString(TEXT("Not Found"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error"));
		break;
	}
}

bool SwaggerDepositApi::DepositCoinAddressesResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString SwaggerDepositApi::DepositGenerateCoinAddressRequest::ComputePath() const
{
	FString Path(TEXT("/deposits/generate_coin_address"));
	return Path;
}

void SwaggerDepositApi::DepositGenerateCoinAddressRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("multipart/form-data") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		UE_LOG(LogSwagger, Error, TEXT("Form parameter (currency) was ignored, cannot be used in JsonBody"));
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		HttpMultipartFormData FormData;
		FormData.AddStringPart(TEXT("currency"), *ToUrlString(Currency));

		FormData.SetupHttpRequest(HttpRequest);
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		TArray<FString> FormParams;
		FormParams.Add(FString(TEXT("currency=")) + ToUrlString(Currency));
		
		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/x-www-form-urlencoded; charset=utf-8"));
		HttpRequest->SetContentAsString(FString::Join(FormParams, TEXT("&")));
	}
	else
	{
		UE_LOG(LogSwagger, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void SwaggerDepositApi::DepositGenerateCoinAddressResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
	default:
		SetResponseString(TEXT("OK"));
		break;
	case 201:
		SetResponseString(TEXT("Create"));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request"));
		break;
	case 401:
		SetResponseString(TEXT("Unauthorized"));
		break;
	case 403:
		SetResponseString(TEXT("Forbidden"));
		break;
	case 404:
		SetResponseString(TEXT("Not Found"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error"));
		break;
	}
}

bool SwaggerDepositApi::DepositGenerateCoinAddressResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString SwaggerDepositApi::DepositInfoRequest::ComputePath() const
{
	FString Path(TEXT("/deposit"));
	TArray<FString> QueryParams;
	if(Uuid.IsSet())
	{
		QueryParams.Add(FString(TEXT("uuid=")) + ToUrlString(Uuid.GetValue()));
	}
	if(Txid.IsSet())
	{
		QueryParams.Add(FString(TEXT("txid=")) + ToUrlString(Txid.GetValue()));
	}
	if(Currency.IsSet())
	{
		QueryParams.Add(FString(TEXT("currency=")) + ToUrlString(Currency.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void SwaggerDepositApi::DepositInfoRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogSwagger, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void SwaggerDepositApi::DepositInfoResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
	default:
		SetResponseString(TEXT("OK"));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request"));
		break;
	case 401:
		SetResponseString(TEXT("Unauthorized"));
		break;
	case 403:
		SetResponseString(TEXT("Forbidden"));
		break;
	case 404:
		SetResponseString(TEXT("Not Found"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error"));
		break;
	}
}

bool SwaggerDepositApi::DepositInfoResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString SwaggerDepositApi::DepositInfoAllRequest::ComputePath() const
{
	FString Path(TEXT("/deposits"));
	TArray<FString> QueryParams;
	if(Currency.IsSet())
	{
		QueryParams.Add(FString(TEXT("currency=")) + ToUrlString(Currency.GetValue()));
	}
	if(State.IsSet())
	{
		QueryParams.Add(FString(TEXT("state=")) + ToUrlString(State.GetValue()));
	}
	if(Uuids.IsSet())
	{
		QueryParams.Add(FString(TEXT("uuids=")) + CollectionToUrlString_multi(Uuids.GetValue(), TEXT("uuids")));
	}
	if(Txids.IsSet())
	{
		QueryParams.Add(FString(TEXT("txids=")) + CollectionToUrlString_multi(Txids.GetValue(), TEXT("txids")));
	}
	if(Limit.IsSet())
	{
		QueryParams.Add(FString(TEXT("limit=")) + ToUrlString(Limit.GetValue()));
	}
	if(Page.IsSet())
	{
		QueryParams.Add(FString(TEXT("page=")) + ToUrlString(Page.GetValue()));
	}
	if(OrderBy.IsSet())
	{
		QueryParams.Add(FString(TEXT("order_by=")) + ToUrlString(OrderBy.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void SwaggerDepositApi::DepositInfoAllRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogSwagger, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void SwaggerDepositApi::DepositInfoAllResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
	default:
		SetResponseString(TEXT("OK"));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request"));
		break;
	case 401:
		SetResponseString(TEXT("Unauthorized"));
		break;
	case 403:
		SetResponseString(TEXT("Forbidden"));
		break;
	case 404:
		SetResponseString(TEXT("Not Found"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error"));
		break;
	}
}

bool SwaggerDepositApi::DepositInfoAllResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
