/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
#include "SwaggerCandleDays.h"

#include "SwaggerModule.h"
#include "SwaggerHelpers.h"

#include "Templates/SharedPointer.h"

namespace Swagger 
{

void SwaggerCandleDays::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Market.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("market")); WriteJsonValue(Writer, Market.GetValue());	
	}
	if (CandleDateTimeUtc.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("candle_date_time_utc")); WriteJsonValue(Writer, CandleDateTimeUtc.GetValue());	
	}
	if (CandleDateTimeKst.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("candle_date_time_kst")); WriteJsonValue(Writer, CandleDateTimeKst.GetValue());	
	}
	if (OpeningPrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("opening_price")); WriteJsonValue(Writer, OpeningPrice.GetValue());	
	}
	if (HighPrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("high_price")); WriteJsonValue(Writer, HighPrice.GetValue());	
	}
	if (LowPrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("low_price")); WriteJsonValue(Writer, LowPrice.GetValue());	
	}
	if (TradePrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("trade_price")); WriteJsonValue(Writer, TradePrice.GetValue());	
	}
	if (Timestamp.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("timestamp")); WriteJsonValue(Writer, Timestamp.GetValue());	
	}
	if (CandleAccTradePrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("candle_acc_trade_price")); WriteJsonValue(Writer, CandleAccTradePrice.GetValue());	
	}
	if (CandleAccTradeVolume.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("candle_acc_trade_volume")); WriteJsonValue(Writer, CandleAccTradeVolume.GetValue());	
	}
	if (PrevClosingPrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("prev_closing_price")); WriteJsonValue(Writer, PrevClosingPrice.GetValue());	
	}
	if (ChangePrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("change_price")); WriteJsonValue(Writer, ChangePrice.GetValue());	
	}
	if (ChangeRate.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("change_rate")); WriteJsonValue(Writer, ChangeRate.GetValue());	
	}
	if (ConvertedTradePrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("converted_trade_price")); WriteJsonValue(Writer, ConvertedTradePrice.GetValue());	
	}
	Writer->WriteObjectEnd();
}

bool SwaggerCandleDays::FromJson(const TSharedPtr<FJsonObject>& JsonObject)
{
	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("market"), Market);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("candle_date_time_utc"), CandleDateTimeUtc);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("candle_date_time_kst"), CandleDateTimeKst);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("opening_price"), OpeningPrice);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("high_price"), HighPrice);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("low_price"), LowPrice);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("trade_price"), TradePrice);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("timestamp"), Timestamp);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("candle_acc_trade_price"), CandleAccTradePrice);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("candle_acc_trade_volume"), CandleAccTradeVolume);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("prev_closing_price"), PrevClosingPrice);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("change_price"), ChangePrice);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("change_rate"), ChangeRate);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("converted_trade_price"), ConvertedTradePrice);

	return ParseSuccess;
}
}
