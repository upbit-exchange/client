/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
#include "SwaggerNewOrder.h"

#include "SwaggerModule.h"
#include "SwaggerHelpers.h"

#include "Templates/SharedPointer.h"

namespace Swagger 
{

void SwaggerNewOrder::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Uuid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("uuid")); WriteJsonValue(Writer, Uuid.GetValue());	
	}
	if (Side.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("side")); WriteJsonValue(Writer, Side.GetValue());	
	}
	if (OrdType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("ord_type")); WriteJsonValue(Writer, OrdType.GetValue());	
	}
	if (Price.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("price")); WriteJsonValue(Writer, Price.GetValue());	
	}
	if (AvgPrice.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("avg_price")); WriteJsonValue(Writer, AvgPrice.GetValue());	
	}
	if (State.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("state")); WriteJsonValue(Writer, State.GetValue());	
	}
	if (Market.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("market")); WriteJsonValue(Writer, Market.GetValue());	
	}
	if (CreatedAt.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("created_at")); WriteJsonValue(Writer, CreatedAt.GetValue());	
	}
	if (Volume.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("volume")); WriteJsonValue(Writer, Volume.GetValue());	
	}
	if (RemainingVolume.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("remaining_volume")); WriteJsonValue(Writer, RemainingVolume.GetValue());	
	}
	if (ReservedFee.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("reserved_fee")); WriteJsonValue(Writer, ReservedFee.GetValue());	
	}
	if (RemainingFee.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("remaining_fee")); WriteJsonValue(Writer, RemainingFee.GetValue());	
	}
	if (PaidFee.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("paid_fee")); WriteJsonValue(Writer, PaidFee.GetValue());	
	}
	if (Locked.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("locked")); WriteJsonValue(Writer, Locked.GetValue());	
	}
	if (ExecutedVolume.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("executed_volume")); WriteJsonValue(Writer, ExecutedVolume.GetValue());	
	}
	if (TradesCount.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("trades_count")); WriteJsonValue(Writer, TradesCount.GetValue());	
	}
	Writer->WriteObjectEnd();
}

bool SwaggerNewOrder::FromJson(const TSharedPtr<FJsonObject>& JsonObject)
{
	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("uuid"), Uuid);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("side"), Side);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("ord_type"), OrdType);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("price"), Price);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("avg_price"), AvgPrice);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("state"), State);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("market"), Market);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("created_at"), CreatedAt);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("volume"), Volume);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("remaining_volume"), RemainingVolume);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("reserved_fee"), ReservedFee);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("remaining_fee"), RemainingFee);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("paid_fee"), PaidFee);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("locked"), Locked);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("executed_volume"), ExecutedVolume);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("trades_count"), TradesCount);

	return ParseSuccess;
}
}
