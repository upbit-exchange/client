/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
#include "SwaggerWithdrawCoin.h"

#include "SwaggerModule.h"
#include "SwaggerHelpers.h"

#include "Templates/SharedPointer.h"

namespace Swagger 
{

void SwaggerWithdrawCoin::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Type.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("type")); WriteJsonValue(Writer, Type.GetValue());	
	}
	if (Uuid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("uuid")); WriteJsonValue(Writer, Uuid.GetValue());	
	}
	if (Currency.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("currency")); WriteJsonValue(Writer, Currency.GetValue());	
	}
	if (Txid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("txid")); WriteJsonValue(Writer, Txid.GetValue());	
	}
	if (State.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("state")); WriteJsonValue(Writer, State.GetValue());	
	}
	if (CreatedAt.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("created_at")); WriteJsonValue(Writer, CreatedAt.GetValue());	
	}
	if (DoneAt.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("done_at")); WriteJsonValue(Writer, DoneAt.GetValue());	
	}
	if (Amount.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("amount")); WriteJsonValue(Writer, Amount.GetValue());	
	}
	if (Fee.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("fee")); WriteJsonValue(Writer, Fee.GetValue());	
	}
	if (KrwAmount.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("krw_amount")); WriteJsonValue(Writer, KrwAmount.GetValue());	
	}
	if (TransactionType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("transaction_type")); WriteJsonValue(Writer, TransactionType.GetValue());	
	}
	Writer->WriteObjectEnd();
}

bool SwaggerWithdrawCoin::FromJson(const TSharedPtr<FJsonObject>& JsonObject)
{
	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("type"), Type);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("uuid"), Uuid);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("currency"), Currency);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("txid"), Txid);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("state"), State);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("created_at"), CreatedAt);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("done_at"), DoneAt);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("amount"), Amount);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("fee"), Fee);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("krw_amount"), KrwAmount);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("transaction_type"), TransactionType);

	return ParseSuccess;
}
}
