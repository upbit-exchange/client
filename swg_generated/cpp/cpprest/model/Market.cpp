/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.18.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Market.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Market::Market()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Order_typesIsSet = false;
    m_Order_sidesIsSet = false;
    m_BidIsSet = false;
    m_AskIsSet = false;
    m_Max_total = utility::conversions::to_string_t("");
    m_Max_totalIsSet = false;
    m_State = utility::conversions::to_string_t("");
    m_StateIsSet = false;
}

Market::~Market()
{
}

void Market::validate()
{
    // TODO: implement validation
}

web::json::value Market::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Order_types )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("order_types")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Order_sides )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("order_sides")] = web::json::value::array(jsonArray);
        }
    }
    if(m_BidIsSet)
    {
        val[utility::conversions::to_string_t("bid")] = ModelBase::toJson(m_Bid);
    }
    if(m_AskIsSet)
    {
        val[utility::conversions::to_string_t("ask")] = ModelBase::toJson(m_Ask);
    }
    if(m_Max_totalIsSet)
    {
        val[utility::conversions::to_string_t("max_total")] = ModelBase::toJson(m_Max_total);
    }
    if(m_StateIsSet)
    {
        val[utility::conversions::to_string_t("state")] = ModelBase::toJson(m_State);
    }

    return val;
}

void Market::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("name")];
        if(!fieldValue.is_null())
        {
            setName(ModelBase::stringFromJson(fieldValue));
        }
    }
    {
        m_Order_types.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("order_types")))
        {
        for( auto& item : val[utility::conversions::to_string_t("order_types")].as_array() )
        {
            m_Order_types.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_Order_sides.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("order_sides")))
        {
        for( auto& item : val[utility::conversions::to_string_t("order_sides")].as_array() )
        {
            m_Order_sides.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bid")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("bid")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Bid> newItem(new Bid());
            newItem->fromJson(fieldValue);
            setBid( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ask")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ask")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Ask> newItem(new Ask());
            newItem->fromJson(fieldValue);
            setAsk( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("max_total")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("max_total")];
        if(!fieldValue.is_null())
        {
            setMaxTotal(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("state")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("state")];
        if(!fieldValue.is_null())
        {
            setState(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void Market::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
        
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Order_types )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("order_types"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Order_sides )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("order_sides"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_BidIsSet)
    {
        if (m_Bid.get())
        {
            m_Bid->toMultipart(multipart, utility::conversions::to_string_t("bid."));
        }
        
    }
    if(m_AskIsSet)
    {
        if (m_Ask.get())
        {
            m_Ask->toMultipart(multipart, utility::conversions::to_string_t("ask."));
        }
        
    }
    if(m_Max_totalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("max_total"), m_Max_total));
        
    }
    if(m_StateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("state"), m_State));
        
    }
}

void Market::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    }
    {
        m_Order_types.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("order_types")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("order_types"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Order_types.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_Order_sides.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("order_sides")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("order_sides"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Order_sides.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bid")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("bid")))
        {
            std::shared_ptr<Bid> newItem(new Bid());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("bid."));
            setBid( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ask")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("ask")))
        {
            std::shared_ptr<Ask> newItem(new Ask());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("ask."));
            setAsk( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("max_total")))
    {
        setMaxTotal(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("max_total"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("state")))
    {
        setState(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("state"))));
    }
}

utility::string_t Market::getId() const
{
    return m_Id;
}


void Market::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Market::idIsSet() const
{
    return m_IdIsSet;
}

void Market::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t Market::getName() const
{
    return m_Name;
}


void Market::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool Market::nameIsSet() const
{
    return m_NameIsSet;
}

void Market::unsetName()
{
    m_NameIsSet = false;
}

std::vector<utility::string_t>& Market::getOrderTypes()
{
    return m_Order_types;
}

void Market::setOrderTypes(std::vector<utility::string_t> value)
{
    m_Order_types = value;
    m_Order_typesIsSet = true;
}
bool Market::orderTypesIsSet() const
{
    return m_Order_typesIsSet;
}

void Market::unsetOrder_types()
{
    m_Order_typesIsSet = false;
}

std::vector<utility::string_t>& Market::getOrderSides()
{
    return m_Order_sides;
}

void Market::setOrderSides(std::vector<utility::string_t> value)
{
    m_Order_sides = value;
    m_Order_sidesIsSet = true;
}
bool Market::orderSidesIsSet() const
{
    return m_Order_sidesIsSet;
}

void Market::unsetOrder_sides()
{
    m_Order_sidesIsSet = false;
}

std::shared_ptr<Bid> Market::getBid() const
{
    return m_Bid;
}


void Market::setBid(std::shared_ptr<Bid> value)
{
    m_Bid = value;
    m_BidIsSet = true;
}
bool Market::bidIsSet() const
{
    return m_BidIsSet;
}

void Market::unsetBid()
{
    m_BidIsSet = false;
}

std::shared_ptr<Ask> Market::getAsk() const
{
    return m_Ask;
}


void Market::setAsk(std::shared_ptr<Ask> value)
{
    m_Ask = value;
    m_AskIsSet = true;
}
bool Market::askIsSet() const
{
    return m_AskIsSet;
}

void Market::unsetAsk()
{
    m_AskIsSet = false;
}

utility::string_t Market::getMaxTotal() const
{
    return m_Max_total;
}


void Market::setMaxTotal(utility::string_t value)
{
    m_Max_total = value;
    m_Max_totalIsSet = true;
}
bool Market::maxTotalIsSet() const
{
    return m_Max_totalIsSet;
}

void Market::unsetMax_total()
{
    m_Max_totalIsSet = false;
}

utility::string_t Market::getState() const
{
    return m_State;
}


void Market::setState(utility::string_t value)
{
    m_State = value;
    m_StateIsSet = true;
}
bool Market::stateIsSet() const
{
    return m_StateIsSet;
}

void Market::unsetState()
{
    m_StateIsSet = false;
}

}
}
}
}

