/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.18.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "OrderbookUnit.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

OrderbookUnit::OrderbookUnit()
{
    m_Ask_price = 0.0;
    m_Ask_priceIsSet = false;
    m_Bid_price = 0.0;
    m_Bid_priceIsSet = false;
    m_Ask_size = 0.0;
    m_Ask_sizeIsSet = false;
    m_Bid_size = 0.0;
    m_Bid_sizeIsSet = false;
}

OrderbookUnit::~OrderbookUnit()
{
}

void OrderbookUnit::validate()
{
    // TODO: implement validation
}

web::json::value OrderbookUnit::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Ask_priceIsSet)
    {
        val[utility::conversions::to_string_t("ask_price")] = ModelBase::toJson(m_Ask_price);
    }
    if(m_Bid_priceIsSet)
    {
        val[utility::conversions::to_string_t("bid_price")] = ModelBase::toJson(m_Bid_price);
    }
    if(m_Ask_sizeIsSet)
    {
        val[utility::conversions::to_string_t("ask_size")] = ModelBase::toJson(m_Ask_size);
    }
    if(m_Bid_sizeIsSet)
    {
        val[utility::conversions::to_string_t("bid_size")] = ModelBase::toJson(m_Bid_size);
    }

    return val;
}

void OrderbookUnit::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("ask_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ask_price")];
        if(!fieldValue.is_null())
        {
            setAskPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bid_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("bid_price")];
        if(!fieldValue.is_null())
        {
            setBidPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ask_size")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ask_size")];
        if(!fieldValue.is_null())
        {
            setAskSize(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bid_size")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("bid_size")];
        if(!fieldValue.is_null())
        {
            setBidSize(ModelBase::doubleFromJson(fieldValue));
        }
    }
}

void OrderbookUnit::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Ask_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ask_price"), m_Ask_price));
    }
    if(m_Bid_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bid_price"), m_Bid_price));
    }
    if(m_Ask_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ask_size"), m_Ask_size));
    }
    if(m_Bid_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bid_size"), m_Bid_size));
    }
}

void OrderbookUnit::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("ask_price")))
    {
        setAskPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ask_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bid_price")))
    {
        setBidPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("bid_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ask_size")))
    {
        setAskSize(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ask_size"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bid_size")))
    {
        setBidSize(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("bid_size"))));
    }
}

double OrderbookUnit::getAskPrice() const
{
    return m_Ask_price;
}


void OrderbookUnit::setAskPrice(double value)
{
    m_Ask_price = value;
    m_Ask_priceIsSet = true;
}
bool OrderbookUnit::askPriceIsSet() const
{
    return m_Ask_priceIsSet;
}

void OrderbookUnit::unsetAsk_price()
{
    m_Ask_priceIsSet = false;
}

double OrderbookUnit::getBidPrice() const
{
    return m_Bid_price;
}


void OrderbookUnit::setBidPrice(double value)
{
    m_Bid_price = value;
    m_Bid_priceIsSet = true;
}
bool OrderbookUnit::bidPriceIsSet() const
{
    return m_Bid_priceIsSet;
}

void OrderbookUnit::unsetBid_price()
{
    m_Bid_priceIsSet = false;
}

double OrderbookUnit::getAskSize() const
{
    return m_Ask_size;
}


void OrderbookUnit::setAskSize(double value)
{
    m_Ask_size = value;
    m_Ask_sizeIsSet = true;
}
bool OrderbookUnit::askSizeIsSet() const
{
    return m_Ask_sizeIsSet;
}

void OrderbookUnit::unsetAsk_size()
{
    m_Ask_sizeIsSet = false;
}

double OrderbookUnit::getBidSize() const
{
    return m_Bid_size;
}


void OrderbookUnit::setBidSize(double value)
{
    m_Bid_size = value;
    m_Bid_sizeIsSet = true;
}
bool OrderbookUnit::bidSizeIsSet() const
{
    return m_Bid_sizeIsSet;
}

void OrderbookUnit::unsetBid_size()
{
    m_Bid_sizeIsSet = false;
}

}
}
}
}

