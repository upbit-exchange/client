/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.18.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "WithdrawLimit.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

WithdrawLimit::WithdrawLimit()
{
    m_Currency = utility::conversions::to_string_t("");
    m_CurrencyIsSet = false;
    m_Minimum = utility::conversions::to_string_t("");
    m_MinimumIsSet = false;
    m_Onetime = utility::conversions::to_string_t("");
    m_OnetimeIsSet = false;
    m_Daily = utility::conversions::to_string_t("");
    m_DailyIsSet = false;
    m_Remaining_daily = utility::conversions::to_string_t("");
    m_Remaining_dailyIsSet = false;
    m_Remaining_daily_krw = utility::conversions::to_string_t("");
    m_Remaining_daily_krwIsSet = false;
    m_Fixed = 0.0;
    m_FixedIsSet = false;
    m_Can_withdraw = false;
    m_Can_withdrawIsSet = false;
}

WithdrawLimit::~WithdrawLimit()
{
}

void WithdrawLimit::validate()
{
    // TODO: implement validation
}

web::json::value WithdrawLimit::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CurrencyIsSet)
    {
        val[utility::conversions::to_string_t("currency")] = ModelBase::toJson(m_Currency);
    }
    if(m_MinimumIsSet)
    {
        val[utility::conversions::to_string_t("minimum")] = ModelBase::toJson(m_Minimum);
    }
    if(m_OnetimeIsSet)
    {
        val[utility::conversions::to_string_t("onetime")] = ModelBase::toJson(m_Onetime);
    }
    if(m_DailyIsSet)
    {
        val[utility::conversions::to_string_t("daily")] = ModelBase::toJson(m_Daily);
    }
    if(m_Remaining_dailyIsSet)
    {
        val[utility::conversions::to_string_t("remaining_daily")] = ModelBase::toJson(m_Remaining_daily);
    }
    if(m_Remaining_daily_krwIsSet)
    {
        val[utility::conversions::to_string_t("remaining_daily_krw")] = ModelBase::toJson(m_Remaining_daily_krw);
    }
    if(m_FixedIsSet)
    {
        val[utility::conversions::to_string_t("fixed")] = ModelBase::toJson(m_Fixed);
    }
    if(m_Can_withdrawIsSet)
    {
        val[utility::conversions::to_string_t("can_withdraw")] = ModelBase::toJson(m_Can_withdraw);
    }

    return val;
}

void WithdrawLimit::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("currency")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("currency")];
        if(!fieldValue.is_null())
        {
            setCurrency(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("minimum")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("minimum")];
        if(!fieldValue.is_null())
        {
            setMinimum(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("onetime")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("onetime")];
        if(!fieldValue.is_null())
        {
            setOnetime(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("daily")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("daily")];
        if(!fieldValue.is_null())
        {
            setDaily(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("remaining_daily")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("remaining_daily")];
        if(!fieldValue.is_null())
        {
            setRemainingDaily(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("remaining_daily_krw")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("remaining_daily_krw")];
        if(!fieldValue.is_null())
        {
            setRemainingDailyKrw(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fixed")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("fixed")];
        if(!fieldValue.is_null())
        {
            setFixed(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("can_withdraw")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("can_withdraw")];
        if(!fieldValue.is_null())
        {
            setCanWithdraw(ModelBase::boolFromJson(fieldValue));
        }
    }
}

void WithdrawLimit::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("currency"), m_Currency));
        
    }
    if(m_MinimumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("minimum"), m_Minimum));
        
    }
    if(m_OnetimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("onetime"), m_Onetime));
        
    }
    if(m_DailyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("daily"), m_Daily));
        
    }
    if(m_Remaining_dailyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("remaining_daily"), m_Remaining_daily));
        
    }
    if(m_Remaining_daily_krwIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("remaining_daily_krw"), m_Remaining_daily_krw));
        
    }
    if(m_FixedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fixed"), m_Fixed));
    }
    if(m_Can_withdrawIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("can_withdraw"), m_Can_withdraw));
    }
}

void WithdrawLimit::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("currency")))
    {
        setCurrency(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("currency"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("minimum")))
    {
        setMinimum(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("minimum"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("onetime")))
    {
        setOnetime(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("onetime"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("daily")))
    {
        setDaily(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("daily"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("remaining_daily")))
    {
        setRemainingDaily(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("remaining_daily"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("remaining_daily_krw")))
    {
        setRemainingDailyKrw(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("remaining_daily_krw"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fixed")))
    {
        setFixed(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("fixed"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("can_withdraw")))
    {
        setCanWithdraw(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("can_withdraw"))));
    }
}

utility::string_t WithdrawLimit::getCurrency() const
{
    return m_Currency;
}


void WithdrawLimit::setCurrency(utility::string_t value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}
bool WithdrawLimit::currencyIsSet() const
{
    return m_CurrencyIsSet;
}

void WithdrawLimit::unsetCurrency()
{
    m_CurrencyIsSet = false;
}

utility::string_t WithdrawLimit::getMinimum() const
{
    return m_Minimum;
}


void WithdrawLimit::setMinimum(utility::string_t value)
{
    m_Minimum = value;
    m_MinimumIsSet = true;
}
bool WithdrawLimit::minimumIsSet() const
{
    return m_MinimumIsSet;
}

void WithdrawLimit::unsetMinimum()
{
    m_MinimumIsSet = false;
}

utility::string_t WithdrawLimit::getOnetime() const
{
    return m_Onetime;
}


void WithdrawLimit::setOnetime(utility::string_t value)
{
    m_Onetime = value;
    m_OnetimeIsSet = true;
}
bool WithdrawLimit::onetimeIsSet() const
{
    return m_OnetimeIsSet;
}

void WithdrawLimit::unsetOnetime()
{
    m_OnetimeIsSet = false;
}

utility::string_t WithdrawLimit::getDaily() const
{
    return m_Daily;
}


void WithdrawLimit::setDaily(utility::string_t value)
{
    m_Daily = value;
    m_DailyIsSet = true;
}
bool WithdrawLimit::dailyIsSet() const
{
    return m_DailyIsSet;
}

void WithdrawLimit::unsetDaily()
{
    m_DailyIsSet = false;
}

utility::string_t WithdrawLimit::getRemainingDaily() const
{
    return m_Remaining_daily;
}


void WithdrawLimit::setRemainingDaily(utility::string_t value)
{
    m_Remaining_daily = value;
    m_Remaining_dailyIsSet = true;
}
bool WithdrawLimit::remainingDailyIsSet() const
{
    return m_Remaining_dailyIsSet;
}

void WithdrawLimit::unsetRemaining_daily()
{
    m_Remaining_dailyIsSet = false;
}

utility::string_t WithdrawLimit::getRemainingDailyKrw() const
{
    return m_Remaining_daily_krw;
}


void WithdrawLimit::setRemainingDailyKrw(utility::string_t value)
{
    m_Remaining_daily_krw = value;
    m_Remaining_daily_krwIsSet = true;
}
bool WithdrawLimit::remainingDailyKrwIsSet() const
{
    return m_Remaining_daily_krwIsSet;
}

void WithdrawLimit::unsetRemaining_daily_krw()
{
    m_Remaining_daily_krwIsSet = false;
}

double WithdrawLimit::getFixed() const
{
    return m_Fixed;
}


void WithdrawLimit::setFixed(double value)
{
    m_Fixed = value;
    m_FixedIsSet = true;
}
bool WithdrawLimit::fixedIsSet() const
{
    return m_FixedIsSet;
}

void WithdrawLimit::unsetFixed()
{
    m_FixedIsSet = false;
}

bool WithdrawLimit::isCanWithdraw() const
{
    return m_Can_withdraw;
}


void WithdrawLimit::setCanWithdraw(bool value)
{
    m_Can_withdraw = value;
    m_Can_withdrawIsSet = true;
}
bool WithdrawLimit::canWithdrawIsSet() const
{
    return m_Can_withdrawIsSet;
}

void WithdrawLimit::unsetCan_withdraw()
{
    m_Can_withdrawIsSet = false;
}

}
}
}
}

