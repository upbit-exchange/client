/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.18.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Market.h
 *
 * 마켓에 대한 정보
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_Market_H_
#define IO_SWAGGER_CLIENT_MODEL_Market_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "Bid.h"
#include <vector>
#include "Ask.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 마켓에 대한 정보
/// </summary>
class  Market
    : public ModelBase
{
public:
    Market();
    virtual ~Market();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Market members

    /// <summary>
    /// 마켓 ID
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(utility::string_t value);
    /// <summary>
    /// 마켓 이름
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();
    void setName(utility::string_t value);
    /// <summary>
    /// 지원 주문 방식
    /// </summary>
    std::vector<utility::string_t>& getOrderTypes();
    bool orderTypesIsSet() const;
    void unsetOrder_types();
    void setOrderTypes(std::vector<utility::string_t> value);
    /// <summary>
    /// 지원 주문 종류
    /// </summary>
    std::vector<utility::string_t>& getOrderSides();
    bool orderSidesIsSet() const;
    void unsetOrder_sides();
    void setOrderSides(std::vector<utility::string_t> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Bid> getBid() const;
    bool bidIsSet() const;
    void unsetBid();
    void setBid(std::shared_ptr<Bid> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Ask> getAsk() const;
    bool askIsSet() const;
    void unsetAsk();
    void setAsk(std::shared_ptr<Ask> value);
    /// <summary>
    /// 최대 매도/매수 금액
    /// </summary>
    utility::string_t getMaxTotal() const;
    bool maxTotalIsSet() const;
    void unsetMax_total();
    void setMaxTotal(utility::string_t value);
    /// <summary>
    /// 마켓 운영 상태
    /// </summary>
    utility::string_t getState() const;
    bool stateIsSet() const;
    void unsetState();
    void setState(utility::string_t value);

protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    std::vector<utility::string_t> m_Order_types;
    bool m_Order_typesIsSet;
    std::vector<utility::string_t> m_Order_sides;
    bool m_Order_sidesIsSet;
    std::shared_ptr<Bid> m_Bid;
    bool m_BidIsSet;
    std::shared_ptr<Ask> m_Ask;
    bool m_AskIsSet;
    utility::string_t m_Max_total;
    bool m_Max_totalIsSet;
    utility::string_t m_State;
    bool m_StateIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_Market_H_ */
