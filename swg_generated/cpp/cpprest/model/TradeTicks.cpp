/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.18.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "TradeTicks.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

TradeTicks::TradeTicks()
{
    m_Market = utility::conversions::to_string_t("");
    m_MarketIsSet = false;
    m_Trade_date_utc = utility::conversions::to_string_t("");
    m_Trade_date_utcIsSet = false;
    m_Trade_time_utc = utility::conversions::to_string_t("");
    m_Trade_time_utcIsSet = false;
    m_Timestamp = 0.0;
    m_TimestampIsSet = false;
    m_Trade_price = 0.0;
    m_Trade_priceIsSet = false;
    m_Trade_volume = 0.0;
    m_Trade_volumeIsSet = false;
    m_Prev_closing_price = 0.0;
    m_Prev_closing_priceIsSet = false;
    m_Change_price = 0.0;
    m_Change_priceIsSet = false;
    m_Ask_bid = utility::conversions::to_string_t("");
    m_Ask_bidIsSet = false;
    m_Sequential_id = 0.0;
    m_Sequential_idIsSet = false;
}

TradeTicks::~TradeTicks()
{
}

void TradeTicks::validate()
{
    // TODO: implement validation
}

web::json::value TradeTicks::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_MarketIsSet)
    {
        val[utility::conversions::to_string_t("market")] = ModelBase::toJson(m_Market);
    }
    if(m_Trade_date_utcIsSet)
    {
        val[utility::conversions::to_string_t("trade_date_utc")] = ModelBase::toJson(m_Trade_date_utc);
    }
    if(m_Trade_time_utcIsSet)
    {
        val[utility::conversions::to_string_t("trade_time_utc")] = ModelBase::toJson(m_Trade_time_utc);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t("timestamp")] = ModelBase::toJson(m_Timestamp);
    }
    if(m_Trade_priceIsSet)
    {
        val[utility::conversions::to_string_t("trade_price")] = ModelBase::toJson(m_Trade_price);
    }
    if(m_Trade_volumeIsSet)
    {
        val[utility::conversions::to_string_t("trade_volume")] = ModelBase::toJson(m_Trade_volume);
    }
    if(m_Prev_closing_priceIsSet)
    {
        val[utility::conversions::to_string_t("prev_closing_price")] = ModelBase::toJson(m_Prev_closing_price);
    }
    if(m_Change_priceIsSet)
    {
        val[utility::conversions::to_string_t("change_price")] = ModelBase::toJson(m_Change_price);
    }
    if(m_Ask_bidIsSet)
    {
        val[utility::conversions::to_string_t("ask_bid")] = ModelBase::toJson(m_Ask_bid);
    }
    if(m_Sequential_idIsSet)
    {
        val[utility::conversions::to_string_t("sequential_id")] = ModelBase::toJson(m_Sequential_id);
    }

    return val;
}

void TradeTicks::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("market")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("market")];
        if(!fieldValue.is_null())
        {
            setMarket(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trade_date_utc")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("trade_date_utc")];
        if(!fieldValue.is_null())
        {
            setTradeDateUtc(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trade_time_utc")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("trade_time_utc")];
        if(!fieldValue.is_null())
        {
            setTradeTimeUtc(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timestamp")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("timestamp")];
        if(!fieldValue.is_null())
        {
            setTimestamp(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trade_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("trade_price")];
        if(!fieldValue.is_null())
        {
            setTradePrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trade_volume")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("trade_volume")];
        if(!fieldValue.is_null())
        {
            setTradeVolume(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("prev_closing_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("prev_closing_price")];
        if(!fieldValue.is_null())
        {
            setPrevClosingPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("change_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("change_price")];
        if(!fieldValue.is_null())
        {
            setChangePrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ask_bid")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ask_bid")];
        if(!fieldValue.is_null())
        {
            setAskBid(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sequential_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("sequential_id")];
        if(!fieldValue.is_null())
        {
            setSequentialId(ModelBase::doubleFromJson(fieldValue));
        }
    }
}

void TradeTicks::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_MarketIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("market"), m_Market));
        
    }
    if(m_Trade_date_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trade_date_utc"), m_Trade_date_utc));
        
    }
    if(m_Trade_time_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trade_time_utc"), m_Trade_time_utc));
        
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timestamp"), m_Timestamp));
    }
    if(m_Trade_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trade_price"), m_Trade_price));
    }
    if(m_Trade_volumeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trade_volume"), m_Trade_volume));
    }
    if(m_Prev_closing_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("prev_closing_price"), m_Prev_closing_price));
    }
    if(m_Change_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("change_price"), m_Change_price));
    }
    if(m_Ask_bidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ask_bid"), m_Ask_bid));
        
    }
    if(m_Sequential_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sequential_id"), m_Sequential_id));
    }
}

void TradeTicks::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("market")))
    {
        setMarket(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("market"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trade_date_utc")))
    {
        setTradeDateUtc(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("trade_date_utc"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trade_time_utc")))
    {
        setTradeTimeUtc(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("trade_time_utc"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timestamp")))
    {
        setTimestamp(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("timestamp"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trade_price")))
    {
        setTradePrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("trade_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trade_volume")))
    {
        setTradeVolume(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("trade_volume"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("prev_closing_price")))
    {
        setPrevClosingPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("prev_closing_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("change_price")))
    {
        setChangePrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("change_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ask_bid")))
    {
        setAskBid(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ask_bid"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sequential_id")))
    {
        setSequentialId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sequential_id"))));
    }
}

utility::string_t TradeTicks::getMarket() const
{
    return m_Market;
}


void TradeTicks::setMarket(utility::string_t value)
{
    m_Market = value;
    m_MarketIsSet = true;
}
bool TradeTicks::marketIsSet() const
{
    return m_MarketIsSet;
}

void TradeTicks::unsetMarket()
{
    m_MarketIsSet = false;
}

utility::string_t TradeTicks::getTradeDateUtc() const
{
    return m_Trade_date_utc;
}


void TradeTicks::setTradeDateUtc(utility::string_t value)
{
    m_Trade_date_utc = value;
    m_Trade_date_utcIsSet = true;
}
bool TradeTicks::tradeDateUtcIsSet() const
{
    return m_Trade_date_utcIsSet;
}

void TradeTicks::unsetTrade_date_utc()
{
    m_Trade_date_utcIsSet = false;
}

utility::string_t TradeTicks::getTradeTimeUtc() const
{
    return m_Trade_time_utc;
}


void TradeTicks::setTradeTimeUtc(utility::string_t value)
{
    m_Trade_time_utc = value;
    m_Trade_time_utcIsSet = true;
}
bool TradeTicks::tradeTimeUtcIsSet() const
{
    return m_Trade_time_utcIsSet;
}

void TradeTicks::unsetTrade_time_utc()
{
    m_Trade_time_utcIsSet = false;
}

double TradeTicks::getTimestamp() const
{
    return m_Timestamp;
}


void TradeTicks::setTimestamp(double value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}
bool TradeTicks::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void TradeTicks::unsetTimestamp()
{
    m_TimestampIsSet = false;
}

double TradeTicks::getTradePrice() const
{
    return m_Trade_price;
}


void TradeTicks::setTradePrice(double value)
{
    m_Trade_price = value;
    m_Trade_priceIsSet = true;
}
bool TradeTicks::tradePriceIsSet() const
{
    return m_Trade_priceIsSet;
}

void TradeTicks::unsetTrade_price()
{
    m_Trade_priceIsSet = false;
}

double TradeTicks::getTradeVolume() const
{
    return m_Trade_volume;
}


void TradeTicks::setTradeVolume(double value)
{
    m_Trade_volume = value;
    m_Trade_volumeIsSet = true;
}
bool TradeTicks::tradeVolumeIsSet() const
{
    return m_Trade_volumeIsSet;
}

void TradeTicks::unsetTrade_volume()
{
    m_Trade_volumeIsSet = false;
}

double TradeTicks::getPrevClosingPrice() const
{
    return m_Prev_closing_price;
}


void TradeTicks::setPrevClosingPrice(double value)
{
    m_Prev_closing_price = value;
    m_Prev_closing_priceIsSet = true;
}
bool TradeTicks::prevClosingPriceIsSet() const
{
    return m_Prev_closing_priceIsSet;
}

void TradeTicks::unsetPrev_closing_price()
{
    m_Prev_closing_priceIsSet = false;
}

double TradeTicks::getChangePrice() const
{
    return m_Change_price;
}


void TradeTicks::setChangePrice(double value)
{
    m_Change_price = value;
    m_Change_priceIsSet = true;
}
bool TradeTicks::changePriceIsSet() const
{
    return m_Change_priceIsSet;
}

void TradeTicks::unsetChange_price()
{
    m_Change_priceIsSet = false;
}

utility::string_t TradeTicks::getAskBid() const
{
    return m_Ask_bid;
}


void TradeTicks::setAskBid(utility::string_t value)
{
    m_Ask_bid = value;
    m_Ask_bidIsSet = true;
}
bool TradeTicks::askBidIsSet() const
{
    return m_Ask_bidIsSet;
}

void TradeTicks::unsetAsk_bid()
{
    m_Ask_bidIsSet = false;
}

double TradeTicks::getSequentialId() const
{
    return m_Sequential_id;
}


void TradeTicks::setSequentialId(double value)
{
    m_Sequential_id = value;
    m_Sequential_idIsSet = true;
}
bool TradeTicks::sequentialIdIsSet() const
{
    return m_Sequential_idIsSet;
}

void TradeTicks::unsetSequential_id()
{
    m_Sequential_idIsSet = false;
}

}
}
}
}

