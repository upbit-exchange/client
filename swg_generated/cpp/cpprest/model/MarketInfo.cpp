/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.18.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "MarketInfo.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

MarketInfo::MarketInfo()
{
    m_Market = utility::conversions::to_string_t("");
    m_MarketIsSet = false;
    m_Korean_name = utility::conversions::to_string_t("");
    m_Korean_nameIsSet = false;
    m_English_name = utility::conversions::to_string_t("");
    m_English_nameIsSet = false;
    m_Market_warning = utility::conversions::to_string_t("");
    m_Market_warningIsSet = false;
}

MarketInfo::~MarketInfo()
{
}

void MarketInfo::validate()
{
    // TODO: implement validation
}

web::json::value MarketInfo::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_MarketIsSet)
    {
        val[utility::conversions::to_string_t("market")] = ModelBase::toJson(m_Market);
    }
    if(m_Korean_nameIsSet)
    {
        val[utility::conversions::to_string_t("korean_name")] = ModelBase::toJson(m_Korean_name);
    }
    if(m_English_nameIsSet)
    {
        val[utility::conversions::to_string_t("english_name")] = ModelBase::toJson(m_English_name);
    }
    if(m_Market_warningIsSet)
    {
        val[utility::conversions::to_string_t("market_warning")] = ModelBase::toJson(m_Market_warning);
    }

    return val;
}

void MarketInfo::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("market")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("market")];
        if(!fieldValue.is_null())
        {
            setMarket(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("korean_name")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("korean_name")];
        if(!fieldValue.is_null())
        {
            setKoreanName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("english_name")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("english_name")];
        if(!fieldValue.is_null())
        {
            setEnglishName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("market_warning")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("market_warning")];
        if(!fieldValue.is_null())
        {
            setMarketWarning(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void MarketInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_MarketIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("market"), m_Market));
        
    }
    if(m_Korean_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("korean_name"), m_Korean_name));
        
    }
    if(m_English_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("english_name"), m_English_name));
        
    }
    if(m_Market_warningIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("market_warning"), m_Market_warning));
        
    }
}

void MarketInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("market")))
    {
        setMarket(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("market"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("korean_name")))
    {
        setKoreanName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("korean_name"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("english_name")))
    {
        setEnglishName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("english_name"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("market_warning")))
    {
        setMarketWarning(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("market_warning"))));
    }
}

utility::string_t MarketInfo::getMarket() const
{
    return m_Market;
}


void MarketInfo::setMarket(utility::string_t value)
{
    m_Market = value;
    m_MarketIsSet = true;
}
bool MarketInfo::marketIsSet() const
{
    return m_MarketIsSet;
}

void MarketInfo::unsetMarket()
{
    m_MarketIsSet = false;
}

utility::string_t MarketInfo::getKoreanName() const
{
    return m_Korean_name;
}


void MarketInfo::setKoreanName(utility::string_t value)
{
    m_Korean_name = value;
    m_Korean_nameIsSet = true;
}
bool MarketInfo::koreanNameIsSet() const
{
    return m_Korean_nameIsSet;
}

void MarketInfo::unsetKorean_name()
{
    m_Korean_nameIsSet = false;
}

utility::string_t MarketInfo::getEnglishName() const
{
    return m_English_name;
}


void MarketInfo::setEnglishName(utility::string_t value)
{
    m_English_name = value;
    m_English_nameIsSet = true;
}
bool MarketInfo::englishNameIsSet() const
{
    return m_English_nameIsSet;
}

void MarketInfo::unsetEnglish_name()
{
    m_English_nameIsSet = false;
}

utility::string_t MarketInfo::getMarketWarning() const
{
    return m_Market_warning;
}


void MarketInfo::setMarketWarning(utility::string_t value)
{
    m_Market_warning = value;
    m_Market_warningIsSet = true;
}
bool MarketInfo::marketWarningIsSet() const
{
    return m_Market_warningIsSet;
}

void MarketInfo::unsetMarket_warning()
{
    m_Market_warningIsSet = false;
}

}
}
}
}

