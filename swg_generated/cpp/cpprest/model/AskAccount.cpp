/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.18.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "AskAccount.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

AskAccount::AskAccount()
{
    m_Currency = utility::conversions::to_string_t("");
    m_CurrencyIsSet = false;
    m_Balance = utility::conversions::to_string_t("");
    m_BalanceIsSet = false;
    m_Locked = utility::conversions::to_string_t("");
    m_LockedIsSet = false;
    m_Avg_buy_price = utility::conversions::to_string_t("");
    m_Avg_buy_priceIsSet = false;
    m_Avg_buy_price_modified = false;
    m_Avg_buy_price_modifiedIsSet = false;
    m_Unit_currency = utility::conversions::to_string_t("");
    m_Unit_currencyIsSet = false;
}

AskAccount::~AskAccount()
{
}

void AskAccount::validate()
{
    // TODO: implement validation
}

web::json::value AskAccount::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CurrencyIsSet)
    {
        val[utility::conversions::to_string_t("currency")] = ModelBase::toJson(m_Currency);
    }
    if(m_BalanceIsSet)
    {
        val[utility::conversions::to_string_t("balance")] = ModelBase::toJson(m_Balance);
    }
    if(m_LockedIsSet)
    {
        val[utility::conversions::to_string_t("locked")] = ModelBase::toJson(m_Locked);
    }
    if(m_Avg_buy_priceIsSet)
    {
        val[utility::conversions::to_string_t("avg_buy_price")] = ModelBase::toJson(m_Avg_buy_price);
    }
    if(m_Avg_buy_price_modifiedIsSet)
    {
        val[utility::conversions::to_string_t("avg_buy_price_modified")] = ModelBase::toJson(m_Avg_buy_price_modified);
    }
    if(m_Unit_currencyIsSet)
    {
        val[utility::conversions::to_string_t("unit_currency")] = ModelBase::toJson(m_Unit_currency);
    }

    return val;
}

void AskAccount::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("currency")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("currency")];
        if(!fieldValue.is_null())
        {
            setCurrency(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("balance")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("balance")];
        if(!fieldValue.is_null())
        {
            setBalance(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("locked")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("locked")];
        if(!fieldValue.is_null())
        {
            setLocked(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("avg_buy_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("avg_buy_price")];
        if(!fieldValue.is_null())
        {
            setAvgBuyPrice(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("avg_buy_price_modified")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("avg_buy_price_modified")];
        if(!fieldValue.is_null())
        {
            setAvgBuyPriceModified(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unit_currency")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("unit_currency")];
        if(!fieldValue.is_null())
        {
            setUnitCurrency(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void AskAccount::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("currency"), m_Currency));
        
    }
    if(m_BalanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("balance"), m_Balance));
        
    }
    if(m_LockedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("locked"), m_Locked));
        
    }
    if(m_Avg_buy_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("avg_buy_price"), m_Avg_buy_price));
        
    }
    if(m_Avg_buy_price_modifiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("avg_buy_price_modified"), m_Avg_buy_price_modified));
    }
    if(m_Unit_currencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unit_currency"), m_Unit_currency));
        
    }
}

void AskAccount::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("currency")))
    {
        setCurrency(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("currency"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("balance")))
    {
        setBalance(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("balance"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("locked")))
    {
        setLocked(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("locked"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("avg_buy_price")))
    {
        setAvgBuyPrice(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("avg_buy_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("avg_buy_price_modified")))
    {
        setAvgBuyPriceModified(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("avg_buy_price_modified"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unit_currency")))
    {
        setUnitCurrency(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("unit_currency"))));
    }
}

utility::string_t AskAccount::getCurrency() const
{
    return m_Currency;
}


void AskAccount::setCurrency(utility::string_t value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}
bool AskAccount::currencyIsSet() const
{
    return m_CurrencyIsSet;
}

void AskAccount::unsetCurrency()
{
    m_CurrencyIsSet = false;
}

utility::string_t AskAccount::getBalance() const
{
    return m_Balance;
}


void AskAccount::setBalance(utility::string_t value)
{
    m_Balance = value;
    m_BalanceIsSet = true;
}
bool AskAccount::balanceIsSet() const
{
    return m_BalanceIsSet;
}

void AskAccount::unsetBalance()
{
    m_BalanceIsSet = false;
}

utility::string_t AskAccount::getLocked() const
{
    return m_Locked;
}


void AskAccount::setLocked(utility::string_t value)
{
    m_Locked = value;
    m_LockedIsSet = true;
}
bool AskAccount::lockedIsSet() const
{
    return m_LockedIsSet;
}

void AskAccount::unsetLocked()
{
    m_LockedIsSet = false;
}

utility::string_t AskAccount::getAvgBuyPrice() const
{
    return m_Avg_buy_price;
}


void AskAccount::setAvgBuyPrice(utility::string_t value)
{
    m_Avg_buy_price = value;
    m_Avg_buy_priceIsSet = true;
}
bool AskAccount::avgBuyPriceIsSet() const
{
    return m_Avg_buy_priceIsSet;
}

void AskAccount::unsetAvg_buy_price()
{
    m_Avg_buy_priceIsSet = false;
}

bool AskAccount::isAvgBuyPriceModified() const
{
    return m_Avg_buy_price_modified;
}


void AskAccount::setAvgBuyPriceModified(bool value)
{
    m_Avg_buy_price_modified = value;
    m_Avg_buy_price_modifiedIsSet = true;
}
bool AskAccount::avgBuyPriceModifiedIsSet() const
{
    return m_Avg_buy_price_modifiedIsSet;
}

void AskAccount::unsetAvg_buy_price_modified()
{
    m_Avg_buy_price_modifiedIsSet = false;
}

utility::string_t AskAccount::getUnitCurrency() const
{
    return m_Unit_currency;
}


void AskAccount::setUnitCurrency(utility::string_t value)
{
    m_Unit_currency = value;
    m_Unit_currencyIsSet = true;
}
bool AskAccount::unitCurrencyIsSet() const
{
    return m_Unit_currencyIsSet;
}

void AskAccount::unsetUnit_currency()
{
    m_Unit_currencyIsSet = false;
}

}
}
}
}

