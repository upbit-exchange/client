/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.18.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Currency.h
 *
 * 화폐 정보
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_Currency_H_
#define IO_SWAGGER_CLIENT_MODEL_Currency_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 화폐 정보
/// </summary>
class  Currency
    : public ModelBase
{
public:
    Currency();
    virtual ~Currency();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Currency members

    /// <summary>
    /// 화폐를 의미하는 영문 대문자 코드
    /// </summary>
    utility::string_t getCode() const;
    bool codeIsSet() const;
    void unsetCode();
    void setCode(utility::string_t value);
    /// <summary>
    /// 해당 화폐의 출금 수수료
    /// </summary>
    utility::string_t getWithdrawFee() const;
    bool withdrawFeeIsSet() const;
    void unsetWithdraw_fee();
    void setWithdrawFee(utility::string_t value);
    /// <summary>
    /// 화폐의 코인 여부
    /// </summary>
    bool isIsCoin() const;
    bool isCoinIsSet() const;
    void unsetIs_coin();
    void setIsCoin(bool value);
    /// <summary>
    /// 해당 화폐의 지갑 상태
    /// </summary>
    utility::string_t getWalletState() const;
    bool walletStateIsSet() const;
    void unsetWallet_state();
    void setWalletState(utility::string_t value);
    /// <summary>
    /// 해당 화폐가 지원하는 입출금 정보
    /// </summary>
    std::vector<utility::string_t>& getWalletSupport();
    bool walletSupportIsSet() const;
    void unsetWallet_support();
    void setWalletSupport(std::vector<utility::string_t> value);

protected:
    utility::string_t m_Code;
    bool m_CodeIsSet;
    utility::string_t m_Withdraw_fee;
    bool m_Withdraw_feeIsSet;
    bool m_Is_coin;
    bool m_Is_coinIsSet;
    utility::string_t m_Wallet_state;
    bool m_Wallet_stateIsSet;
    std::vector<utility::string_t> m_Wallet_support;
    bool m_Wallet_supportIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_Currency_H_ */
