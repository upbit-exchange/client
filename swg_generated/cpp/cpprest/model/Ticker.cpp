/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.18.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Ticker.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Ticker::Ticker()
{
    m_Market = utility::conversions::to_string_t("");
    m_MarketIsSet = false;
    m_Trade_date = utility::conversions::to_string_t("");
    m_Trade_dateIsSet = false;
    m_Trade_time = utility::conversions::to_string_t("");
    m_Trade_timeIsSet = false;
    m_Trade_date_kst = utility::conversions::to_string_t("");
    m_Trade_date_kstIsSet = false;
    m_Trade_time_kst = utility::conversions::to_string_t("");
    m_Trade_time_kstIsSet = false;
    m_Opening_price = 0.0;
    m_Opening_priceIsSet = false;
    m_High_price = 0.0;
    m_High_priceIsSet = false;
    m_Low_price = 0.0;
    m_Low_priceIsSet = false;
    m_Trade_price = 0.0;
    m_Trade_priceIsSet = false;
    m_Prev_closing_price = 0.0;
    m_Prev_closing_priceIsSet = false;
    m_Change = utility::conversions::to_string_t("");
    m_ChangeIsSet = false;
    m_Change_price = 0.0;
    m_Change_priceIsSet = false;
    m_Change_rate = 0.0;
    m_Change_rateIsSet = false;
    m_Signed_change_price = 0.0;
    m_Signed_change_priceIsSet = false;
    m_Signed_change_rate = 0.0;
    m_Signed_change_rateIsSet = false;
    m_Trade_volume = 0.0;
    m_Trade_volumeIsSet = false;
    m_Acc_trade_price = 0.0;
    m_Acc_trade_priceIsSet = false;
    m_Acc_trade_price_24h = 0.0;
    m_Acc_trade_price_24hIsSet = false;
    m_Acc_trade_volume = 0.0;
    m_Acc_trade_volumeIsSet = false;
    m_Acc_trade_volume_24h = 0.0;
    m_Acc_trade_volume_24hIsSet = false;
    m_Highest_52_week_price = 0.0;
    m_Highest_52_week_priceIsSet = false;
    m_Highest_52_week_date = utility::conversions::to_string_t("");
    m_Highest_52_week_dateIsSet = false;
    m_Lowest_52_week_price = 0.0;
    m_Lowest_52_week_priceIsSet = false;
    m_Lowest_52_week_date = utility::conversions::to_string_t("");
    m_Lowest_52_week_dateIsSet = false;
    m_Timestamp = 0.0;
    m_TimestampIsSet = false;
}

Ticker::~Ticker()
{
}

void Ticker::validate()
{
    // TODO: implement validation
}

web::json::value Ticker::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_MarketIsSet)
    {
        val[utility::conversions::to_string_t("market")] = ModelBase::toJson(m_Market);
    }
    if(m_Trade_dateIsSet)
    {
        val[utility::conversions::to_string_t("trade_date")] = ModelBase::toJson(m_Trade_date);
    }
    if(m_Trade_timeIsSet)
    {
        val[utility::conversions::to_string_t("trade_time")] = ModelBase::toJson(m_Trade_time);
    }
    if(m_Trade_date_kstIsSet)
    {
        val[utility::conversions::to_string_t("trade_date_kst")] = ModelBase::toJson(m_Trade_date_kst);
    }
    if(m_Trade_time_kstIsSet)
    {
        val[utility::conversions::to_string_t("trade_time_kst")] = ModelBase::toJson(m_Trade_time_kst);
    }
    if(m_Opening_priceIsSet)
    {
        val[utility::conversions::to_string_t("opening_price")] = ModelBase::toJson(m_Opening_price);
    }
    if(m_High_priceIsSet)
    {
        val[utility::conversions::to_string_t("high_price")] = ModelBase::toJson(m_High_price);
    }
    if(m_Low_priceIsSet)
    {
        val[utility::conversions::to_string_t("low_price")] = ModelBase::toJson(m_Low_price);
    }
    if(m_Trade_priceIsSet)
    {
        val[utility::conversions::to_string_t("trade_price")] = ModelBase::toJson(m_Trade_price);
    }
    if(m_Prev_closing_priceIsSet)
    {
        val[utility::conversions::to_string_t("prev_closing_price")] = ModelBase::toJson(m_Prev_closing_price);
    }
    if(m_ChangeIsSet)
    {
        val[utility::conversions::to_string_t("change")] = ModelBase::toJson(m_Change);
    }
    if(m_Change_priceIsSet)
    {
        val[utility::conversions::to_string_t("change_price")] = ModelBase::toJson(m_Change_price);
    }
    if(m_Change_rateIsSet)
    {
        val[utility::conversions::to_string_t("change_rate")] = ModelBase::toJson(m_Change_rate);
    }
    if(m_Signed_change_priceIsSet)
    {
        val[utility::conversions::to_string_t("signed_change_price")] = ModelBase::toJson(m_Signed_change_price);
    }
    if(m_Signed_change_rateIsSet)
    {
        val[utility::conversions::to_string_t("signed_change_rate")] = ModelBase::toJson(m_Signed_change_rate);
    }
    if(m_Trade_volumeIsSet)
    {
        val[utility::conversions::to_string_t("trade_volume")] = ModelBase::toJson(m_Trade_volume);
    }
    if(m_Acc_trade_priceIsSet)
    {
        val[utility::conversions::to_string_t("acc_trade_price")] = ModelBase::toJson(m_Acc_trade_price);
    }
    if(m_Acc_trade_price_24hIsSet)
    {
        val[utility::conversions::to_string_t("acc_trade_price_24h")] = ModelBase::toJson(m_Acc_trade_price_24h);
    }
    if(m_Acc_trade_volumeIsSet)
    {
        val[utility::conversions::to_string_t("acc_trade_volume")] = ModelBase::toJson(m_Acc_trade_volume);
    }
    if(m_Acc_trade_volume_24hIsSet)
    {
        val[utility::conversions::to_string_t("acc_trade_volume_24h")] = ModelBase::toJson(m_Acc_trade_volume_24h);
    }
    if(m_Highest_52_week_priceIsSet)
    {
        val[utility::conversions::to_string_t("highest_52_week_price")] = ModelBase::toJson(m_Highest_52_week_price);
    }
    if(m_Highest_52_week_dateIsSet)
    {
        val[utility::conversions::to_string_t("highest_52_week_date")] = ModelBase::toJson(m_Highest_52_week_date);
    }
    if(m_Lowest_52_week_priceIsSet)
    {
        val[utility::conversions::to_string_t("lowest_52_week_price")] = ModelBase::toJson(m_Lowest_52_week_price);
    }
    if(m_Lowest_52_week_dateIsSet)
    {
        val[utility::conversions::to_string_t("lowest_52_week_date")] = ModelBase::toJson(m_Lowest_52_week_date);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t("timestamp")] = ModelBase::toJson(m_Timestamp);
    }

    return val;
}

void Ticker::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("market")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("market")];
        if(!fieldValue.is_null())
        {
            setMarket(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trade_date")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("trade_date")];
        if(!fieldValue.is_null())
        {
            setTradeDate(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trade_time")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("trade_time")];
        if(!fieldValue.is_null())
        {
            setTradeTime(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trade_date_kst")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("trade_date_kst")];
        if(!fieldValue.is_null())
        {
            setTradeDateKst(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trade_time_kst")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("trade_time_kst")];
        if(!fieldValue.is_null())
        {
            setTradeTimeKst(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("opening_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("opening_price")];
        if(!fieldValue.is_null())
        {
            setOpeningPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("high_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("high_price")];
        if(!fieldValue.is_null())
        {
            setHighPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("low_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("low_price")];
        if(!fieldValue.is_null())
        {
            setLowPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trade_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("trade_price")];
        if(!fieldValue.is_null())
        {
            setTradePrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("prev_closing_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("prev_closing_price")];
        if(!fieldValue.is_null())
        {
            setPrevClosingPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("change")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("change")];
        if(!fieldValue.is_null())
        {
            setChange(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("change_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("change_price")];
        if(!fieldValue.is_null())
        {
            setChangePrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("change_rate")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("change_rate")];
        if(!fieldValue.is_null())
        {
            setChangeRate(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("signed_change_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("signed_change_price")];
        if(!fieldValue.is_null())
        {
            setSignedChangePrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("signed_change_rate")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("signed_change_rate")];
        if(!fieldValue.is_null())
        {
            setSignedChangeRate(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trade_volume")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("trade_volume")];
        if(!fieldValue.is_null())
        {
            setTradeVolume(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("acc_trade_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("acc_trade_price")];
        if(!fieldValue.is_null())
        {
            setAccTradePrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("acc_trade_price_24h")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("acc_trade_price_24h")];
        if(!fieldValue.is_null())
        {
            setAccTradePrice24h(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("acc_trade_volume")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("acc_trade_volume")];
        if(!fieldValue.is_null())
        {
            setAccTradeVolume(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("acc_trade_volume_24h")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("acc_trade_volume_24h")];
        if(!fieldValue.is_null())
        {
            setAccTradeVolume24h(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("highest_52_week_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("highest_52_week_price")];
        if(!fieldValue.is_null())
        {
            setHighest52WeekPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("highest_52_week_date")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("highest_52_week_date")];
        if(!fieldValue.is_null())
        {
            setHighest52WeekDate(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lowest_52_week_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("lowest_52_week_price")];
        if(!fieldValue.is_null())
        {
            setLowest52WeekPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lowest_52_week_date")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("lowest_52_week_date")];
        if(!fieldValue.is_null())
        {
            setLowest52WeekDate(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timestamp")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("timestamp")];
        if(!fieldValue.is_null())
        {
            setTimestamp(ModelBase::doubleFromJson(fieldValue));
        }
    }
}

void Ticker::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_MarketIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("market"), m_Market));
        
    }
    if(m_Trade_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trade_date"), m_Trade_date));
        
    }
    if(m_Trade_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trade_time"), m_Trade_time));
        
    }
    if(m_Trade_date_kstIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trade_date_kst"), m_Trade_date_kst));
        
    }
    if(m_Trade_time_kstIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trade_time_kst"), m_Trade_time_kst));
        
    }
    if(m_Opening_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("opening_price"), m_Opening_price));
    }
    if(m_High_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("high_price"), m_High_price));
    }
    if(m_Low_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("low_price"), m_Low_price));
    }
    if(m_Trade_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trade_price"), m_Trade_price));
    }
    if(m_Prev_closing_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("prev_closing_price"), m_Prev_closing_price));
    }
    if(m_ChangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("change"), m_Change));
        
    }
    if(m_Change_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("change_price"), m_Change_price));
    }
    if(m_Change_rateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("change_rate"), m_Change_rate));
    }
    if(m_Signed_change_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("signed_change_price"), m_Signed_change_price));
    }
    if(m_Signed_change_rateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("signed_change_rate"), m_Signed_change_rate));
    }
    if(m_Trade_volumeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trade_volume"), m_Trade_volume));
    }
    if(m_Acc_trade_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("acc_trade_price"), m_Acc_trade_price));
    }
    if(m_Acc_trade_price_24hIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("acc_trade_price_24h"), m_Acc_trade_price_24h));
    }
    if(m_Acc_trade_volumeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("acc_trade_volume"), m_Acc_trade_volume));
    }
    if(m_Acc_trade_volume_24hIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("acc_trade_volume_24h"), m_Acc_trade_volume_24h));
    }
    if(m_Highest_52_week_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("highest_52_week_price"), m_Highest_52_week_price));
    }
    if(m_Highest_52_week_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("highest_52_week_date"), m_Highest_52_week_date));
        
    }
    if(m_Lowest_52_week_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lowest_52_week_price"), m_Lowest_52_week_price));
    }
    if(m_Lowest_52_week_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lowest_52_week_date"), m_Lowest_52_week_date));
        
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timestamp"), m_Timestamp));
    }
}

void Ticker::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("market")))
    {
        setMarket(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("market"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trade_date")))
    {
        setTradeDate(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("trade_date"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trade_time")))
    {
        setTradeTime(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("trade_time"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trade_date_kst")))
    {
        setTradeDateKst(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("trade_date_kst"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trade_time_kst")))
    {
        setTradeTimeKst(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("trade_time_kst"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("opening_price")))
    {
        setOpeningPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("opening_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("high_price")))
    {
        setHighPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("high_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("low_price")))
    {
        setLowPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("low_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trade_price")))
    {
        setTradePrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("trade_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("prev_closing_price")))
    {
        setPrevClosingPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("prev_closing_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("change")))
    {
        setChange(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("change"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("change_price")))
    {
        setChangePrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("change_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("change_rate")))
    {
        setChangeRate(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("change_rate"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("signed_change_price")))
    {
        setSignedChangePrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("signed_change_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("signed_change_rate")))
    {
        setSignedChangeRate(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("signed_change_rate"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trade_volume")))
    {
        setTradeVolume(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("trade_volume"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("acc_trade_price")))
    {
        setAccTradePrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("acc_trade_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("acc_trade_price_24h")))
    {
        setAccTradePrice24h(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("acc_trade_price_24h"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("acc_trade_volume")))
    {
        setAccTradeVolume(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("acc_trade_volume"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("acc_trade_volume_24h")))
    {
        setAccTradeVolume24h(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("acc_trade_volume_24h"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("highest_52_week_price")))
    {
        setHighest52WeekPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("highest_52_week_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("highest_52_week_date")))
    {
        setHighest52WeekDate(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("highest_52_week_date"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lowest_52_week_price")))
    {
        setLowest52WeekPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lowest_52_week_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lowest_52_week_date")))
    {
        setLowest52WeekDate(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lowest_52_week_date"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timestamp")))
    {
        setTimestamp(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("timestamp"))));
    }
}

utility::string_t Ticker::getMarket() const
{
    return m_Market;
}


void Ticker::setMarket(utility::string_t value)
{
    m_Market = value;
    m_MarketIsSet = true;
}
bool Ticker::marketIsSet() const
{
    return m_MarketIsSet;
}

void Ticker::unsetMarket()
{
    m_MarketIsSet = false;
}

utility::string_t Ticker::getTradeDate() const
{
    return m_Trade_date;
}


void Ticker::setTradeDate(utility::string_t value)
{
    m_Trade_date = value;
    m_Trade_dateIsSet = true;
}
bool Ticker::tradeDateIsSet() const
{
    return m_Trade_dateIsSet;
}

void Ticker::unsetTrade_date()
{
    m_Trade_dateIsSet = false;
}

utility::string_t Ticker::getTradeTime() const
{
    return m_Trade_time;
}


void Ticker::setTradeTime(utility::string_t value)
{
    m_Trade_time = value;
    m_Trade_timeIsSet = true;
}
bool Ticker::tradeTimeIsSet() const
{
    return m_Trade_timeIsSet;
}

void Ticker::unsetTrade_time()
{
    m_Trade_timeIsSet = false;
}

utility::string_t Ticker::getTradeDateKst() const
{
    return m_Trade_date_kst;
}


void Ticker::setTradeDateKst(utility::string_t value)
{
    m_Trade_date_kst = value;
    m_Trade_date_kstIsSet = true;
}
bool Ticker::tradeDateKstIsSet() const
{
    return m_Trade_date_kstIsSet;
}

void Ticker::unsetTrade_date_kst()
{
    m_Trade_date_kstIsSet = false;
}

utility::string_t Ticker::getTradeTimeKst() const
{
    return m_Trade_time_kst;
}


void Ticker::setTradeTimeKst(utility::string_t value)
{
    m_Trade_time_kst = value;
    m_Trade_time_kstIsSet = true;
}
bool Ticker::tradeTimeKstIsSet() const
{
    return m_Trade_time_kstIsSet;
}

void Ticker::unsetTrade_time_kst()
{
    m_Trade_time_kstIsSet = false;
}

double Ticker::getOpeningPrice() const
{
    return m_Opening_price;
}


void Ticker::setOpeningPrice(double value)
{
    m_Opening_price = value;
    m_Opening_priceIsSet = true;
}
bool Ticker::openingPriceIsSet() const
{
    return m_Opening_priceIsSet;
}

void Ticker::unsetOpening_price()
{
    m_Opening_priceIsSet = false;
}

double Ticker::getHighPrice() const
{
    return m_High_price;
}


void Ticker::setHighPrice(double value)
{
    m_High_price = value;
    m_High_priceIsSet = true;
}
bool Ticker::highPriceIsSet() const
{
    return m_High_priceIsSet;
}

void Ticker::unsetHigh_price()
{
    m_High_priceIsSet = false;
}

double Ticker::getLowPrice() const
{
    return m_Low_price;
}


void Ticker::setLowPrice(double value)
{
    m_Low_price = value;
    m_Low_priceIsSet = true;
}
bool Ticker::lowPriceIsSet() const
{
    return m_Low_priceIsSet;
}

void Ticker::unsetLow_price()
{
    m_Low_priceIsSet = false;
}

double Ticker::getTradePrice() const
{
    return m_Trade_price;
}


void Ticker::setTradePrice(double value)
{
    m_Trade_price = value;
    m_Trade_priceIsSet = true;
}
bool Ticker::tradePriceIsSet() const
{
    return m_Trade_priceIsSet;
}

void Ticker::unsetTrade_price()
{
    m_Trade_priceIsSet = false;
}

double Ticker::getPrevClosingPrice() const
{
    return m_Prev_closing_price;
}


void Ticker::setPrevClosingPrice(double value)
{
    m_Prev_closing_price = value;
    m_Prev_closing_priceIsSet = true;
}
bool Ticker::prevClosingPriceIsSet() const
{
    return m_Prev_closing_priceIsSet;
}

void Ticker::unsetPrev_closing_price()
{
    m_Prev_closing_priceIsSet = false;
}

utility::string_t Ticker::getChange() const
{
    return m_Change;
}


void Ticker::setChange(utility::string_t value)
{
    m_Change = value;
    m_ChangeIsSet = true;
}
bool Ticker::changeIsSet() const
{
    return m_ChangeIsSet;
}

void Ticker::unsetChange()
{
    m_ChangeIsSet = false;
}

double Ticker::getChangePrice() const
{
    return m_Change_price;
}


void Ticker::setChangePrice(double value)
{
    m_Change_price = value;
    m_Change_priceIsSet = true;
}
bool Ticker::changePriceIsSet() const
{
    return m_Change_priceIsSet;
}

void Ticker::unsetChange_price()
{
    m_Change_priceIsSet = false;
}

double Ticker::getChangeRate() const
{
    return m_Change_rate;
}


void Ticker::setChangeRate(double value)
{
    m_Change_rate = value;
    m_Change_rateIsSet = true;
}
bool Ticker::changeRateIsSet() const
{
    return m_Change_rateIsSet;
}

void Ticker::unsetChange_rate()
{
    m_Change_rateIsSet = false;
}

double Ticker::getSignedChangePrice() const
{
    return m_Signed_change_price;
}


void Ticker::setSignedChangePrice(double value)
{
    m_Signed_change_price = value;
    m_Signed_change_priceIsSet = true;
}
bool Ticker::signedChangePriceIsSet() const
{
    return m_Signed_change_priceIsSet;
}

void Ticker::unsetSigned_change_price()
{
    m_Signed_change_priceIsSet = false;
}

double Ticker::getSignedChangeRate() const
{
    return m_Signed_change_rate;
}


void Ticker::setSignedChangeRate(double value)
{
    m_Signed_change_rate = value;
    m_Signed_change_rateIsSet = true;
}
bool Ticker::signedChangeRateIsSet() const
{
    return m_Signed_change_rateIsSet;
}

void Ticker::unsetSigned_change_rate()
{
    m_Signed_change_rateIsSet = false;
}

double Ticker::getTradeVolume() const
{
    return m_Trade_volume;
}


void Ticker::setTradeVolume(double value)
{
    m_Trade_volume = value;
    m_Trade_volumeIsSet = true;
}
bool Ticker::tradeVolumeIsSet() const
{
    return m_Trade_volumeIsSet;
}

void Ticker::unsetTrade_volume()
{
    m_Trade_volumeIsSet = false;
}

double Ticker::getAccTradePrice() const
{
    return m_Acc_trade_price;
}


void Ticker::setAccTradePrice(double value)
{
    m_Acc_trade_price = value;
    m_Acc_trade_priceIsSet = true;
}
bool Ticker::accTradePriceIsSet() const
{
    return m_Acc_trade_priceIsSet;
}

void Ticker::unsetAcc_trade_price()
{
    m_Acc_trade_priceIsSet = false;
}

double Ticker::getAccTradePrice24h() const
{
    return m_Acc_trade_price_24h;
}


void Ticker::setAccTradePrice24h(double value)
{
    m_Acc_trade_price_24h = value;
    m_Acc_trade_price_24hIsSet = true;
}
bool Ticker::accTradePrice24hIsSet() const
{
    return m_Acc_trade_price_24hIsSet;
}

void Ticker::unsetAcc_trade_price_24h()
{
    m_Acc_trade_price_24hIsSet = false;
}

double Ticker::getAccTradeVolume() const
{
    return m_Acc_trade_volume;
}


void Ticker::setAccTradeVolume(double value)
{
    m_Acc_trade_volume = value;
    m_Acc_trade_volumeIsSet = true;
}
bool Ticker::accTradeVolumeIsSet() const
{
    return m_Acc_trade_volumeIsSet;
}

void Ticker::unsetAcc_trade_volume()
{
    m_Acc_trade_volumeIsSet = false;
}

double Ticker::getAccTradeVolume24h() const
{
    return m_Acc_trade_volume_24h;
}


void Ticker::setAccTradeVolume24h(double value)
{
    m_Acc_trade_volume_24h = value;
    m_Acc_trade_volume_24hIsSet = true;
}
bool Ticker::accTradeVolume24hIsSet() const
{
    return m_Acc_trade_volume_24hIsSet;
}

void Ticker::unsetAcc_trade_volume_24h()
{
    m_Acc_trade_volume_24hIsSet = false;
}

double Ticker::getHighest52WeekPrice() const
{
    return m_Highest_52_week_price;
}


void Ticker::setHighest52WeekPrice(double value)
{
    m_Highest_52_week_price = value;
    m_Highest_52_week_priceIsSet = true;
}
bool Ticker::highest52WeekPriceIsSet() const
{
    return m_Highest_52_week_priceIsSet;
}

void Ticker::unsetHighest_52_week_price()
{
    m_Highest_52_week_priceIsSet = false;
}

utility::string_t Ticker::getHighest52WeekDate() const
{
    return m_Highest_52_week_date;
}


void Ticker::setHighest52WeekDate(utility::string_t value)
{
    m_Highest_52_week_date = value;
    m_Highest_52_week_dateIsSet = true;
}
bool Ticker::highest52WeekDateIsSet() const
{
    return m_Highest_52_week_dateIsSet;
}

void Ticker::unsetHighest_52_week_date()
{
    m_Highest_52_week_dateIsSet = false;
}

double Ticker::getLowest52WeekPrice() const
{
    return m_Lowest_52_week_price;
}


void Ticker::setLowest52WeekPrice(double value)
{
    m_Lowest_52_week_price = value;
    m_Lowest_52_week_priceIsSet = true;
}
bool Ticker::lowest52WeekPriceIsSet() const
{
    return m_Lowest_52_week_priceIsSet;
}

void Ticker::unsetLowest_52_week_price()
{
    m_Lowest_52_week_priceIsSet = false;
}

utility::string_t Ticker::getLowest52WeekDate() const
{
    return m_Lowest_52_week_date;
}


void Ticker::setLowest52WeekDate(utility::string_t value)
{
    m_Lowest_52_week_date = value;
    m_Lowest_52_week_dateIsSet = true;
}
bool Ticker::lowest52WeekDateIsSet() const
{
    return m_Lowest_52_week_dateIsSet;
}

void Ticker::unsetLowest_52_week_date()
{
    m_Lowest_52_week_dateIsSet = false;
}

double Ticker::getTimestamp() const
{
    return m_Timestamp;
}


void Ticker::setTimestamp(double value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}
bool Ticker::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Ticker::unsetTimestamp()
{
    m_TimestampIsSet = false;
}

}
}
}
}

