/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.18.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Account.h
 *
 * 사용자의 계좌 정보
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_Account_H_
#define IO_SWAGGER_CLIENT_MODEL_Account_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 사용자의 계좌 정보
/// </summary>
class  Account
    : public ModelBase
{
public:
    Account();
    virtual ~Account();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Account members

    /// <summary>
    /// 화폐를 의미하는 영문 대문자 코드
    /// </summary>
    utility::string_t getCurrency() const;
    bool currencyIsSet() const;
    void unsetCurrency();
    void setCurrency(utility::string_t value);
    /// <summary>
    /// 주문가능 금액/수량
    /// </summary>
    utility::string_t getBalance() const;
    bool balanceIsSet() const;
    void unsetBalance();
    void setBalance(utility::string_t value);
    /// <summary>
    /// 주문 중 묶여있는 금액/수량
    /// </summary>
    utility::string_t getLocked() const;
    bool lockedIsSet() const;
    void unsetLocked();
    void setLocked(utility::string_t value);
    /// <summary>
    /// 매수평균가
    /// </summary>
    utility::string_t getAvgBuyPrice() const;
    bool avgBuyPriceIsSet() const;
    void unsetAvg_buy_price();
    void setAvgBuyPrice(utility::string_t value);
    /// <summary>
    /// 매수평균가 수정 여부
    /// </summary>
    bool isAvgBuyPriceModified() const;
    bool avgBuyPriceModifiedIsSet() const;
    void unsetAvg_buy_price_modified();
    void setAvgBuyPriceModified(bool value);
    /// <summary>
    /// 평단가 기준 화폐
    /// </summary>
    utility::string_t getUnitCurrency() const;
    bool unitCurrencyIsSet() const;
    void unsetUnit_currency();
    void setUnitCurrency(utility::string_t value);

protected:
    utility::string_t m_Currency;
    bool m_CurrencyIsSet;
    utility::string_t m_Balance;
    bool m_BalanceIsSet;
    utility::string_t m_Locked;
    bool m_LockedIsSet;
    utility::string_t m_Avg_buy_price;
    bool m_Avg_buy_priceIsSet;
    bool m_Avg_buy_price_modified;
    bool m_Avg_buy_price_modifiedIsSet;
    utility::string_t m_Unit_currency;
    bool m_Unit_currencyIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_Account_H_ */
