/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.18.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Error.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Error::Error()
{
    m_ErrorIsSet = false;
}

Error::~Error()
{
}

void Error::validate()
{
    // TODO: implement validation
}

web::json::value Error::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ErrorIsSet)
    {
        val[utility::conversions::to_string_t("error")] = ModelBase::toJson(m_Error);
    }

    return val;
}

void Error::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("error")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("error")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ErrorInfo> newItem(new ErrorInfo());
            newItem->fromJson(fieldValue);
            setError( newItem );
        }
    }
}

void Error::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ErrorIsSet)
    {
        if (m_Error.get())
        {
            m_Error->toMultipart(multipart, utility::conversions::to_string_t("error."));
        }
        
    }
}

void Error::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("error")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("error")))
        {
            std::shared_ptr<ErrorInfo> newItem(new ErrorInfo());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("error."));
            setError( newItem );
        }
    }
}

std::shared_ptr<ErrorInfo> Error::getError() const
{
    return m_Error;
}


void Error::setError(std::shared_ptr<ErrorInfo> value)
{
    m_Error = value;
    m_ErrorIsSet = true;
}
bool Error::errorIsSet() const
{
    return m_ErrorIsSet;
}

void Error::unsetError()
{
    m_ErrorIsSet = false;
}

}
}
}
}

