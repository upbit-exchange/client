/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.18.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "DepositCompleteResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

DepositCompleteResponse::DepositCompleteResponse()
{
    m_Currency = utility::conversions::to_string_t("");
    m_CurrencyIsSet = false;
    m_Deposit_address = utility::conversions::to_string_t("");
    m_Deposit_addressIsSet = false;
    m_Secondary_address = utility::conversions::to_string_t("");
    m_Secondary_addressIsSet = false;
}

DepositCompleteResponse::~DepositCompleteResponse()
{
}

void DepositCompleteResponse::validate()
{
    // TODO: implement validation
}

web::json::value DepositCompleteResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CurrencyIsSet)
    {
        val[utility::conversions::to_string_t("currency")] = ModelBase::toJson(m_Currency);
    }
    if(m_Deposit_addressIsSet)
    {
        val[utility::conversions::to_string_t("deposit_address")] = ModelBase::toJson(m_Deposit_address);
    }
    if(m_Secondary_addressIsSet)
    {
        val[utility::conversions::to_string_t("secondary_address")] = ModelBase::toJson(m_Secondary_address);
    }

    return val;
}

void DepositCompleteResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("currency")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("currency")];
        if(!fieldValue.is_null())
        {
            setCurrency(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("deposit_address")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("deposit_address")];
        if(!fieldValue.is_null())
        {
            setDepositAddress(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("secondary_address")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("secondary_address")];
        if(!fieldValue.is_null())
        {
            setSecondaryAddress(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void DepositCompleteResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("currency"), m_Currency));
        
    }
    if(m_Deposit_addressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deposit_address"), m_Deposit_address));
        
    }
    if(m_Secondary_addressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("secondary_address"), m_Secondary_address));
        
    }
}

void DepositCompleteResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("currency")))
    {
        setCurrency(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("currency"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deposit_address")))
    {
        setDepositAddress(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("deposit_address"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("secondary_address")))
    {
        setSecondaryAddress(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("secondary_address"))));
    }
}

utility::string_t DepositCompleteResponse::getCurrency() const
{
    return m_Currency;
}


void DepositCompleteResponse::setCurrency(utility::string_t value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}
bool DepositCompleteResponse::currencyIsSet() const
{
    return m_CurrencyIsSet;
}

void DepositCompleteResponse::unsetCurrency()
{
    m_CurrencyIsSet = false;
}

utility::string_t DepositCompleteResponse::getDepositAddress() const
{
    return m_Deposit_address;
}


void DepositCompleteResponse::setDepositAddress(utility::string_t value)
{
    m_Deposit_address = value;
    m_Deposit_addressIsSet = true;
}
bool DepositCompleteResponse::depositAddressIsSet() const
{
    return m_Deposit_addressIsSet;
}

void DepositCompleteResponse::unsetDeposit_address()
{
    m_Deposit_addressIsSet = false;
}

utility::string_t DepositCompleteResponse::getSecondaryAddress() const
{
    return m_Secondary_address;
}


void DepositCompleteResponse::setSecondaryAddress(utility::string_t value)
{
    m_Secondary_address = value;
    m_Secondary_addressIsSet = true;
}
bool DepositCompleteResponse::secondaryAddressIsSet() const
{
    return m_Secondary_addressIsSet;
}

void DepositCompleteResponse::unsetSecondary_address()
{
    m_Secondary_addressIsSet = false;
}

}
}
}
}

