/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.18.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Currency.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Currency::Currency()
{
    m_Code = utility::conversions::to_string_t("");
    m_CodeIsSet = false;
    m_Withdraw_fee = utility::conversions::to_string_t("");
    m_Withdraw_feeIsSet = false;
    m_Is_coin = false;
    m_Is_coinIsSet = false;
    m_Wallet_state = utility::conversions::to_string_t("");
    m_Wallet_stateIsSet = false;
    m_Wallet_supportIsSet = false;
}

Currency::~Currency()
{
}

void Currency::validate()
{
    // TODO: implement validation
}

web::json::value Currency::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CodeIsSet)
    {
        val[utility::conversions::to_string_t("code")] = ModelBase::toJson(m_Code);
    }
    if(m_Withdraw_feeIsSet)
    {
        val[utility::conversions::to_string_t("withdraw_fee")] = ModelBase::toJson(m_Withdraw_fee);
    }
    if(m_Is_coinIsSet)
    {
        val[utility::conversions::to_string_t("is_coin")] = ModelBase::toJson(m_Is_coin);
    }
    if(m_Wallet_stateIsSet)
    {
        val[utility::conversions::to_string_t("wallet_state")] = ModelBase::toJson(m_Wallet_state);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Wallet_support )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("wallet_support")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void Currency::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("code")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("code")];
        if(!fieldValue.is_null())
        {
            setCode(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("withdraw_fee")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("withdraw_fee")];
        if(!fieldValue.is_null())
        {
            setWithdrawFee(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("is_coin")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("is_coin")];
        if(!fieldValue.is_null())
        {
            setIsCoin(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wallet_state")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("wallet_state")];
        if(!fieldValue.is_null())
        {
            setWalletState(ModelBase::stringFromJson(fieldValue));
        }
    }
    {
        m_Wallet_support.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("wallet_support")))
        {
        for( auto& item : val[utility::conversions::to_string_t("wallet_support")].as_array() )
        {
            m_Wallet_support.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
}

void Currency::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("code"), m_Code));
        
    }
    if(m_Withdraw_feeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("withdraw_fee"), m_Withdraw_fee));
        
    }
    if(m_Is_coinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("is_coin"), m_Is_coin));
    }
    if(m_Wallet_stateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wallet_state"), m_Wallet_state));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Wallet_support )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wallet_support"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
}

void Currency::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("code")))
    {
        setCode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("code"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("withdraw_fee")))
    {
        setWithdrawFee(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("withdraw_fee"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("is_coin")))
    {
        setIsCoin(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("is_coin"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wallet_state")))
    {
        setWalletState(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("wallet_state"))));
    }
    {
        m_Wallet_support.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("wallet_support")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("wallet_support"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Wallet_support.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
}

utility::string_t Currency::getCode() const
{
    return m_Code;
}


void Currency::setCode(utility::string_t value)
{
    m_Code = value;
    m_CodeIsSet = true;
}
bool Currency::codeIsSet() const
{
    return m_CodeIsSet;
}

void Currency::unsetCode()
{
    m_CodeIsSet = false;
}

utility::string_t Currency::getWithdrawFee() const
{
    return m_Withdraw_fee;
}


void Currency::setWithdrawFee(utility::string_t value)
{
    m_Withdraw_fee = value;
    m_Withdraw_feeIsSet = true;
}
bool Currency::withdrawFeeIsSet() const
{
    return m_Withdraw_feeIsSet;
}

void Currency::unsetWithdraw_fee()
{
    m_Withdraw_feeIsSet = false;
}

bool Currency::isIsCoin() const
{
    return m_Is_coin;
}


void Currency::setIsCoin(bool value)
{
    m_Is_coin = value;
    m_Is_coinIsSet = true;
}
bool Currency::isCoinIsSet() const
{
    return m_Is_coinIsSet;
}

void Currency::unsetIs_coin()
{
    m_Is_coinIsSet = false;
}

utility::string_t Currency::getWalletState() const
{
    return m_Wallet_state;
}


void Currency::setWalletState(utility::string_t value)
{
    m_Wallet_state = value;
    m_Wallet_stateIsSet = true;
}
bool Currency::walletStateIsSet() const
{
    return m_Wallet_stateIsSet;
}

void Currency::unsetWallet_state()
{
    m_Wallet_stateIsSet = false;
}

std::vector<utility::string_t>& Currency::getWalletSupport()
{
    return m_Wallet_support;
}

void Currency::setWalletSupport(std::vector<utility::string_t> value)
{
    m_Wallet_support = value;
    m_Wallet_supportIsSet = true;
}
bool Currency::walletSupportIsSet() const
{
    return m_Wallet_supportIsSet;
}

void Currency::unsetWallet_support()
{
    m_Wallet_supportIsSet = false;
}

}
}
}
}

