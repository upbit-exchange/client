/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.18.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * MemberLevel.h
 *
 * 사용자의 보안등급 정보
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_MemberLevel_H_
#define IO_SWAGGER_CLIENT_MODEL_MemberLevel_H_


#include "../ModelBase.h"


namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 사용자의 보안등급 정보
/// </summary>
class  MemberLevel
    : public ModelBase
{
public:
    MemberLevel();
    virtual ~MemberLevel();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// MemberLevel members

    /// <summary>
    /// 사용자의 보안 등급
    /// </summary>
    double getSecurityLevel() const;
    bool securityLevelIsSet() const;
    void unsetSecurity_level();
    void setSecurityLevel(double value);
    /// <summary>
    /// 사용자의 수수료 등급
    /// </summary>
    double getFeeLevel() const;
    bool feeLevelIsSet() const;
    void unsetFee_level();
    void setFeeLevel(double value);
    /// <summary>
    /// 사용자의 이메일 인증 여부
    /// </summary>
    bool isEmailVerified() const;
    bool emailVerifiedIsSet() const;
    void unsetEmail_verified();
    void setEmailVerified(bool value);
    /// <summary>
    /// 사용자의 실명 인증 여부
    /// </summary>
    bool isIdentityAuthVerified() const;
    bool identityAuthVerifiedIsSet() const;
    void unsetIdentity_auth_verified();
    void setIdentityAuthVerified(bool value);
    /// <summary>
    /// 사용자의 계좌 인증 여부
    /// </summary>
    bool isBankAccountVerified() const;
    bool bankAccountVerifiedIsSet() const;
    void unsetBank_account_verified();
    void setBankAccountVerified(bool value);
    /// <summary>
    /// 사용자의 카카오페이 인증 여부
    /// </summary>
    bool isKakaoPayAuthVerified() const;
    bool kakaoPayAuthVerifiedIsSet() const;
    void unsetKakao_pay_auth_verified();
    void setKakaoPayAuthVerified(bool value);
    /// <summary>
    /// 사용자의 계정 보호 상태
    /// </summary>
    bool isLocked() const;
    bool lockedIsSet() const;
    void unsetLocked();
    void setLocked(bool value);
    /// <summary>
    /// 사용자의 출금 보호 상태
    /// </summary>
    bool isWalletLocked() const;
    bool walletLockedIsSet() const;
    void unsetWallet_locked();
    void setWalletLocked(bool value);

protected:
    double m_Security_level;
    bool m_Security_levelIsSet;
    double m_Fee_level;
    bool m_Fee_levelIsSet;
    bool m_Email_verified;
    bool m_Email_verifiedIsSet;
    bool m_Identity_auth_verified;
    bool m_Identity_auth_verifiedIsSet;
    bool m_Bank_account_verified;
    bool m_Bank_account_verifiedIsSet;
    bool m_Kakao_pay_auth_verified;
    bool m_Kakao_pay_auth_verifiedIsSet;
    bool m_Locked;
    bool m_LockedIsSet;
    bool m_Wallet_locked;
    bool m_Wallet_lockedIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_MemberLevel_H_ */
