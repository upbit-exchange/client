/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.18.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "APIKey.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

APIKey::APIKey()
{
    m_Access_key = utility::conversions::to_string_t("");
    m_Access_keyIsSet = false;
    m_Expire_at = utility::conversions::to_string_t("");
    m_Expire_atIsSet = false;
}

APIKey::~APIKey()
{
}

void APIKey::validate()
{
    // TODO: implement validation
}

web::json::value APIKey::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Access_keyIsSet)
    {
        val[utility::conversions::to_string_t("access_key")] = ModelBase::toJson(m_Access_key);
    }
    if(m_Expire_atIsSet)
    {
        val[utility::conversions::to_string_t("expire_at")] = ModelBase::toJson(m_Expire_at);
    }

    return val;
}

void APIKey::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("access_key")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("access_key")];
        if(!fieldValue.is_null())
        {
            setAccessKey(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("expire_at")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("expire_at")];
        if(!fieldValue.is_null())
        {
            setExpireAt(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void APIKey::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Access_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("access_key"), m_Access_key));
        
    }
    if(m_Expire_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("expire_at"), m_Expire_at));
        
    }
}

void APIKey::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("access_key")))
    {
        setAccessKey(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("access_key"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("expire_at")))
    {
        setExpireAt(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("expire_at"))));
    }
}

utility::string_t APIKey::getAccessKey() const
{
    return m_Access_key;
}


void APIKey::setAccessKey(utility::string_t value)
{
    m_Access_key = value;
    m_Access_keyIsSet = true;
}
bool APIKey::accessKeyIsSet() const
{
    return m_Access_keyIsSet;
}

void APIKey::unsetAccess_key()
{
    m_Access_keyIsSet = false;
}

utility::string_t APIKey::getExpireAt() const
{
    return m_Expire_at;
}


void APIKey::setExpireAt(utility::string_t value)
{
    m_Expire_at = value;
    m_Expire_atIsSet = true;
}
bool APIKey::expireAtIsSet() const
{
    return m_Expire_atIsSet;
}

void APIKey::unsetExpire_at()
{
    m_Expire_atIsSet = false;
}

}
}
}
}

