/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.18.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * TradeApi.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_API_TradeApi_H_
#define IO_SWAGGER_CLIENT_API_TradeApi_H_


#include "../ApiClient.h"

#include "Error.h"
#include "Object.h"
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  TradeApi
{
public:
    TradeApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~TradeApi();
    /// <summary>
    /// 시세 Ticker 조회
    /// </summary>
    /// <remarks>
    /// ## 현재가 정보 요청 당시 종목의 스냅샷을 반환한다. 
    /// </remarks>
    /// <param name="markets">반점으로 구분되는 마켓 코드 (ex. KRW-BTC, BTC-BCC) </param>
    pplx::task<std::shared_ptr<Object>> trade_ticker(
        utility::string_t markets
    );
    /// <summary>
    /// 시세 체결 조회
    /// </summary>
    /// <remarks>
    /// ## 최근 체결 내역 
    /// </remarks>
    /// <param name="market">마켓 코드 (ex. KRW-BTC, BTC-BCC) </param>
    /// <param name="to">마지막 체결 시각. 형식 : &#x60;[HHmmss 또는 HH:mm:ss]&#x60;. 비워서 요청시 가장 최근 데이터  (optional)</param>
    /// <param name="count">체결 개수  (optional)</param>
    /// <param name="cursor">페이지네이션 커서 (sequentialId)  &#x60;sequential_id&#x60; 필드는 체결의 유일성 판단을 위한 근거로 쓰일 수 있습니다. 하지만 체결의 순서를 보장하지는 못합니다.  (optional)</param>
    /// <param name="daysAgo">최근 체결 날짜 기준 7일 이내의 이전 데이터 조회 가능. 비워서 요청 시 가장 최근 체결 날짜 반환. (범위: 1 ~ 7)  (optional)</param>
    pplx::task<std::shared_ptr<Object>> trade_ticks(
        utility::string_t market,
        boost::optional<utility::string_t> to,
        boost::optional<double> count,
        boost::optional<utility::string_t> cursor,
        boost::optional<double> daysAgo
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_API_TradeApi_H_ */

