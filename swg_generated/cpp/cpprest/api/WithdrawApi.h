/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.18.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * WithdrawApi.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_API_WithdrawApi_H_
#define IO_SWAGGER_CLIENT_API_WithdrawApi_H_


#include "../ApiClient.h"

#include "Error.h"
#include "Withdraw.h"
#include "WithdrawChance.h"
#include "WithdrawCoin.h"
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  WithdrawApi
{
public:
    WithdrawApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~WithdrawApi();
    /// <summary>
    /// 출금 가능 정보
    /// </summary>
    /// <remarks>
    /// ## 해당 통화의 가능한 출금 정보를 확인한다. 
    /// </remarks>
    /// <param name="currency">Currency Symbol </param>
    pplx::task<std::shared_ptr<WithdrawChance>> withdraw_chance(
        utility::string_t currency
    );
    /// <summary>
    /// 코인 출금하기
    /// </summary>
    /// <remarks>
    /// ## 코인 출금을 요청한다. **NOTE**: 바로출금 이용 시 유의사항 업비트 회원의 주소가 아닌 주소로 바로출금을 요청하는 경우, 출금이 정상적으로 수행되지 않습니다. 반드시 주소를 확인 후 출금을 진행하시기 바랍니다. 
    /// </remarks>
    /// <param name="currency">Currency 코드 </param>
    /// <param name="amount">출금 수량 </param>
    /// <param name="address">출금 가능 주소에 등록된 출금 주소 </param>
    /// <param name="secondaryAddress">2차 출금 주소 (필요한 코인에 한해서)  (optional)</param>
    /// <param name="transactionType">출금 유형 - default : 일반출금 - internal : 바로출금  (optional)</param>
    pplx::task<std::shared_ptr<WithdrawCoin>> withdraw_coin(
        utility::string_t currency,
        utility::string_t amount,
        utility::string_t address,
        boost::optional<utility::string_t> secondaryAddress,
        boost::optional<utility::string_t> transactionType
    );
    /// <summary>
    /// 개별 출금 조회
    /// </summary>
    /// <remarks>
    /// ## 출금 UUID를 통해 개별 출금 정보를 조회한다. 
    /// </remarks>
    /// <param name="uuid">출금 UUID  (optional)</param>
    /// <param name="txid">출금 TXID  (optional)</param>
    /// <param name="currency">Currency 코드  (optional)</param>
    pplx::task<std::shared_ptr<Withdraw>> withdraw_info(
        boost::optional<utility::string_t> uuid,
        boost::optional<utility::string_t> txid,
        boost::optional<utility::string_t> currency
    );
    /// <summary>
    /// 출금 리스트 조회
    /// </summary>
    /// <remarks>
    /// ## 출금 리스트를 조회한다. 
    /// </remarks>
    /// <param name="currency">Currency 코드  (optional)</param>
    /// <param name="state">출금 상태 - submitting : 처리 중 - submitted : 처리 완료 - almost_accepted : 출금대기중 - rejected : 거부 - accepted : 승인됨 - processing : 처리 중 - done : 완료 - canceled : 취소됨  (optional)</param>
    /// <param name="uuids">출금 UUID의 목록  (optional)</param>
    /// <param name="txids">출금 TXID의 목록  (optional)</param>
    /// <param name="limit">개수 제한 (default: 100, max: 100)  (optional)</param>
    /// <param name="page">페이지 수, default: 1  (optional)</param>
    /// <param name="orderBy">정렬 방식 - asc : 오름차순 - desc : 내림차순 (default)  (optional)</param>
    pplx::task<std::vector<std::shared_ptr<Withdraw>>> withdraw_infoAll(
        boost::optional<utility::string_t> currency,
        boost::optional<utility::string_t> state,
        boost::optional<std::vector<utility::string_t>> uuids,
        boost::optional<std::vector<utility::string_t>> txids,
        boost::optional<double> limit,
        boost::optional<double> page,
        boost::optional<utility::string_t> orderBy
    );
    /// <summary>
    /// 원화 출금하기
    /// </summary>
    /// <remarks>
    /// ## 원화 출금을 요청한다. 등록된 출금 계좌로 출금된다. 
    /// </remarks>
    /// <param name="amount">출금 원화 수량 </param>
    pplx::task<std::shared_ptr<Withdraw>> withdraw_krw(
        utility::string_t amount
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_API_WithdrawApi_H_ */

