/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGWithdrawChance.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGWithdrawChance::SWGWithdrawChance(QString json) {
    init();
    this->fromJson(json);
}

SWGWithdrawChance::SWGWithdrawChance() {
    init();
}

SWGWithdrawChance::~SWGWithdrawChance() {
    this->cleanup();
}

void
SWGWithdrawChance::init() {
    member_level = new SWGMemberLevel();
    m_member_level_isSet = false;
    currency = new SWGCurrency();
    m_currency_isSet = false;
    account = new SWGAccount();
    m_account_isSet = false;
    withdraw_limit = new SWGWithdrawLimit();
    m_withdraw_limit_isSet = false;
}

void
SWGWithdrawChance::cleanup() {
    if(member_level != nullptr) { 
        delete member_level;
    }
    if(currency != nullptr) { 
        delete currency;
    }
    if(account != nullptr) { 
        delete account;
    }
    if(withdraw_limit != nullptr) { 
        delete withdraw_limit;
    }
}

SWGWithdrawChance*
SWGWithdrawChance::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGWithdrawChance::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&member_level, pJson["member_level"], "SWGMemberLevel", "SWGMemberLevel");
    
    ::Swagger::setValue(&currency, pJson["currency"], "SWGCurrency", "SWGCurrency");
    
    ::Swagger::setValue(&account, pJson["account"], "SWGAccount", "SWGAccount");
    
    ::Swagger::setValue(&withdraw_limit, pJson["withdraw_limit"], "SWGWithdrawLimit", "SWGWithdrawLimit");
    
}

QString
SWGWithdrawChance::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGWithdrawChance::asJsonObject() {
    QJsonObject obj;
    if((member_level != nullptr) && (member_level->isSet())){
        toJsonValue(QString("member_level"), member_level, obj, QString("SWGMemberLevel"));
    }
    if((currency != nullptr) && (currency->isSet())){
        toJsonValue(QString("currency"), currency, obj, QString("SWGCurrency"));
    }
    if((account != nullptr) && (account->isSet())){
        toJsonValue(QString("account"), account, obj, QString("SWGAccount"));
    }
    if((withdraw_limit != nullptr) && (withdraw_limit->isSet())){
        toJsonValue(QString("withdraw_limit"), withdraw_limit, obj, QString("SWGWithdrawLimit"));
    }

    return obj;
}

SWGMemberLevel*
SWGWithdrawChance::getMemberLevel() {
    return member_level;
}
void
SWGWithdrawChance::setMemberLevel(SWGMemberLevel* member_level) {
    this->member_level = member_level;
    this->m_member_level_isSet = true;
}

SWGCurrency*
SWGWithdrawChance::getCurrency() {
    return currency;
}
void
SWGWithdrawChance::setCurrency(SWGCurrency* currency) {
    this->currency = currency;
    this->m_currency_isSet = true;
}

SWGAccount*
SWGWithdrawChance::getAccount() {
    return account;
}
void
SWGWithdrawChance::setAccount(SWGAccount* account) {
    this->account = account;
    this->m_account_isSet = true;
}

SWGWithdrawLimit*
SWGWithdrawChance::getWithdrawLimit() {
    return withdraw_limit;
}
void
SWGWithdrawChance::setWithdrawLimit(SWGWithdrawLimit* withdraw_limit) {
    this->withdraw_limit = withdraw_limit;
    this->m_withdraw_limit_isSet = true;
}


bool
SWGWithdrawChance::isSet(){
    bool isObjectUpdated = false;
    do{
        if(member_level != nullptr && member_level->isSet()){ isObjectUpdated = true; break;}
        if(currency != nullptr && currency->isSet()){ isObjectUpdated = true; break;}
        if(account != nullptr && account->isSet()){ isObjectUpdated = true; break;}
        if(withdraw_limit != nullptr && withdraw_limit->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

