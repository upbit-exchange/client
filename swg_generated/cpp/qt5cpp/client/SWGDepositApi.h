/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGDepositApi_H_
#define _SWG_SWGDepositApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGDeposit.h"
#include "SWGDepositCompleteResponse.h"
#include "SWGDepositTransferResponse.h"
#include "SWGError.h"
#include "SWGNumber.h"
#include "SWGObject.h"

#include <QObject>

namespace Swagger {

class SWGDepositApi: public QObject {
    Q_OBJECT

public:
    SWGDepositApi();
    SWGDepositApi(QString host, QString basePath);
    ~SWGDepositApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void deposit_coinAddress(QString* currency);
    void deposit_coinAddresses();
    void deposit_generateCoinAddress(QString* currency);
    void deposit_info(QString* uuid, QString* txid, QString* currency);
    void deposit_infoAll(QString* currency, QString* state, QList<QString*>* uuids, QList<QString*>* txids, SWGNumber* limit, SWGNumber* page, QString* order_by);
    
private:
    void deposit_coinAddressCallback (SWGHttpRequestWorker * worker);
    void deposit_coinAddressesCallback (SWGHttpRequestWorker * worker);
    void deposit_generateCoinAddressCallback (SWGHttpRequestWorker * worker);
    void deposit_infoCallback (SWGHttpRequestWorker * worker);
    void deposit_infoAllCallback (SWGHttpRequestWorker * worker);
    
signals:
    void deposit_coinAddressSignal(SWGDepositCompleteResponse* summary);
    void deposit_coinAddressesSignal(SWGObject* summary);
    void deposit_generateCoinAddressSignal(SWGDepositCompleteResponse* summary);
    void deposit_infoSignal(SWGDeposit* summary);
    void deposit_infoAllSignal(QList<SWGDeposit*>* summary);
    
    void deposit_coinAddressSignalE(SWGDepositCompleteResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void deposit_coinAddressesSignalE(SWGObject* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void deposit_generateCoinAddressSignalE(SWGDepositCompleteResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void deposit_infoSignalE(SWGDeposit* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void deposit_infoAllSignalE(QList<SWGDeposit*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void deposit_coinAddressSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deposit_coinAddressesSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deposit_generateCoinAddressSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deposit_infoSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deposit_infoAllSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
