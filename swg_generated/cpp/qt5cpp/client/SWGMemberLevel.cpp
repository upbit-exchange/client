/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGMemberLevel.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGMemberLevel::SWGMemberLevel(QString json) {
    init();
    this->fromJson(json);
}

SWGMemberLevel::SWGMemberLevel() {
    init();
}

SWGMemberLevel::~SWGMemberLevel() {
    this->cleanup();
}

void
SWGMemberLevel::init() {
    security_level = 0.0;
    m_security_level_isSet = false;
    fee_level = 0.0;
    m_fee_level_isSet = false;
    email_verified = false;
    m_email_verified_isSet = false;
    identity_auth_verified = false;
    m_identity_auth_verified_isSet = false;
    bank_account_verified = false;
    m_bank_account_verified_isSet = false;
    kakao_pay_auth_verified = false;
    m_kakao_pay_auth_verified_isSet = false;
    locked = false;
    m_locked_isSet = false;
    wallet_locked = false;
    m_wallet_locked_isSet = false;
}

void
SWGMemberLevel::cleanup() {
    if(security_level != nullptr) { 
        delete security_level;
    }
    if(fee_level != nullptr) { 
        delete fee_level;
    }






}

SWGMemberLevel*
SWGMemberLevel::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGMemberLevel::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&security_level, pJson["security_level"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&fee_level, pJson["fee_level"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&email_verified, pJson["email_verified"], "bool", "");
    
    ::Swagger::setValue(&identity_auth_verified, pJson["identity_auth_verified"], "bool", "");
    
    ::Swagger::setValue(&bank_account_verified, pJson["bank_account_verified"], "bool", "");
    
    ::Swagger::setValue(&kakao_pay_auth_verified, pJson["kakao_pay_auth_verified"], "bool", "");
    
    ::Swagger::setValue(&locked, pJson["locked"], "bool", "");
    
    ::Swagger::setValue(&wallet_locked, pJson["wallet_locked"], "bool", "");
    
}

QString
SWGMemberLevel::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGMemberLevel::asJsonObject() {
    QJsonObject obj;
    if((security_level != nullptr) && (security_level->isSet())){
        toJsonValue(QString("security_level"), security_level, obj, QString("SWGNumber"));
    }
    if((fee_level != nullptr) && (fee_level->isSet())){
        toJsonValue(QString("fee_level"), fee_level, obj, QString("SWGNumber"));
    }
    if(m_email_verified_isSet){
        obj.insert("email_verified", QJsonValue(email_verified));
    }
    if(m_identity_auth_verified_isSet){
        obj.insert("identity_auth_verified", QJsonValue(identity_auth_verified));
    }
    if(m_bank_account_verified_isSet){
        obj.insert("bank_account_verified", QJsonValue(bank_account_verified));
    }
    if(m_kakao_pay_auth_verified_isSet){
        obj.insert("kakao_pay_auth_verified", QJsonValue(kakao_pay_auth_verified));
    }
    if(m_locked_isSet){
        obj.insert("locked", QJsonValue(locked));
    }
    if(m_wallet_locked_isSet){
        obj.insert("wallet_locked", QJsonValue(wallet_locked));
    }

    return obj;
}

SWGNumber*
SWGMemberLevel::getSecurityLevel() {
    return security_level;
}
void
SWGMemberLevel::setSecurityLevel(SWGNumber* security_level) {
    this->security_level = security_level;
    this->m_security_level_isSet = true;
}

SWGNumber*
SWGMemberLevel::getFeeLevel() {
    return fee_level;
}
void
SWGMemberLevel::setFeeLevel(SWGNumber* fee_level) {
    this->fee_level = fee_level;
    this->m_fee_level_isSet = true;
}

bool
SWGMemberLevel::isEmailVerified() {
    return email_verified;
}
void
SWGMemberLevel::setEmailVerified(bool email_verified) {
    this->email_verified = email_verified;
    this->m_email_verified_isSet = true;
}

bool
SWGMemberLevel::isIdentityAuthVerified() {
    return identity_auth_verified;
}
void
SWGMemberLevel::setIdentityAuthVerified(bool identity_auth_verified) {
    this->identity_auth_verified = identity_auth_verified;
    this->m_identity_auth_verified_isSet = true;
}

bool
SWGMemberLevel::isBankAccountVerified() {
    return bank_account_verified;
}
void
SWGMemberLevel::setBankAccountVerified(bool bank_account_verified) {
    this->bank_account_verified = bank_account_verified;
    this->m_bank_account_verified_isSet = true;
}

bool
SWGMemberLevel::isKakaoPayAuthVerified() {
    return kakao_pay_auth_verified;
}
void
SWGMemberLevel::setKakaoPayAuthVerified(bool kakao_pay_auth_verified) {
    this->kakao_pay_auth_verified = kakao_pay_auth_verified;
    this->m_kakao_pay_auth_verified_isSet = true;
}

bool
SWGMemberLevel::isLocked() {
    return locked;
}
void
SWGMemberLevel::setLocked(bool locked) {
    this->locked = locked;
    this->m_locked_isSet = true;
}

bool
SWGMemberLevel::isWalletLocked() {
    return wallet_locked;
}
void
SWGMemberLevel::setWalletLocked(bool wallet_locked) {
    this->wallet_locked = wallet_locked;
    this->m_wallet_locked_isSet = true;
}


bool
SWGMemberLevel::isSet(){
    bool isObjectUpdated = false;
    do{
        if(security_level != nullptr && security_level->isSet()){ isObjectUpdated = true; break;}
        if(fee_level != nullptr && fee_level->isSet()){ isObjectUpdated = true; break;}
        if(m_email_verified_isSet){ isObjectUpdated = true; break;}
        if(m_identity_auth_verified_isSet){ isObjectUpdated = true; break;}
        if(m_bank_account_verified_isSet){ isObjectUpdated = true; break;}
        if(m_kakao_pay_auth_verified_isSet){ isObjectUpdated = true; break;}
        if(m_locked_isSet){ isObjectUpdated = true; break;}
        if(m_wallet_locked_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

