/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGCandleDays.h
 *
 * 
 */

#ifndef SWGCandleDays_H_
#define SWGCandleDays_H_

#include <QJsonObject>


#include "SWGNumber.h"
#include <QString>

#include "SWGObject.h"

namespace Swagger {

class SWGCandleDays: public SWGObject {
public:
    SWGCandleDays();
    SWGCandleDays(QString json);
    ~SWGCandleDays();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    SWGCandleDays* fromJson(QString jsonString) override;

    QString* getMarket();
    void setMarket(QString* market);

    QString* getCandleDateTimeUtc();
    void setCandleDateTimeUtc(QString* candle_date_time_utc);

    QString* getCandleDateTimeKst();
    void setCandleDateTimeKst(QString* candle_date_time_kst);

    double getOpeningPrice();
    void setOpeningPrice(double opening_price);

    double getHighPrice();
    void setHighPrice(double high_price);

    double getLowPrice();
    void setLowPrice(double low_price);

    double getTradePrice();
    void setTradePrice(double trade_price);

    SWGNumber* getTimestamp();
    void setTimestamp(SWGNumber* timestamp);

    double getCandleAccTradePrice();
    void setCandleAccTradePrice(double candle_acc_trade_price);

    double getCandleAccTradeVolume();
    void setCandleAccTradeVolume(double candle_acc_trade_volume);

    double getPrevClosingPrice();
    void setPrevClosingPrice(double prev_closing_price);

    double getChangePrice();
    void setChangePrice(double change_price);

    double getChangeRate();
    void setChangeRate(double change_rate);

    double getConvertedTradePrice();
    void setConvertedTradePrice(double converted_trade_price);


    virtual bool isSet() override;

private:
    QString* market;
    bool m_market_isSet;

    QString* candle_date_time_utc;
    bool m_candle_date_time_utc_isSet;

    QString* candle_date_time_kst;
    bool m_candle_date_time_kst_isSet;

    double opening_price;
    bool m_opening_price_isSet;

    double high_price;
    bool m_high_price_isSet;

    double low_price;
    bool m_low_price_isSet;

    double trade_price;
    bool m_trade_price_isSet;

    SWGNumber* timestamp;
    bool m_timestamp_isSet;

    double candle_acc_trade_price;
    bool m_candle_acc_trade_price_isSet;

    double candle_acc_trade_volume;
    bool m_candle_acc_trade_volume_isSet;

    double prev_closing_price;
    bool m_prev_closing_price_isSet;

    double change_price;
    bool m_change_price_isSet;

    double change_rate;
    bool m_change_rate_isSet;

    double converted_trade_price;
    bool m_converted_trade_price_isSet;

};

}

#endif /* SWGCandleDays_H_ */
