/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGTicker.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGTicker::SWGTicker(QString json) {
    init();
    this->fromJson(json);
}

SWGTicker::SWGTicker() {
    init();
}

SWGTicker::~SWGTicker() {
    this->cleanup();
}

void
SWGTicker::init() {
    market = new QString("");
    m_market_isSet = false;
    trade_date = new QString("");
    m_trade_date_isSet = false;
    trade_time = new QString("");
    m_trade_time_isSet = false;
    trade_date_kst = new QString("");
    m_trade_date_kst_isSet = false;
    trade_time_kst = new QString("");
    m_trade_time_kst_isSet = false;
    opening_price = 0.0;
    m_opening_price_isSet = false;
    high_price = 0.0;
    m_high_price_isSet = false;
    low_price = 0.0;
    m_low_price_isSet = false;
    trade_price = 0.0;
    m_trade_price_isSet = false;
    prev_closing_price = 0.0;
    m_prev_closing_price_isSet = false;
    change = new QString("");
    m_change_isSet = false;
    change_price = 0.0;
    m_change_price_isSet = false;
    change_rate = 0.0;
    m_change_rate_isSet = false;
    signed_change_price = 0.0;
    m_signed_change_price_isSet = false;
    signed_change_rate = 0.0;
    m_signed_change_rate_isSet = false;
    trade_volume = 0.0;
    m_trade_volume_isSet = false;
    acc_trade_price = 0.0;
    m_acc_trade_price_isSet = false;
    acc_trade_price_24h = 0.0;
    m_acc_trade_price_24h_isSet = false;
    acc_trade_volume = 0.0;
    m_acc_trade_volume_isSet = false;
    acc_trade_volume_24h = 0.0;
    m_acc_trade_volume_24h_isSet = false;
    highest_52_week_price = 0.0;
    m_highest_52_week_price_isSet = false;
    highest_52_week_date = new QString("");
    m_highest_52_week_date_isSet = false;
    lowest_52_week_price = 0.0;
    m_lowest_52_week_price_isSet = false;
    lowest_52_week_date = new QString("");
    m_lowest_52_week_date_isSet = false;
    timestamp = 0.0;
    m_timestamp_isSet = false;
}

void
SWGTicker::cleanup() {
    if(market != nullptr) { 
        delete market;
    }
    if(trade_date != nullptr) { 
        delete trade_date;
    }
    if(trade_time != nullptr) { 
        delete trade_time;
    }
    if(trade_date_kst != nullptr) { 
        delete trade_date_kst;
    }
    if(trade_time_kst != nullptr) { 
        delete trade_time_kst;
    }





    if(change != nullptr) { 
        delete change;
    }










    if(highest_52_week_date != nullptr) { 
        delete highest_52_week_date;
    }

    if(lowest_52_week_date != nullptr) { 
        delete lowest_52_week_date;
    }
    if(timestamp != nullptr) { 
        delete timestamp;
    }
}

SWGTicker*
SWGTicker::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGTicker::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&market, pJson["market"], "QString", "QString");
    
    ::Swagger::setValue(&trade_date, pJson["trade_date"], "QString", "QString");
    
    ::Swagger::setValue(&trade_time, pJson["trade_time"], "QString", "QString");
    
    ::Swagger::setValue(&trade_date_kst, pJson["trade_date_kst"], "QString", "QString");
    
    ::Swagger::setValue(&trade_time_kst, pJson["trade_time_kst"], "QString", "QString");
    
    ::Swagger::setValue(&opening_price, pJson["opening_price"], "double", "");
    
    ::Swagger::setValue(&high_price, pJson["high_price"], "double", "");
    
    ::Swagger::setValue(&low_price, pJson["low_price"], "double", "");
    
    ::Swagger::setValue(&trade_price, pJson["trade_price"], "double", "");
    
    ::Swagger::setValue(&prev_closing_price, pJson["prev_closing_price"], "double", "");
    
    ::Swagger::setValue(&change, pJson["change"], "QString", "QString");
    
    ::Swagger::setValue(&change_price, pJson["change_price"], "double", "");
    
    ::Swagger::setValue(&change_rate, pJson["change_rate"], "double", "");
    
    ::Swagger::setValue(&signed_change_price, pJson["signed_change_price"], "double", "");
    
    ::Swagger::setValue(&signed_change_rate, pJson["signed_change_rate"], "double", "");
    
    ::Swagger::setValue(&trade_volume, pJson["trade_volume"], "double", "");
    
    ::Swagger::setValue(&acc_trade_price, pJson["acc_trade_price"], "double", "");
    
    ::Swagger::setValue(&acc_trade_price_24h, pJson["acc_trade_price_24h"], "double", "");
    
    ::Swagger::setValue(&acc_trade_volume, pJson["acc_trade_volume"], "double", "");
    
    ::Swagger::setValue(&acc_trade_volume_24h, pJson["acc_trade_volume_24h"], "double", "");
    
    ::Swagger::setValue(&highest_52_week_price, pJson["highest_52_week_price"], "double", "");
    
    ::Swagger::setValue(&highest_52_week_date, pJson["highest_52_week_date"], "QString", "QString");
    
    ::Swagger::setValue(&lowest_52_week_price, pJson["lowest_52_week_price"], "double", "");
    
    ::Swagger::setValue(&lowest_52_week_date, pJson["lowest_52_week_date"], "QString", "QString");
    
    ::Swagger::setValue(&timestamp, pJson["timestamp"], "SWGNumber", "SWGNumber");
    
}

QString
SWGTicker::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGTicker::asJsonObject() {
    QJsonObject obj;
    if(market != nullptr && *market != QString("")){
        toJsonValue(QString("market"), market, obj, QString("QString"));
    }
    if(trade_date != nullptr && *trade_date != QString("")){
        toJsonValue(QString("trade_date"), trade_date, obj, QString("QString"));
    }
    if(trade_time != nullptr && *trade_time != QString("")){
        toJsonValue(QString("trade_time"), trade_time, obj, QString("QString"));
    }
    if(trade_date_kst != nullptr && *trade_date_kst != QString("")){
        toJsonValue(QString("trade_date_kst"), trade_date_kst, obj, QString("QString"));
    }
    if(trade_time_kst != nullptr && *trade_time_kst != QString("")){
        toJsonValue(QString("trade_time_kst"), trade_time_kst, obj, QString("QString"));
    }
    if(m_opening_price_isSet){
        obj.insert("opening_price", QJsonValue(opening_price));
    }
    if(m_high_price_isSet){
        obj.insert("high_price", QJsonValue(high_price));
    }
    if(m_low_price_isSet){
        obj.insert("low_price", QJsonValue(low_price));
    }
    if(m_trade_price_isSet){
        obj.insert("trade_price", QJsonValue(trade_price));
    }
    if(m_prev_closing_price_isSet){
        obj.insert("prev_closing_price", QJsonValue(prev_closing_price));
    }
    if(change != nullptr && *change != QString("")){
        toJsonValue(QString("change"), change, obj, QString("QString"));
    }
    if(m_change_price_isSet){
        obj.insert("change_price", QJsonValue(change_price));
    }
    if(m_change_rate_isSet){
        obj.insert("change_rate", QJsonValue(change_rate));
    }
    if(m_signed_change_price_isSet){
        obj.insert("signed_change_price", QJsonValue(signed_change_price));
    }
    if(m_signed_change_rate_isSet){
        obj.insert("signed_change_rate", QJsonValue(signed_change_rate));
    }
    if(m_trade_volume_isSet){
        obj.insert("trade_volume", QJsonValue(trade_volume));
    }
    if(m_acc_trade_price_isSet){
        obj.insert("acc_trade_price", QJsonValue(acc_trade_price));
    }
    if(m_acc_trade_price_24h_isSet){
        obj.insert("acc_trade_price_24h", QJsonValue(acc_trade_price_24h));
    }
    if(m_acc_trade_volume_isSet){
        obj.insert("acc_trade_volume", QJsonValue(acc_trade_volume));
    }
    if(m_acc_trade_volume_24h_isSet){
        obj.insert("acc_trade_volume_24h", QJsonValue(acc_trade_volume_24h));
    }
    if(m_highest_52_week_price_isSet){
        obj.insert("highest_52_week_price", QJsonValue(highest_52_week_price));
    }
    if(highest_52_week_date != nullptr && *highest_52_week_date != QString("")){
        toJsonValue(QString("highest_52_week_date"), highest_52_week_date, obj, QString("QString"));
    }
    if(m_lowest_52_week_price_isSet){
        obj.insert("lowest_52_week_price", QJsonValue(lowest_52_week_price));
    }
    if(lowest_52_week_date != nullptr && *lowest_52_week_date != QString("")){
        toJsonValue(QString("lowest_52_week_date"), lowest_52_week_date, obj, QString("QString"));
    }
    if((timestamp != nullptr) && (timestamp->isSet())){
        toJsonValue(QString("timestamp"), timestamp, obj, QString("SWGNumber"));
    }

    return obj;
}

QString*
SWGTicker::getMarket() {
    return market;
}
void
SWGTicker::setMarket(QString* market) {
    this->market = market;
    this->m_market_isSet = true;
}

QString*
SWGTicker::getTradeDate() {
    return trade_date;
}
void
SWGTicker::setTradeDate(QString* trade_date) {
    this->trade_date = trade_date;
    this->m_trade_date_isSet = true;
}

QString*
SWGTicker::getTradeTime() {
    return trade_time;
}
void
SWGTicker::setTradeTime(QString* trade_time) {
    this->trade_time = trade_time;
    this->m_trade_time_isSet = true;
}

QString*
SWGTicker::getTradeDateKst() {
    return trade_date_kst;
}
void
SWGTicker::setTradeDateKst(QString* trade_date_kst) {
    this->trade_date_kst = trade_date_kst;
    this->m_trade_date_kst_isSet = true;
}

QString*
SWGTicker::getTradeTimeKst() {
    return trade_time_kst;
}
void
SWGTicker::setTradeTimeKst(QString* trade_time_kst) {
    this->trade_time_kst = trade_time_kst;
    this->m_trade_time_kst_isSet = true;
}

double
SWGTicker::getOpeningPrice() {
    return opening_price;
}
void
SWGTicker::setOpeningPrice(double opening_price) {
    this->opening_price = opening_price;
    this->m_opening_price_isSet = true;
}

double
SWGTicker::getHighPrice() {
    return high_price;
}
void
SWGTicker::setHighPrice(double high_price) {
    this->high_price = high_price;
    this->m_high_price_isSet = true;
}

double
SWGTicker::getLowPrice() {
    return low_price;
}
void
SWGTicker::setLowPrice(double low_price) {
    this->low_price = low_price;
    this->m_low_price_isSet = true;
}

double
SWGTicker::getTradePrice() {
    return trade_price;
}
void
SWGTicker::setTradePrice(double trade_price) {
    this->trade_price = trade_price;
    this->m_trade_price_isSet = true;
}

double
SWGTicker::getPrevClosingPrice() {
    return prev_closing_price;
}
void
SWGTicker::setPrevClosingPrice(double prev_closing_price) {
    this->prev_closing_price = prev_closing_price;
    this->m_prev_closing_price_isSet = true;
}

QString*
SWGTicker::getChange() {
    return change;
}
void
SWGTicker::setChange(QString* change) {
    this->change = change;
    this->m_change_isSet = true;
}

double
SWGTicker::getChangePrice() {
    return change_price;
}
void
SWGTicker::setChangePrice(double change_price) {
    this->change_price = change_price;
    this->m_change_price_isSet = true;
}

double
SWGTicker::getChangeRate() {
    return change_rate;
}
void
SWGTicker::setChangeRate(double change_rate) {
    this->change_rate = change_rate;
    this->m_change_rate_isSet = true;
}

double
SWGTicker::getSignedChangePrice() {
    return signed_change_price;
}
void
SWGTicker::setSignedChangePrice(double signed_change_price) {
    this->signed_change_price = signed_change_price;
    this->m_signed_change_price_isSet = true;
}

double
SWGTicker::getSignedChangeRate() {
    return signed_change_rate;
}
void
SWGTicker::setSignedChangeRate(double signed_change_rate) {
    this->signed_change_rate = signed_change_rate;
    this->m_signed_change_rate_isSet = true;
}

double
SWGTicker::getTradeVolume() {
    return trade_volume;
}
void
SWGTicker::setTradeVolume(double trade_volume) {
    this->trade_volume = trade_volume;
    this->m_trade_volume_isSet = true;
}

double
SWGTicker::getAccTradePrice() {
    return acc_trade_price;
}
void
SWGTicker::setAccTradePrice(double acc_trade_price) {
    this->acc_trade_price = acc_trade_price;
    this->m_acc_trade_price_isSet = true;
}

double
SWGTicker::getAccTradePrice24h() {
    return acc_trade_price_24h;
}
void
SWGTicker::setAccTradePrice24h(double acc_trade_price_24h) {
    this->acc_trade_price_24h = acc_trade_price_24h;
    this->m_acc_trade_price_24h_isSet = true;
}

double
SWGTicker::getAccTradeVolume() {
    return acc_trade_volume;
}
void
SWGTicker::setAccTradeVolume(double acc_trade_volume) {
    this->acc_trade_volume = acc_trade_volume;
    this->m_acc_trade_volume_isSet = true;
}

double
SWGTicker::getAccTradeVolume24h() {
    return acc_trade_volume_24h;
}
void
SWGTicker::setAccTradeVolume24h(double acc_trade_volume_24h) {
    this->acc_trade_volume_24h = acc_trade_volume_24h;
    this->m_acc_trade_volume_24h_isSet = true;
}

double
SWGTicker::getHighest52WeekPrice() {
    return highest_52_week_price;
}
void
SWGTicker::setHighest52WeekPrice(double highest_52_week_price) {
    this->highest_52_week_price = highest_52_week_price;
    this->m_highest_52_week_price_isSet = true;
}

QString*
SWGTicker::getHighest52WeekDate() {
    return highest_52_week_date;
}
void
SWGTicker::setHighest52WeekDate(QString* highest_52_week_date) {
    this->highest_52_week_date = highest_52_week_date;
    this->m_highest_52_week_date_isSet = true;
}

double
SWGTicker::getLowest52WeekPrice() {
    return lowest_52_week_price;
}
void
SWGTicker::setLowest52WeekPrice(double lowest_52_week_price) {
    this->lowest_52_week_price = lowest_52_week_price;
    this->m_lowest_52_week_price_isSet = true;
}

QString*
SWGTicker::getLowest52WeekDate() {
    return lowest_52_week_date;
}
void
SWGTicker::setLowest52WeekDate(QString* lowest_52_week_date) {
    this->lowest_52_week_date = lowest_52_week_date;
    this->m_lowest_52_week_date_isSet = true;
}

SWGNumber*
SWGTicker::getTimestamp() {
    return timestamp;
}
void
SWGTicker::setTimestamp(SWGNumber* timestamp) {
    this->timestamp = timestamp;
    this->m_timestamp_isSet = true;
}


bool
SWGTicker::isSet(){
    bool isObjectUpdated = false;
    do{
        if(market != nullptr && *market != QString("")){ isObjectUpdated = true; break;}
        if(trade_date != nullptr && *trade_date != QString("")){ isObjectUpdated = true; break;}
        if(trade_time != nullptr && *trade_time != QString("")){ isObjectUpdated = true; break;}
        if(trade_date_kst != nullptr && *trade_date_kst != QString("")){ isObjectUpdated = true; break;}
        if(trade_time_kst != nullptr && *trade_time_kst != QString("")){ isObjectUpdated = true; break;}
        if(m_opening_price_isSet){ isObjectUpdated = true; break;}
        if(m_high_price_isSet){ isObjectUpdated = true; break;}
        if(m_low_price_isSet){ isObjectUpdated = true; break;}
        if(m_trade_price_isSet){ isObjectUpdated = true; break;}
        if(m_prev_closing_price_isSet){ isObjectUpdated = true; break;}
        if(change != nullptr && *change != QString("")){ isObjectUpdated = true; break;}
        if(m_change_price_isSet){ isObjectUpdated = true; break;}
        if(m_change_rate_isSet){ isObjectUpdated = true; break;}
        if(m_signed_change_price_isSet){ isObjectUpdated = true; break;}
        if(m_signed_change_rate_isSet){ isObjectUpdated = true; break;}
        if(m_trade_volume_isSet){ isObjectUpdated = true; break;}
        if(m_acc_trade_price_isSet){ isObjectUpdated = true; break;}
        if(m_acc_trade_price_24h_isSet){ isObjectUpdated = true; break;}
        if(m_acc_trade_volume_isSet){ isObjectUpdated = true; break;}
        if(m_acc_trade_volume_24h_isSet){ isObjectUpdated = true; break;}
        if(m_highest_52_week_price_isSet){ isObjectUpdated = true; break;}
        if(highest_52_week_date != nullptr && *highest_52_week_date != QString("")){ isObjectUpdated = true; break;}
        if(m_lowest_52_week_price_isSet){ isObjectUpdated = true; break;}
        if(lowest_52_week_date != nullptr && *lowest_52_week_date != QString("")){ isObjectUpdated = true; break;}
        if(timestamp != nullptr && timestamp->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

