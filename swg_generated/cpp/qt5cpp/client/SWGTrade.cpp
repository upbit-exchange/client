/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGTrade.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGTrade::SWGTrade(QString json) {
    init();
    this->fromJson(json);
}

SWGTrade::SWGTrade() {
    init();
}

SWGTrade::~SWGTrade() {
    this->cleanup();
}

void
SWGTrade::init() {
    market = new QString("");
    m_market_isSet = false;
    uuid = new QString("");
    m_uuid_isSet = false;
    price = new QString("");
    m_price_isSet = false;
    volume = new QString("");
    m_volume_isSet = false;
    funds = new QString("");
    m_funds_isSet = false;
    side = new QString("");
    m_side_isSet = false;
    created_at = new QString("");
    m_created_at_isSet = false;
}

void
SWGTrade::cleanup() {
    if(market != nullptr) { 
        delete market;
    }
    if(uuid != nullptr) { 
        delete uuid;
    }
    if(price != nullptr) { 
        delete price;
    }
    if(volume != nullptr) { 
        delete volume;
    }
    if(funds != nullptr) { 
        delete funds;
    }
    if(side != nullptr) { 
        delete side;
    }
    if(created_at != nullptr) { 
        delete created_at;
    }
}

SWGTrade*
SWGTrade::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGTrade::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&market, pJson["market"], "QString", "QString");
    
    ::Swagger::setValue(&uuid, pJson["uuid"], "QString", "QString");
    
    ::Swagger::setValue(&price, pJson["price"], "QString", "QString");
    
    ::Swagger::setValue(&volume, pJson["volume"], "QString", "QString");
    
    ::Swagger::setValue(&funds, pJson["funds"], "QString", "QString");
    
    ::Swagger::setValue(&side, pJson["side"], "QString", "QString");
    
    ::Swagger::setValue(&created_at, pJson["created_at"], "QString", "QString");
    
}

QString
SWGTrade::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGTrade::asJsonObject() {
    QJsonObject obj;
    if(market != nullptr && *market != QString("")){
        toJsonValue(QString("market"), market, obj, QString("QString"));
    }
    if(uuid != nullptr && *uuid != QString("")){
        toJsonValue(QString("uuid"), uuid, obj, QString("QString"));
    }
    if(price != nullptr && *price != QString("")){
        toJsonValue(QString("price"), price, obj, QString("QString"));
    }
    if(volume != nullptr && *volume != QString("")){
        toJsonValue(QString("volume"), volume, obj, QString("QString"));
    }
    if(funds != nullptr && *funds != QString("")){
        toJsonValue(QString("funds"), funds, obj, QString("QString"));
    }
    if(side != nullptr && *side != QString("")){
        toJsonValue(QString("side"), side, obj, QString("QString"));
    }
    if(created_at != nullptr && *created_at != QString("")){
        toJsonValue(QString("created_at"), created_at, obj, QString("QString"));
    }

    return obj;
}

QString*
SWGTrade::getMarket() {
    return market;
}
void
SWGTrade::setMarket(QString* market) {
    this->market = market;
    this->m_market_isSet = true;
}

QString*
SWGTrade::getUuid() {
    return uuid;
}
void
SWGTrade::setUuid(QString* uuid) {
    this->uuid = uuid;
    this->m_uuid_isSet = true;
}

QString*
SWGTrade::getPrice() {
    return price;
}
void
SWGTrade::setPrice(QString* price) {
    this->price = price;
    this->m_price_isSet = true;
}

QString*
SWGTrade::getVolume() {
    return volume;
}
void
SWGTrade::setVolume(QString* volume) {
    this->volume = volume;
    this->m_volume_isSet = true;
}

QString*
SWGTrade::getFunds() {
    return funds;
}
void
SWGTrade::setFunds(QString* funds) {
    this->funds = funds;
    this->m_funds_isSet = true;
}

QString*
SWGTrade::getSide() {
    return side;
}
void
SWGTrade::setSide(QString* side) {
    this->side = side;
    this->m_side_isSet = true;
}

QString*
SWGTrade::getCreatedAt() {
    return created_at;
}
void
SWGTrade::setCreatedAt(QString* created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}


bool
SWGTrade::isSet(){
    bool isObjectUpdated = false;
    do{
        if(market != nullptr && *market != QString("")){ isObjectUpdated = true; break;}
        if(uuid != nullptr && *uuid != QString("")){ isObjectUpdated = true; break;}
        if(price != nullptr && *price != QString("")){ isObjectUpdated = true; break;}
        if(volume != nullptr && *volume != QString("")){ isObjectUpdated = true; break;}
        if(funds != nullptr && *funds != QString("")){ isObjectUpdated = true; break;}
        if(side != nullptr && *side != QString("")){ isObjectUpdated = true; break;}
        if(created_at != nullptr && *created_at != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

