/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGWithdrawApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"
#include "SWGQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {

SWGWithdrawApi::SWGWithdrawApi() {}

SWGWithdrawApi::~SWGWithdrawApi() {}

SWGWithdrawApi::SWGWithdrawApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGWithdrawApi::withdraw_chance(QString* currency) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/withdraws/chance");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("currency"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(currency)));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGWithdrawApi::withdraw_chanceCallback);

    worker->execute(&input);
}

void
SWGWithdrawApi::withdraw_chanceCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGWithdrawChance* output = static_cast<SWGWithdrawChance*>(create(json, QString("SWGWithdrawChance")));
    auto wrapper = new SWGQObjectWrapper<SWGWithdrawChance*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit withdraw_chanceSignal(output);
    } else {
        emit withdraw_chanceSignalE(output, error_type, error_str);
        emit withdraw_chanceSignalEFull(worker, error_type, error_str);
    }
}

void
SWGWithdrawApi::withdraw_coin(QString* currency, QString* amount, QString* address, QString* secondary_address, QString* transaction_type) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/withdraws/coin");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");

    if (currency != nullptr) {
        input.add_var("currency", *currency);
    }
    if (amount != nullptr) {
        input.add_var("amount", *amount);
    }
    if (address != nullptr) {
        input.add_var("address", *address);
    }
    if (secondary_address != nullptr) {
        input.add_var("secondary_address", *secondary_address);
    }
    if (transaction_type != nullptr) {
        input.add_var("transaction_type", *transaction_type);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGWithdrawApi::withdraw_coinCallback);

    worker->execute(&input);
}

void
SWGWithdrawApi::withdraw_coinCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGWithdrawCoin* output = static_cast<SWGWithdrawCoin*>(create(json, QString("SWGWithdrawCoin")));
    auto wrapper = new SWGQObjectWrapper<SWGWithdrawCoin*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit withdraw_coinSignal(output);
    } else {
        emit withdraw_coinSignalE(output, error_type, error_str);
        emit withdraw_coinSignalEFull(worker, error_type, error_str);
    }
}

void
SWGWithdrawApi::withdraw_info(QString* uuid, QString* txid, QString* currency) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/withdraw");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("uuid"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(uuid)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("txid"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(txid)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("currency"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(currency)));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGWithdrawApi::withdraw_infoCallback);

    worker->execute(&input);
}

void
SWGWithdrawApi::withdraw_infoCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGWithdraw* output = static_cast<SWGWithdraw*>(create(json, QString("SWGWithdraw")));
    auto wrapper = new SWGQObjectWrapper<SWGWithdraw*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit withdraw_infoSignal(output);
    } else {
        emit withdraw_infoSignalE(output, error_type, error_str);
        emit withdraw_infoSignalEFull(worker, error_type, error_str);
    }
}

void
SWGWithdrawApi::withdraw_infoAll(QString* currency, QString* state, QList<QString*>* uuids, QList<QString*>* txids, SWGNumber* limit, SWGNumber* page, QString* order_by) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/withdraws");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("currency"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(currency)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("state"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(state)));



    if (uuids->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *uuids) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("uuids=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("uuids=");
        qint32 count = 0;
        foreach(QString* t, *uuids) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("uuids=");
        qint32 count = 0;
        foreach(QString* t, *uuids) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }



    if (txids->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *txids) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("txids=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("txids=");
        qint32 count = 0;
        foreach(QString* t, *txids) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("txids=");
        qint32 count = 0;
        foreach(QString* t, *txids) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("limit"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(limit)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("order_by"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(order_by)));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGWithdrawApi::withdraw_infoAllCallback);

    worker->execute(&input);
}

void
SWGWithdrawApi::withdraw_infoAllCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<SWGWithdraw*>* output = new QList<SWGWithdraw*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    auto wrapper = new SWGQObjectWrapper<QList<SWGWithdraw*>*> (output);
    wrapper->deleteLater();
    foreach(QJsonValue obj, jsonArray) {
        SWGWithdraw* o = new SWGWithdraw();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        auto objwrapper = new SWGQObjectWrapper<SWGWithdraw*> (o);
        objwrapper->deleteLater();
        output->append(o);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit withdraw_infoAllSignal(output);
    } else {
        emit withdraw_infoAllSignalE(output, error_type, error_str);
        emit withdraw_infoAllSignalEFull(worker, error_type, error_str);
    }
}

void
SWGWithdrawApi::withdraw_krw(QString* amount) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/withdraws/krw");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");

    if (amount != nullptr) {
        input.add_var("amount", *amount);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGWithdrawApi::withdraw_krwCallback);

    worker->execute(&input);
}

void
SWGWithdrawApi::withdraw_krwCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGWithdraw* output = static_cast<SWGWithdraw*>(create(json, QString("SWGWithdraw")));
    auto wrapper = new SWGQObjectWrapper<SWGWithdraw*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit withdraw_krwSignal(output);
    } else {
        emit withdraw_krwSignalE(output, error_type, error_str);
        emit withdraw_krwSignalEFull(worker, error_type, error_str);
    }
}


}
