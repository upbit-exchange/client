/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGCandleDays.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGCandleDays::SWGCandleDays(QString json) {
    init();
    this->fromJson(json);
}

SWGCandleDays::SWGCandleDays() {
    init();
}

SWGCandleDays::~SWGCandleDays() {
    this->cleanup();
}

void
SWGCandleDays::init() {
    market = new QString("");
    m_market_isSet = false;
    candle_date_time_utc = new QString("");
    m_candle_date_time_utc_isSet = false;
    candle_date_time_kst = new QString("");
    m_candle_date_time_kst_isSet = false;
    opening_price = 0.0;
    m_opening_price_isSet = false;
    high_price = 0.0;
    m_high_price_isSet = false;
    low_price = 0.0;
    m_low_price_isSet = false;
    trade_price = 0.0;
    m_trade_price_isSet = false;
    timestamp = 0.0;
    m_timestamp_isSet = false;
    candle_acc_trade_price = 0.0;
    m_candle_acc_trade_price_isSet = false;
    candle_acc_trade_volume = 0.0;
    m_candle_acc_trade_volume_isSet = false;
    prev_closing_price = 0.0;
    m_prev_closing_price_isSet = false;
    change_price = 0.0;
    m_change_price_isSet = false;
    change_rate = 0.0;
    m_change_rate_isSet = false;
    converted_trade_price = 0.0;
    m_converted_trade_price_isSet = false;
}

void
SWGCandleDays::cleanup() {
    if(market != nullptr) { 
        delete market;
    }
    if(candle_date_time_utc != nullptr) { 
        delete candle_date_time_utc;
    }
    if(candle_date_time_kst != nullptr) { 
        delete candle_date_time_kst;
    }




    if(timestamp != nullptr) { 
        delete timestamp;
    }






}

SWGCandleDays*
SWGCandleDays::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGCandleDays::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&market, pJson["market"], "QString", "QString");
    
    ::Swagger::setValue(&candle_date_time_utc, pJson["candle_date_time_utc"], "QString", "QString");
    
    ::Swagger::setValue(&candle_date_time_kst, pJson["candle_date_time_kst"], "QString", "QString");
    
    ::Swagger::setValue(&opening_price, pJson["opening_price"], "double", "");
    
    ::Swagger::setValue(&high_price, pJson["high_price"], "double", "");
    
    ::Swagger::setValue(&low_price, pJson["low_price"], "double", "");
    
    ::Swagger::setValue(&trade_price, pJson["trade_price"], "double", "");
    
    ::Swagger::setValue(&timestamp, pJson["timestamp"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&candle_acc_trade_price, pJson["candle_acc_trade_price"], "double", "");
    
    ::Swagger::setValue(&candle_acc_trade_volume, pJson["candle_acc_trade_volume"], "double", "");
    
    ::Swagger::setValue(&prev_closing_price, pJson["prev_closing_price"], "double", "");
    
    ::Swagger::setValue(&change_price, pJson["change_price"], "double", "");
    
    ::Swagger::setValue(&change_rate, pJson["change_rate"], "double", "");
    
    ::Swagger::setValue(&converted_trade_price, pJson["converted_trade_price"], "double", "");
    
}

QString
SWGCandleDays::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGCandleDays::asJsonObject() {
    QJsonObject obj;
    if(market != nullptr && *market != QString("")){
        toJsonValue(QString("market"), market, obj, QString("QString"));
    }
    if(candle_date_time_utc != nullptr && *candle_date_time_utc != QString("")){
        toJsonValue(QString("candle_date_time_utc"), candle_date_time_utc, obj, QString("QString"));
    }
    if(candle_date_time_kst != nullptr && *candle_date_time_kst != QString("")){
        toJsonValue(QString("candle_date_time_kst"), candle_date_time_kst, obj, QString("QString"));
    }
    if(m_opening_price_isSet){
        obj.insert("opening_price", QJsonValue(opening_price));
    }
    if(m_high_price_isSet){
        obj.insert("high_price", QJsonValue(high_price));
    }
    if(m_low_price_isSet){
        obj.insert("low_price", QJsonValue(low_price));
    }
    if(m_trade_price_isSet){
        obj.insert("trade_price", QJsonValue(trade_price));
    }
    if((timestamp != nullptr) && (timestamp->isSet())){
        toJsonValue(QString("timestamp"), timestamp, obj, QString("SWGNumber"));
    }
    if(m_candle_acc_trade_price_isSet){
        obj.insert("candle_acc_trade_price", QJsonValue(candle_acc_trade_price));
    }
    if(m_candle_acc_trade_volume_isSet){
        obj.insert("candle_acc_trade_volume", QJsonValue(candle_acc_trade_volume));
    }
    if(m_prev_closing_price_isSet){
        obj.insert("prev_closing_price", QJsonValue(prev_closing_price));
    }
    if(m_change_price_isSet){
        obj.insert("change_price", QJsonValue(change_price));
    }
    if(m_change_rate_isSet){
        obj.insert("change_rate", QJsonValue(change_rate));
    }
    if(m_converted_trade_price_isSet){
        obj.insert("converted_trade_price", QJsonValue(converted_trade_price));
    }

    return obj;
}

QString*
SWGCandleDays::getMarket() {
    return market;
}
void
SWGCandleDays::setMarket(QString* market) {
    this->market = market;
    this->m_market_isSet = true;
}

QString*
SWGCandleDays::getCandleDateTimeUtc() {
    return candle_date_time_utc;
}
void
SWGCandleDays::setCandleDateTimeUtc(QString* candle_date_time_utc) {
    this->candle_date_time_utc = candle_date_time_utc;
    this->m_candle_date_time_utc_isSet = true;
}

QString*
SWGCandleDays::getCandleDateTimeKst() {
    return candle_date_time_kst;
}
void
SWGCandleDays::setCandleDateTimeKst(QString* candle_date_time_kst) {
    this->candle_date_time_kst = candle_date_time_kst;
    this->m_candle_date_time_kst_isSet = true;
}

double
SWGCandleDays::getOpeningPrice() {
    return opening_price;
}
void
SWGCandleDays::setOpeningPrice(double opening_price) {
    this->opening_price = opening_price;
    this->m_opening_price_isSet = true;
}

double
SWGCandleDays::getHighPrice() {
    return high_price;
}
void
SWGCandleDays::setHighPrice(double high_price) {
    this->high_price = high_price;
    this->m_high_price_isSet = true;
}

double
SWGCandleDays::getLowPrice() {
    return low_price;
}
void
SWGCandleDays::setLowPrice(double low_price) {
    this->low_price = low_price;
    this->m_low_price_isSet = true;
}

double
SWGCandleDays::getTradePrice() {
    return trade_price;
}
void
SWGCandleDays::setTradePrice(double trade_price) {
    this->trade_price = trade_price;
    this->m_trade_price_isSet = true;
}

SWGNumber*
SWGCandleDays::getTimestamp() {
    return timestamp;
}
void
SWGCandleDays::setTimestamp(SWGNumber* timestamp) {
    this->timestamp = timestamp;
    this->m_timestamp_isSet = true;
}

double
SWGCandleDays::getCandleAccTradePrice() {
    return candle_acc_trade_price;
}
void
SWGCandleDays::setCandleAccTradePrice(double candle_acc_trade_price) {
    this->candle_acc_trade_price = candle_acc_trade_price;
    this->m_candle_acc_trade_price_isSet = true;
}

double
SWGCandleDays::getCandleAccTradeVolume() {
    return candle_acc_trade_volume;
}
void
SWGCandleDays::setCandleAccTradeVolume(double candle_acc_trade_volume) {
    this->candle_acc_trade_volume = candle_acc_trade_volume;
    this->m_candle_acc_trade_volume_isSet = true;
}

double
SWGCandleDays::getPrevClosingPrice() {
    return prev_closing_price;
}
void
SWGCandleDays::setPrevClosingPrice(double prev_closing_price) {
    this->prev_closing_price = prev_closing_price;
    this->m_prev_closing_price_isSet = true;
}

double
SWGCandleDays::getChangePrice() {
    return change_price;
}
void
SWGCandleDays::setChangePrice(double change_price) {
    this->change_price = change_price;
    this->m_change_price_isSet = true;
}

double
SWGCandleDays::getChangeRate() {
    return change_rate;
}
void
SWGCandleDays::setChangeRate(double change_rate) {
    this->change_rate = change_rate;
    this->m_change_rate_isSet = true;
}

double
SWGCandleDays::getConvertedTradePrice() {
    return converted_trade_price;
}
void
SWGCandleDays::setConvertedTradePrice(double converted_trade_price) {
    this->converted_trade_price = converted_trade_price;
    this->m_converted_trade_price_isSet = true;
}


bool
SWGCandleDays::isSet(){
    bool isObjectUpdated = false;
    do{
        if(market != nullptr && *market != QString("")){ isObjectUpdated = true; break;}
        if(candle_date_time_utc != nullptr && *candle_date_time_utc != QString("")){ isObjectUpdated = true; break;}
        if(candle_date_time_kst != nullptr && *candle_date_time_kst != QString("")){ isObjectUpdated = true; break;}
        if(m_opening_price_isSet){ isObjectUpdated = true; break;}
        if(m_high_price_isSet){ isObjectUpdated = true; break;}
        if(m_low_price_isSet){ isObjectUpdated = true; break;}
        if(m_trade_price_isSet){ isObjectUpdated = true; break;}
        if(timestamp != nullptr && timestamp->isSet()){ isObjectUpdated = true; break;}
        if(m_candle_acc_trade_price_isSet){ isObjectUpdated = true; break;}
        if(m_candle_acc_trade_volume_isSet){ isObjectUpdated = true; break;}
        if(m_prev_closing_price_isSet){ isObjectUpdated = true; break;}
        if(m_change_price_isSet){ isObjectUpdated = true; break;}
        if(m_change_rate_isSet){ isObjectUpdated = true; break;}
        if(m_converted_trade_price_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

