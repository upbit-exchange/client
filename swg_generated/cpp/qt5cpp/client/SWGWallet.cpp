/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGWallet.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGWallet::SWGWallet(QString json) {
    init();
    this->fromJson(json);
}

SWGWallet::SWGWallet() {
    init();
}

SWGWallet::~SWGWallet() {
    this->cleanup();
}

void
SWGWallet::init() {
    currency = new QString("");
    m_currency_isSet = false;
    wallet_state = new QString("");
    m_wallet_state_isSet = false;
    block_state = new QString("");
    m_block_state_isSet = false;
    block_height = 0.0;
    m_block_height_isSet = false;
    block_updated_at = new QString("");
    m_block_updated_at_isSet = false;
}

void
SWGWallet::cleanup() {
    if(currency != nullptr) { 
        delete currency;
    }
    if(wallet_state != nullptr) { 
        delete wallet_state;
    }
    if(block_state != nullptr) { 
        delete block_state;
    }
    if(block_height != nullptr) { 
        delete block_height;
    }
    if(block_updated_at != nullptr) { 
        delete block_updated_at;
    }
}

SWGWallet*
SWGWallet::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGWallet::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&currency, pJson["currency"], "QString", "QString");
    
    ::Swagger::setValue(&wallet_state, pJson["wallet_state"], "QString", "QString");
    
    ::Swagger::setValue(&block_state, pJson["block_state"], "QString", "QString");
    
    ::Swagger::setValue(&block_height, pJson["block_height"], "SWGNumber", "SWGNumber");
    
    ::Swagger::setValue(&block_updated_at, pJson["block_updated_at"], "QString", "QString");
    
}

QString
SWGWallet::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGWallet::asJsonObject() {
    QJsonObject obj;
    if(currency != nullptr && *currency != QString("")){
        toJsonValue(QString("currency"), currency, obj, QString("QString"));
    }
    if(wallet_state != nullptr && *wallet_state != QString("")){
        toJsonValue(QString("wallet_state"), wallet_state, obj, QString("QString"));
    }
    if(block_state != nullptr && *block_state != QString("")){
        toJsonValue(QString("block_state"), block_state, obj, QString("QString"));
    }
    if((block_height != nullptr) && (block_height->isSet())){
        toJsonValue(QString("block_height"), block_height, obj, QString("SWGNumber"));
    }
    if(block_updated_at != nullptr && *block_updated_at != QString("")){
        toJsonValue(QString("block_updated_at"), block_updated_at, obj, QString("QString"));
    }

    return obj;
}

QString*
SWGWallet::getCurrency() {
    return currency;
}
void
SWGWallet::setCurrency(QString* currency) {
    this->currency = currency;
    this->m_currency_isSet = true;
}

QString*
SWGWallet::getWalletState() {
    return wallet_state;
}
void
SWGWallet::setWalletState(QString* wallet_state) {
    this->wallet_state = wallet_state;
    this->m_wallet_state_isSet = true;
}

QString*
SWGWallet::getBlockState() {
    return block_state;
}
void
SWGWallet::setBlockState(QString* block_state) {
    this->block_state = block_state;
    this->m_block_state_isSet = true;
}

SWGNumber*
SWGWallet::getBlockHeight() {
    return block_height;
}
void
SWGWallet::setBlockHeight(SWGNumber* block_height) {
    this->block_height = block_height;
    this->m_block_height_isSet = true;
}

QString*
SWGWallet::getBlockUpdatedAt() {
    return block_updated_at;
}
void
SWGWallet::setBlockUpdatedAt(QString* block_updated_at) {
    this->block_updated_at = block_updated_at;
    this->m_block_updated_at_isSet = true;
}


bool
SWGWallet::isSet(){
    bool isObjectUpdated = false;
    do{
        if(currency != nullptr && *currency != QString("")){ isObjectUpdated = true; break;}
        if(wallet_state != nullptr && *wallet_state != QString("")){ isObjectUpdated = true; break;}
        if(block_state != nullptr && *block_state != QString("")){ isObjectUpdated = true; break;}
        if(block_height != nullptr && block_height->isSet()){ isObjectUpdated = true; break;}
        if(block_updated_at != nullptr && *block_updated_at != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

