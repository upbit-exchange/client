/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGCandleApi_H_
#define _SWG_SWGCandleApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGError.h"
#include "SWGNumber.h"
#include "SWGObject.h"

#include <QObject>

namespace Swagger {

class SWGCandleApi: public QObject {
    Q_OBJECT

public:
    SWGCandleApi();
    SWGCandleApi(QString host, QString basePath);
    ~SWGCandleApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void candle_days(QString* market, QString* to, SWGNumber* count, QString* converting_price_unit);
    void candle_minutes(qint32 unit, QString* market, QString* to, SWGNumber* count);
    void candle_month(QString* market, QString* to, SWGNumber* count);
    void candle_weeks(QString* market, QString* to, SWGNumber* count);
    
private:
    void candle_daysCallback (SWGHttpRequestWorker * worker);
    void candle_minutesCallback (SWGHttpRequestWorker * worker);
    void candle_monthCallback (SWGHttpRequestWorker * worker);
    void candle_weeksCallback (SWGHttpRequestWorker * worker);
    
signals:
    void candle_daysSignal(SWGObject* summary);
    void candle_minutesSignal(SWGObject* summary);
    void candle_monthSignal(SWGObject* summary);
    void candle_weeksSignal(SWGObject* summary);
    
    void candle_daysSignalE(SWGObject* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void candle_minutesSignalE(SWGObject* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void candle_monthSignalE(SWGObject* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void candle_weeksSignalE(SWGObject* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void candle_daysSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void candle_minutesSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void candle_monthSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void candle_weeksSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
