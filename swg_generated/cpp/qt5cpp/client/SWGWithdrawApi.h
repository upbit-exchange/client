/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGWithdrawApi_H_
#define _SWG_SWGWithdrawApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGError.h"
#include "SWGNumber.h"
#include "SWGWithdraw.h"
#include "SWGWithdrawChance.h"
#include "SWGWithdrawCoin.h"

#include <QObject>

namespace Swagger {

class SWGWithdrawApi: public QObject {
    Q_OBJECT

public:
    SWGWithdrawApi();
    SWGWithdrawApi(QString host, QString basePath);
    ~SWGWithdrawApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void withdraw_chance(QString* currency);
    void withdraw_coin(QString* currency, QString* amount, QString* address, QString* secondary_address, QString* transaction_type);
    void withdraw_info(QString* uuid, QString* txid, QString* currency);
    void withdraw_infoAll(QString* currency, QString* state, QList<QString*>* uuids, QList<QString*>* txids, SWGNumber* limit, SWGNumber* page, QString* order_by);
    void withdraw_krw(QString* amount);
    
private:
    void withdraw_chanceCallback (SWGHttpRequestWorker * worker);
    void withdraw_coinCallback (SWGHttpRequestWorker * worker);
    void withdraw_infoCallback (SWGHttpRequestWorker * worker);
    void withdraw_infoAllCallback (SWGHttpRequestWorker * worker);
    void withdraw_krwCallback (SWGHttpRequestWorker * worker);
    
signals:
    void withdraw_chanceSignal(SWGWithdrawChance* summary);
    void withdraw_coinSignal(SWGWithdrawCoin* summary);
    void withdraw_infoSignal(SWGWithdraw* summary);
    void withdraw_infoAllSignal(QList<SWGWithdraw*>* summary);
    void withdraw_krwSignal(SWGWithdraw* summary);
    
    void withdraw_chanceSignalE(SWGWithdrawChance* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void withdraw_coinSignalE(SWGWithdrawCoin* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void withdraw_infoSignalE(SWGWithdraw* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void withdraw_infoAllSignalE(QList<SWGWithdraw*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void withdraw_krwSignalE(SWGWithdraw* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void withdraw_chanceSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void withdraw_coinSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void withdraw_infoSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void withdraw_infoAllSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void withdraw_krwSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
