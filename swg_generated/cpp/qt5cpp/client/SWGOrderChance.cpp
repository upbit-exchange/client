/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGOrderChance.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGOrderChance::SWGOrderChance(QString json) {
    init();
    this->fromJson(json);
}

SWGOrderChance::SWGOrderChance() {
    init();
}

SWGOrderChance::~SWGOrderChance() {
    this->cleanup();
}

void
SWGOrderChance::init() {
    bid_fee = new QString("");
    m_bid_fee_isSet = false;
    ask_fee = new QString("");
    m_ask_fee_isSet = false;
    market = new SWGMarket();
    m_market_isSet = false;
    bid_account = new SWGBidAccount();
    m_bid_account_isSet = false;
    ask_account = new SWGAskAccount();
    m_ask_account_isSet = false;
}

void
SWGOrderChance::cleanup() {
    if(bid_fee != nullptr) { 
        delete bid_fee;
    }
    if(ask_fee != nullptr) { 
        delete ask_fee;
    }
    if(market != nullptr) { 
        delete market;
    }
    if(bid_account != nullptr) { 
        delete bid_account;
    }
    if(ask_account != nullptr) { 
        delete ask_account;
    }
}

SWGOrderChance*
SWGOrderChance::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGOrderChance::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&bid_fee, pJson["bid_fee"], "QString", "QString");
    
    ::Swagger::setValue(&ask_fee, pJson["ask_fee"], "QString", "QString");
    
    ::Swagger::setValue(&market, pJson["market"], "SWGMarket", "SWGMarket");
    
    ::Swagger::setValue(&bid_account, pJson["bid_account"], "SWGBidAccount", "SWGBidAccount");
    
    ::Swagger::setValue(&ask_account, pJson["ask_account"], "SWGAskAccount", "SWGAskAccount");
    
}

QString
SWGOrderChance::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGOrderChance::asJsonObject() {
    QJsonObject obj;
    if(bid_fee != nullptr && *bid_fee != QString("")){
        toJsonValue(QString("bid_fee"), bid_fee, obj, QString("QString"));
    }
    if(ask_fee != nullptr && *ask_fee != QString("")){
        toJsonValue(QString("ask_fee"), ask_fee, obj, QString("QString"));
    }
    if((market != nullptr) && (market->isSet())){
        toJsonValue(QString("market"), market, obj, QString("SWGMarket"));
    }
    if((bid_account != nullptr) && (bid_account->isSet())){
        toJsonValue(QString("bid_account"), bid_account, obj, QString("SWGBidAccount"));
    }
    if((ask_account != nullptr) && (ask_account->isSet())){
        toJsonValue(QString("ask_account"), ask_account, obj, QString("SWGAskAccount"));
    }

    return obj;
}

QString*
SWGOrderChance::getBidFee() {
    return bid_fee;
}
void
SWGOrderChance::setBidFee(QString* bid_fee) {
    this->bid_fee = bid_fee;
    this->m_bid_fee_isSet = true;
}

QString*
SWGOrderChance::getAskFee() {
    return ask_fee;
}
void
SWGOrderChance::setAskFee(QString* ask_fee) {
    this->ask_fee = ask_fee;
    this->m_ask_fee_isSet = true;
}

SWGMarket*
SWGOrderChance::getMarket() {
    return market;
}
void
SWGOrderChance::setMarket(SWGMarket* market) {
    this->market = market;
    this->m_market_isSet = true;
}

SWGBidAccount*
SWGOrderChance::getBidAccount() {
    return bid_account;
}
void
SWGOrderChance::setBidAccount(SWGBidAccount* bid_account) {
    this->bid_account = bid_account;
    this->m_bid_account_isSet = true;
}

SWGAskAccount*
SWGOrderChance::getAskAccount() {
    return ask_account;
}
void
SWGOrderChance::setAskAccount(SWGAskAccount* ask_account) {
    this->ask_account = ask_account;
    this->m_ask_account_isSet = true;
}


bool
SWGOrderChance::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bid_fee != nullptr && *bid_fee != QString("")){ isObjectUpdated = true; break;}
        if(ask_fee != nullptr && *ask_fee != QString("")){ isObjectUpdated = true; break;}
        if(market != nullptr && market->isSet()){ isObjectUpdated = true; break;}
        if(bid_account != nullptr && bid_account->isSet()){ isObjectUpdated = true; break;}
        if(ask_account != nullptr && ask_account->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

