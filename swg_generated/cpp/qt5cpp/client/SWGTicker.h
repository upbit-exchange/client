/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGTicker.h
 *
 * 
 */

#ifndef SWGTicker_H_
#define SWGTicker_H_

#include <QJsonObject>


#include "SWGNumber.h"
#include <QString>

#include "SWGObject.h"

namespace Swagger {

class SWGTicker: public SWGObject {
public:
    SWGTicker();
    SWGTicker(QString json);
    ~SWGTicker();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    SWGTicker* fromJson(QString jsonString) override;

    QString* getMarket();
    void setMarket(QString* market);

    QString* getTradeDate();
    void setTradeDate(QString* trade_date);

    QString* getTradeTime();
    void setTradeTime(QString* trade_time);

    QString* getTradeDateKst();
    void setTradeDateKst(QString* trade_date_kst);

    QString* getTradeTimeKst();
    void setTradeTimeKst(QString* trade_time_kst);

    double getOpeningPrice();
    void setOpeningPrice(double opening_price);

    double getHighPrice();
    void setHighPrice(double high_price);

    double getLowPrice();
    void setLowPrice(double low_price);

    double getTradePrice();
    void setTradePrice(double trade_price);

    double getPrevClosingPrice();
    void setPrevClosingPrice(double prev_closing_price);

    QString* getChange();
    void setChange(QString* change);

    double getChangePrice();
    void setChangePrice(double change_price);

    double getChangeRate();
    void setChangeRate(double change_rate);

    double getSignedChangePrice();
    void setSignedChangePrice(double signed_change_price);

    double getSignedChangeRate();
    void setSignedChangeRate(double signed_change_rate);

    double getTradeVolume();
    void setTradeVolume(double trade_volume);

    double getAccTradePrice();
    void setAccTradePrice(double acc_trade_price);

    double getAccTradePrice24h();
    void setAccTradePrice24h(double acc_trade_price_24h);

    double getAccTradeVolume();
    void setAccTradeVolume(double acc_trade_volume);

    double getAccTradeVolume24h();
    void setAccTradeVolume24h(double acc_trade_volume_24h);

    double getHighest52WeekPrice();
    void setHighest52WeekPrice(double highest_52_week_price);

    QString* getHighest52WeekDate();
    void setHighest52WeekDate(QString* highest_52_week_date);

    double getLowest52WeekPrice();
    void setLowest52WeekPrice(double lowest_52_week_price);

    QString* getLowest52WeekDate();
    void setLowest52WeekDate(QString* lowest_52_week_date);

    SWGNumber* getTimestamp();
    void setTimestamp(SWGNumber* timestamp);


    virtual bool isSet() override;

private:
    QString* market;
    bool m_market_isSet;

    QString* trade_date;
    bool m_trade_date_isSet;

    QString* trade_time;
    bool m_trade_time_isSet;

    QString* trade_date_kst;
    bool m_trade_date_kst_isSet;

    QString* trade_time_kst;
    bool m_trade_time_kst_isSet;

    double opening_price;
    bool m_opening_price_isSet;

    double high_price;
    bool m_high_price_isSet;

    double low_price;
    bool m_low_price_isSet;

    double trade_price;
    bool m_trade_price_isSet;

    double prev_closing_price;
    bool m_prev_closing_price_isSet;

    QString* change;
    bool m_change_isSet;

    double change_price;
    bool m_change_price_isSet;

    double change_rate;
    bool m_change_rate_isSet;

    double signed_change_price;
    bool m_signed_change_price_isSet;

    double signed_change_rate;
    bool m_signed_change_rate_isSet;

    double trade_volume;
    bool m_trade_volume_isSet;

    double acc_trade_price;
    bool m_acc_trade_price_isSet;

    double acc_trade_price_24h;
    bool m_acc_trade_price_24h_isSet;

    double acc_trade_volume;
    bool m_acc_trade_volume_isSet;

    double acc_trade_volume_24h;
    bool m_acc_trade_volume_24h_isSet;

    double highest_52_week_price;
    bool m_highest_52_week_price_isSet;

    QString* highest_52_week_date;
    bool m_highest_52_week_date_isSet;

    double lowest_52_week_price;
    bool m_lowest_52_week_price_isSet;

    QString* lowest_52_week_date;
    bool m_lowest_52_week_date_isSet;

    SWGNumber* timestamp;
    bool m_timestamp_isSet;

};

}

#endif /* SWGTicker_H_ */
