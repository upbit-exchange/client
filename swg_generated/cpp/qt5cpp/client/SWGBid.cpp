/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGBid.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGBid::SWGBid(QString json) {
    init();
    this->fromJson(json);
}

SWGBid::SWGBid() {
    init();
}

SWGBid::~SWGBid() {
    this->cleanup();
}

void
SWGBid::init() {
    currency = new QString("");
    m_currency_isSet = false;
    price_unit = new QString("");
    m_price_unit_isSet = false;
    min_total = 0.0;
    m_min_total_isSet = false;
}

void
SWGBid::cleanup() {
    if(currency != nullptr) { 
        delete currency;
    }
    if(price_unit != nullptr) { 
        delete price_unit;
    }
    if(min_total != nullptr) { 
        delete min_total;
    }
}

SWGBid*
SWGBid::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGBid::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&currency, pJson["currency"], "QString", "QString");
    
    ::Swagger::setValue(&price_unit, pJson["price_unit"], "QString", "QString");
    
    ::Swagger::setValue(&min_total, pJson["min_total"], "SWGNumber", "SWGNumber");
    
}

QString
SWGBid::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGBid::asJsonObject() {
    QJsonObject obj;
    if(currency != nullptr && *currency != QString("")){
        toJsonValue(QString("currency"), currency, obj, QString("QString"));
    }
    if(price_unit != nullptr && *price_unit != QString("")){
        toJsonValue(QString("price_unit"), price_unit, obj, QString("QString"));
    }
    if((min_total != nullptr) && (min_total->isSet())){
        toJsonValue(QString("min_total"), min_total, obj, QString("SWGNumber"));
    }

    return obj;
}

QString*
SWGBid::getCurrency() {
    return currency;
}
void
SWGBid::setCurrency(QString* currency) {
    this->currency = currency;
    this->m_currency_isSet = true;
}

QString*
SWGBid::getPriceUnit() {
    return price_unit;
}
void
SWGBid::setPriceUnit(QString* price_unit) {
    this->price_unit = price_unit;
    this->m_price_unit_isSet = true;
}

SWGNumber*
SWGBid::getMinTotal() {
    return min_total;
}
void
SWGBid::setMinTotal(SWGNumber* min_total) {
    this->min_total = min_total;
    this->m_min_total_isSet = true;
}


bool
SWGBid::isSet(){
    bool isObjectUpdated = false;
    do{
        if(currency != nullptr && *currency != QString("")){ isObjectUpdated = true; break;}
        if(price_unit != nullptr && *price_unit != QString("")){ isObjectUpdated = true; break;}
        if(min_total != nullptr && min_total->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

