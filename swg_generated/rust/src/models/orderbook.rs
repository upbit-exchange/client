/* 
 * Upbit Open API
 *
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Orderbook {
  /// 마켓 코드
  #[serde(rename = "market")]
  market: Option<String>,
  /// 호가 생성 시각
  #[serde(rename = "timestamp")]
  timestamp: Option<f32>,
  /// 호가 매도 총 잔량
  #[serde(rename = "total_ask_size")]
  total_ask_size: Option<f64>,
  /// 호가 매수 총량
  #[serde(rename = "total_bid_size")]
  total_bid_size: Option<f64>,
  /// 호가
  #[serde(rename = "orderbook_units")]
  orderbook_units: Option<Vec<::models::OrderbookUnit>>
}

impl Orderbook {
  pub fn new() -> Orderbook {
    Orderbook {
      market: None,
      timestamp: None,
      total_ask_size: None,
      total_bid_size: None,
      orderbook_units: None
    }
  }

  pub fn set_market(&mut self, market: String) {
    self.market = Some(market);
  }

  pub fn with_market(mut self, market: String) -> Orderbook {
    self.market = Some(market);
    self
  }

  pub fn market(&self) -> Option<&String> {
    self.market.as_ref()
  }

  pub fn reset_market(&mut self) {
    self.market = None;
  }

  pub fn set_timestamp(&mut self, timestamp: f32) {
    self.timestamp = Some(timestamp);
  }

  pub fn with_timestamp(mut self, timestamp: f32) -> Orderbook {
    self.timestamp = Some(timestamp);
    self
  }

  pub fn timestamp(&self) -> Option<&f32> {
    self.timestamp.as_ref()
  }

  pub fn reset_timestamp(&mut self) {
    self.timestamp = None;
  }

  pub fn set_total_ask_size(&mut self, total_ask_size: f64) {
    self.total_ask_size = Some(total_ask_size);
  }

  pub fn with_total_ask_size(mut self, total_ask_size: f64) -> Orderbook {
    self.total_ask_size = Some(total_ask_size);
    self
  }

  pub fn total_ask_size(&self) -> Option<&f64> {
    self.total_ask_size.as_ref()
  }

  pub fn reset_total_ask_size(&mut self) {
    self.total_ask_size = None;
  }

  pub fn set_total_bid_size(&mut self, total_bid_size: f64) {
    self.total_bid_size = Some(total_bid_size);
  }

  pub fn with_total_bid_size(mut self, total_bid_size: f64) -> Orderbook {
    self.total_bid_size = Some(total_bid_size);
    self
  }

  pub fn total_bid_size(&self) -> Option<&f64> {
    self.total_bid_size.as_ref()
  }

  pub fn reset_total_bid_size(&mut self) {
    self.total_bid_size = None;
  }

  pub fn set_orderbook_units(&mut self, orderbook_units: Vec<::models::OrderbookUnit>) {
    self.orderbook_units = Some(orderbook_units);
  }

  pub fn with_orderbook_units(mut self, orderbook_units: Vec<::models::OrderbookUnit>) -> Orderbook {
    self.orderbook_units = Some(orderbook_units);
    self
  }

  pub fn orderbook_units(&self) -> Option<&Vec<::models::OrderbookUnit>> {
    self.orderbook_units.as_ref()
  }

  pub fn reset_orderbook_units(&mut self) {
    self.orderbook_units = None;
  }

}



