/* 
 * Upbit Open API
 *
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct MarketInfo {
  /// 업비트에서 제공중인 시장 정보
  #[serde(rename = "market")]
  market: Option<String>,
  /// 거래 대상 암호화폐 한글명
  #[serde(rename = "korean_name")]
  korean_name: Option<String>,
  /// 거래 대상 암호화폐 영문명
  #[serde(rename = "english_name")]
  english_name: Option<String>,
  /// 유의 종목 여부 - NONE (해당 사항 없음) - CAUTION (투자유의) 
  #[serde(rename = "market_warning")]
  market_warning: Option<String>
}

impl MarketInfo {
  pub fn new() -> MarketInfo {
    MarketInfo {
      market: None,
      korean_name: None,
      english_name: None,
      market_warning: None
    }
  }

  pub fn set_market(&mut self, market: String) {
    self.market = Some(market);
  }

  pub fn with_market(mut self, market: String) -> MarketInfo {
    self.market = Some(market);
    self
  }

  pub fn market(&self) -> Option<&String> {
    self.market.as_ref()
  }

  pub fn reset_market(&mut self) {
    self.market = None;
  }

  pub fn set_korean_name(&mut self, korean_name: String) {
    self.korean_name = Some(korean_name);
  }

  pub fn with_korean_name(mut self, korean_name: String) -> MarketInfo {
    self.korean_name = Some(korean_name);
    self
  }

  pub fn korean_name(&self) -> Option<&String> {
    self.korean_name.as_ref()
  }

  pub fn reset_korean_name(&mut self) {
    self.korean_name = None;
  }

  pub fn set_english_name(&mut self, english_name: String) {
    self.english_name = Some(english_name);
  }

  pub fn with_english_name(mut self, english_name: String) -> MarketInfo {
    self.english_name = Some(english_name);
    self
  }

  pub fn english_name(&self) -> Option<&String> {
    self.english_name.as_ref()
  }

  pub fn reset_english_name(&mut self) {
    self.english_name = None;
  }

  pub fn set_market_warning(&mut self, market_warning: String) {
    self.market_warning = Some(market_warning);
  }

  pub fn with_market_warning(mut self, market_warning: String) -> MarketInfo {
    self.market_warning = Some(market_warning);
    self
  }

  pub fn market_warning(&self) -> Option<&String> {
    self.market_warning.as_ref()
  }

  pub fn reset_market_warning(&mut self) {
    self.market_warning = None;
  }

}



