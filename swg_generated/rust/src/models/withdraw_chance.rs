/* 
 * Upbit Open API
 *
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct WithdrawChance {
  #[serde(rename = "member_level")]
  member_level: Option<::models::MemberLevel>,
  #[serde(rename = "currency")]
  currency: Option<::models::Currency>,
  #[serde(rename = "account")]
  account: Option<::models::Account>,
  #[serde(rename = "withdraw_limit")]
  withdraw_limit: Option<::models::WithdrawLimit>
}

impl WithdrawChance {
  pub fn new() -> WithdrawChance {
    WithdrawChance {
      member_level: None,
      currency: None,
      account: None,
      withdraw_limit: None
    }
  }

  pub fn set_member_level(&mut self, member_level: ::models::MemberLevel) {
    self.member_level = Some(member_level);
  }

  pub fn with_member_level(mut self, member_level: ::models::MemberLevel) -> WithdrawChance {
    self.member_level = Some(member_level);
    self
  }

  pub fn member_level(&self) -> Option<&::models::MemberLevel> {
    self.member_level.as_ref()
  }

  pub fn reset_member_level(&mut self) {
    self.member_level = None;
  }

  pub fn set_currency(&mut self, currency: ::models::Currency) {
    self.currency = Some(currency);
  }

  pub fn with_currency(mut self, currency: ::models::Currency) -> WithdrawChance {
    self.currency = Some(currency);
    self
  }

  pub fn currency(&self) -> Option<&::models::Currency> {
    self.currency.as_ref()
  }

  pub fn reset_currency(&mut self) {
    self.currency = None;
  }

  pub fn set_account(&mut self, account: ::models::Account) {
    self.account = Some(account);
  }

  pub fn with_account(mut self, account: ::models::Account) -> WithdrawChance {
    self.account = Some(account);
    self
  }

  pub fn account(&self) -> Option<&::models::Account> {
    self.account.as_ref()
  }

  pub fn reset_account(&mut self) {
    self.account = None;
  }

  pub fn set_withdraw_limit(&mut self, withdraw_limit: ::models::WithdrawLimit) {
    self.withdraw_limit = Some(withdraw_limit);
  }

  pub fn with_withdraw_limit(mut self, withdraw_limit: ::models::WithdrawLimit) -> WithdrawChance {
    self.withdraw_limit = Some(withdraw_limit);
    self
  }

  pub fn withdraw_limit(&self) -> Option<&::models::WithdrawLimit> {
    self.withdraw_limit.as_ref()
  }

  pub fn reset_withdraw_limit(&mut self) {
    self.withdraw_limit = None;
  }

}



