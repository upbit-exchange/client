/* 
 * Upbit Open API
 *
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Wallet {
  /// 화폐를 의미하는 영문 대문자 코드
  #[serde(rename = "currency")]
  currency: Option<String>,
  /// 입출금 상태 - working : 입출금 가능 - withdraw_only : 출금만 가능 - deposit_only : 입금만 가능 - paused : 입출금 중단 - unsupported : 입출금 미지원 
  #[serde(rename = "wallet_state")]
  wallet_state: Option<String>,
  /// 블록 상태 - normal : 정상 - delayed : 지연 - inactive : 비활성 (점검 등) 
  #[serde(rename = "block_state")]
  block_state: Option<String>,
  /// 블록 높이
  #[serde(rename = "block_height")]
  block_height: Option<f32>,
  /// 블록 갱신 시각
  #[serde(rename = "block_updated_at")]
  block_updated_at: Option<String>
}

impl Wallet {
  pub fn new() -> Wallet {
    Wallet {
      currency: None,
      wallet_state: None,
      block_state: None,
      block_height: None,
      block_updated_at: None
    }
  }

  pub fn set_currency(&mut self, currency: String) {
    self.currency = Some(currency);
  }

  pub fn with_currency(mut self, currency: String) -> Wallet {
    self.currency = Some(currency);
    self
  }

  pub fn currency(&self) -> Option<&String> {
    self.currency.as_ref()
  }

  pub fn reset_currency(&mut self) {
    self.currency = None;
  }

  pub fn set_wallet_state(&mut self, wallet_state: String) {
    self.wallet_state = Some(wallet_state);
  }

  pub fn with_wallet_state(mut self, wallet_state: String) -> Wallet {
    self.wallet_state = Some(wallet_state);
    self
  }

  pub fn wallet_state(&self) -> Option<&String> {
    self.wallet_state.as_ref()
  }

  pub fn reset_wallet_state(&mut self) {
    self.wallet_state = None;
  }

  pub fn set_block_state(&mut self, block_state: String) {
    self.block_state = Some(block_state);
  }

  pub fn with_block_state(mut self, block_state: String) -> Wallet {
    self.block_state = Some(block_state);
    self
  }

  pub fn block_state(&self) -> Option<&String> {
    self.block_state.as_ref()
  }

  pub fn reset_block_state(&mut self) {
    self.block_state = None;
  }

  pub fn set_block_height(&mut self, block_height: f32) {
    self.block_height = Some(block_height);
  }

  pub fn with_block_height(mut self, block_height: f32) -> Wallet {
    self.block_height = Some(block_height);
    self
  }

  pub fn block_height(&self) -> Option<&f32> {
    self.block_height.as_ref()
  }

  pub fn reset_block_height(&mut self) {
    self.block_height = None;
  }

  pub fn set_block_updated_at(&mut self, block_updated_at: String) {
    self.block_updated_at = Some(block_updated_at);
  }

  pub fn with_block_updated_at(mut self, block_updated_at: String) -> Wallet {
    self.block_updated_at = Some(block_updated_at);
    self
  }

  pub fn block_updated_at(&self) -> Option<&String> {
    self.block_updated_at.as_ref()
  }

  pub fn reset_block_updated_at(&mut self) {
    self.block_updated_at = None;
  }

}



