/* 
 * Upbit Open API
 *
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Market : 마켓에 대한 정보

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Market {
  /// 마켓 ID
  #[serde(rename = "id")]
  id: Option<String>,
  /// 마켓 이름
  #[serde(rename = "name")]
  name: Option<String>,
  /// 지원 주문 방식
  #[serde(rename = "order_types")]
  order_types: Option<Vec<String>>,
  /// 지원 주문 종류
  #[serde(rename = "order_sides")]
  order_sides: Option<Vec<String>>,
  #[serde(rename = "bid")]
  bid: Option<::models::Bid>,
  #[serde(rename = "ask")]
  ask: Option<::models::Ask>,
  /// 최대 매도/매수 금액
  #[serde(rename = "max_total")]
  max_total: Option<String>,
  /// 마켓 운영 상태
  #[serde(rename = "state")]
  state: Option<String>
}

impl Market {
  /// 마켓에 대한 정보
  pub fn new() -> Market {
    Market {
      id: None,
      name: None,
      order_types: None,
      order_sides: None,
      bid: None,
      ask: None,
      max_total: None,
      state: None
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> Market {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> Market {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_order_types(&mut self, order_types: Vec<String>) {
    self.order_types = Some(order_types);
  }

  pub fn with_order_types(mut self, order_types: Vec<String>) -> Market {
    self.order_types = Some(order_types);
    self
  }

  pub fn order_types(&self) -> Option<&Vec<String>> {
    self.order_types.as_ref()
  }

  pub fn reset_order_types(&mut self) {
    self.order_types = None;
  }

  pub fn set_order_sides(&mut self, order_sides: Vec<String>) {
    self.order_sides = Some(order_sides);
  }

  pub fn with_order_sides(mut self, order_sides: Vec<String>) -> Market {
    self.order_sides = Some(order_sides);
    self
  }

  pub fn order_sides(&self) -> Option<&Vec<String>> {
    self.order_sides.as_ref()
  }

  pub fn reset_order_sides(&mut self) {
    self.order_sides = None;
  }

  pub fn set_bid(&mut self, bid: ::models::Bid) {
    self.bid = Some(bid);
  }

  pub fn with_bid(mut self, bid: ::models::Bid) -> Market {
    self.bid = Some(bid);
    self
  }

  pub fn bid(&self) -> Option<&::models::Bid> {
    self.bid.as_ref()
  }

  pub fn reset_bid(&mut self) {
    self.bid = None;
  }

  pub fn set_ask(&mut self, ask: ::models::Ask) {
    self.ask = Some(ask);
  }

  pub fn with_ask(mut self, ask: ::models::Ask) -> Market {
    self.ask = Some(ask);
    self
  }

  pub fn ask(&self) -> Option<&::models::Ask> {
    self.ask.as_ref()
  }

  pub fn reset_ask(&mut self) {
    self.ask = None;
  }

  pub fn set_max_total(&mut self, max_total: String) {
    self.max_total = Some(max_total);
  }

  pub fn with_max_total(mut self, max_total: String) -> Market {
    self.max_total = Some(max_total);
    self
  }

  pub fn max_total(&self) -> Option<&String> {
    self.max_total.as_ref()
  }

  pub fn reset_max_total(&mut self) {
    self.max_total = None;
  }

  pub fn set_state(&mut self, state: String) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: String) -> Market {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&String> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

}



