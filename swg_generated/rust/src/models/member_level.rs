/* 
 * Upbit Open API
 *
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// MemberLevel : 사용자의 보안등급 정보

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct MemberLevel {
  /// 사용자의 보안 등급
  #[serde(rename = "security_level")]
  security_level: Option<f32>,
  /// 사용자의 수수료 등급
  #[serde(rename = "fee_level")]
  fee_level: Option<f32>,
  /// 사용자의 이메일 인증 여부
  #[serde(rename = "email_verified")]
  email_verified: Option<bool>,
  /// 사용자의 실명 인증 여부
  #[serde(rename = "identity_auth_verified")]
  identity_auth_verified: Option<bool>,
  /// 사용자의 계좌 인증 여부
  #[serde(rename = "bank_account_verified")]
  bank_account_verified: Option<bool>,
  /// 사용자의 카카오페이 인증 여부
  #[serde(rename = "kakao_pay_auth_verified")]
  kakao_pay_auth_verified: Option<bool>,
  /// 사용자의 계정 보호 상태
  #[serde(rename = "locked")]
  locked: Option<bool>,
  /// 사용자의 출금 보호 상태
  #[serde(rename = "wallet_locked")]
  wallet_locked: Option<bool>
}

impl MemberLevel {
  /// 사용자의 보안등급 정보
  pub fn new() -> MemberLevel {
    MemberLevel {
      security_level: None,
      fee_level: None,
      email_verified: None,
      identity_auth_verified: None,
      bank_account_verified: None,
      kakao_pay_auth_verified: None,
      locked: None,
      wallet_locked: None
    }
  }

  pub fn set_security_level(&mut self, security_level: f32) {
    self.security_level = Some(security_level);
  }

  pub fn with_security_level(mut self, security_level: f32) -> MemberLevel {
    self.security_level = Some(security_level);
    self
  }

  pub fn security_level(&self) -> Option<&f32> {
    self.security_level.as_ref()
  }

  pub fn reset_security_level(&mut self) {
    self.security_level = None;
  }

  pub fn set_fee_level(&mut self, fee_level: f32) {
    self.fee_level = Some(fee_level);
  }

  pub fn with_fee_level(mut self, fee_level: f32) -> MemberLevel {
    self.fee_level = Some(fee_level);
    self
  }

  pub fn fee_level(&self) -> Option<&f32> {
    self.fee_level.as_ref()
  }

  pub fn reset_fee_level(&mut self) {
    self.fee_level = None;
  }

  pub fn set_email_verified(&mut self, email_verified: bool) {
    self.email_verified = Some(email_verified);
  }

  pub fn with_email_verified(mut self, email_verified: bool) -> MemberLevel {
    self.email_verified = Some(email_verified);
    self
  }

  pub fn email_verified(&self) -> Option<&bool> {
    self.email_verified.as_ref()
  }

  pub fn reset_email_verified(&mut self) {
    self.email_verified = None;
  }

  pub fn set_identity_auth_verified(&mut self, identity_auth_verified: bool) {
    self.identity_auth_verified = Some(identity_auth_verified);
  }

  pub fn with_identity_auth_verified(mut self, identity_auth_verified: bool) -> MemberLevel {
    self.identity_auth_verified = Some(identity_auth_verified);
    self
  }

  pub fn identity_auth_verified(&self) -> Option<&bool> {
    self.identity_auth_verified.as_ref()
  }

  pub fn reset_identity_auth_verified(&mut self) {
    self.identity_auth_verified = None;
  }

  pub fn set_bank_account_verified(&mut self, bank_account_verified: bool) {
    self.bank_account_verified = Some(bank_account_verified);
  }

  pub fn with_bank_account_verified(mut self, bank_account_verified: bool) -> MemberLevel {
    self.bank_account_verified = Some(bank_account_verified);
    self
  }

  pub fn bank_account_verified(&self) -> Option<&bool> {
    self.bank_account_verified.as_ref()
  }

  pub fn reset_bank_account_verified(&mut self) {
    self.bank_account_verified = None;
  }

  pub fn set_kakao_pay_auth_verified(&mut self, kakao_pay_auth_verified: bool) {
    self.kakao_pay_auth_verified = Some(kakao_pay_auth_verified);
  }

  pub fn with_kakao_pay_auth_verified(mut self, kakao_pay_auth_verified: bool) -> MemberLevel {
    self.kakao_pay_auth_verified = Some(kakao_pay_auth_verified);
    self
  }

  pub fn kakao_pay_auth_verified(&self) -> Option<&bool> {
    self.kakao_pay_auth_verified.as_ref()
  }

  pub fn reset_kakao_pay_auth_verified(&mut self) {
    self.kakao_pay_auth_verified = None;
  }

  pub fn set_locked(&mut self, locked: bool) {
    self.locked = Some(locked);
  }

  pub fn with_locked(mut self, locked: bool) -> MemberLevel {
    self.locked = Some(locked);
    self
  }

  pub fn locked(&self) -> Option<&bool> {
    self.locked.as_ref()
  }

  pub fn reset_locked(&mut self) {
    self.locked = None;
  }

  pub fn set_wallet_locked(&mut self, wallet_locked: bool) {
    self.wallet_locked = Some(wallet_locked);
  }

  pub fn with_wallet_locked(mut self, wallet_locked: bool) -> MemberLevel {
    self.wallet_locked = Some(wallet_locked);
    self
  }

  pub fn wallet_locked(&self) -> Option<&bool> {
    self.wallet_locked.as_ref()
  }

  pub fn reset_wallet_locked(&mut self) {
    self.wallet_locked = None;
  }

}



