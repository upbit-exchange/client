/* 
 * Upbit Open API
 *
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrderChance {
  /// 매수 수수료 비율
  #[serde(rename = "bid_fee")]
  bid_fee: Option<String>,
  /// 매도 수수료 비율
  #[serde(rename = "ask_fee")]
  ask_fee: Option<String>,
  #[serde(rename = "market")]
  market: Option<::models::Market>,
  #[serde(rename = "bid_account")]
  bid_account: Option<::models::BidAccount>,
  #[serde(rename = "ask_account")]
  ask_account: Option<::models::AskAccount>
}

impl OrderChance {
  pub fn new() -> OrderChance {
    OrderChance {
      bid_fee: None,
      ask_fee: None,
      market: None,
      bid_account: None,
      ask_account: None
    }
  }

  pub fn set_bid_fee(&mut self, bid_fee: String) {
    self.bid_fee = Some(bid_fee);
  }

  pub fn with_bid_fee(mut self, bid_fee: String) -> OrderChance {
    self.bid_fee = Some(bid_fee);
    self
  }

  pub fn bid_fee(&self) -> Option<&String> {
    self.bid_fee.as_ref()
  }

  pub fn reset_bid_fee(&mut self) {
    self.bid_fee = None;
  }

  pub fn set_ask_fee(&mut self, ask_fee: String) {
    self.ask_fee = Some(ask_fee);
  }

  pub fn with_ask_fee(mut self, ask_fee: String) -> OrderChance {
    self.ask_fee = Some(ask_fee);
    self
  }

  pub fn ask_fee(&self) -> Option<&String> {
    self.ask_fee.as_ref()
  }

  pub fn reset_ask_fee(&mut self) {
    self.ask_fee = None;
  }

  pub fn set_market(&mut self, market: ::models::Market) {
    self.market = Some(market);
  }

  pub fn with_market(mut self, market: ::models::Market) -> OrderChance {
    self.market = Some(market);
    self
  }

  pub fn market(&self) -> Option<&::models::Market> {
    self.market.as_ref()
  }

  pub fn reset_market(&mut self) {
    self.market = None;
  }

  pub fn set_bid_account(&mut self, bid_account: ::models::BidAccount) {
    self.bid_account = Some(bid_account);
  }

  pub fn with_bid_account(mut self, bid_account: ::models::BidAccount) -> OrderChance {
    self.bid_account = Some(bid_account);
    self
  }

  pub fn bid_account(&self) -> Option<&::models::BidAccount> {
    self.bid_account.as_ref()
  }

  pub fn reset_bid_account(&mut self) {
    self.bid_account = None;
  }

  pub fn set_ask_account(&mut self, ask_account: ::models::AskAccount) {
    self.ask_account = Some(ask_account);
  }

  pub fn with_ask_account(mut self, ask_account: ::models::AskAccount) -> OrderChance {
    self.ask_account = Some(ask_account);
    self
  }

  pub fn ask_account(&self) -> Option<&::models::AskAccount> {
    self.ask_account.as_ref()
  }

  pub fn reset_ask_account(&mut self) {
    self.ask_account = None;
  }

}



