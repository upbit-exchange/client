/* 
 * Upbit Open API
 *
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Currency : 화폐 정보

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Currency {
  /// 화폐를 의미하는 영문 대문자 코드
  #[serde(rename = "code")]
  code: Option<String>,
  /// 해당 화폐의 출금 수수료
  #[serde(rename = "withdraw_fee")]
  withdraw_fee: Option<String>,
  /// 화폐의 코인 여부
  #[serde(rename = "is_coin")]
  is_coin: Option<bool>,
  /// 해당 화폐의 지갑 상태
  #[serde(rename = "wallet_state")]
  wallet_state: Option<String>,
  /// 해당 화폐가 지원하는 입출금 정보
  #[serde(rename = "wallet_support")]
  wallet_support: Option<Vec<String>>
}

impl Currency {
  /// 화폐 정보
  pub fn new() -> Currency {
    Currency {
      code: None,
      withdraw_fee: None,
      is_coin: None,
      wallet_state: None,
      wallet_support: None
    }
  }

  pub fn set_code(&mut self, code: String) {
    self.code = Some(code);
  }

  pub fn with_code(mut self, code: String) -> Currency {
    self.code = Some(code);
    self
  }

  pub fn code(&self) -> Option<&String> {
    self.code.as_ref()
  }

  pub fn reset_code(&mut self) {
    self.code = None;
  }

  pub fn set_withdraw_fee(&mut self, withdraw_fee: String) {
    self.withdraw_fee = Some(withdraw_fee);
  }

  pub fn with_withdraw_fee(mut self, withdraw_fee: String) -> Currency {
    self.withdraw_fee = Some(withdraw_fee);
    self
  }

  pub fn withdraw_fee(&self) -> Option<&String> {
    self.withdraw_fee.as_ref()
  }

  pub fn reset_withdraw_fee(&mut self) {
    self.withdraw_fee = None;
  }

  pub fn set_is_coin(&mut self, is_coin: bool) {
    self.is_coin = Some(is_coin);
  }

  pub fn with_is_coin(mut self, is_coin: bool) -> Currency {
    self.is_coin = Some(is_coin);
    self
  }

  pub fn is_coin(&self) -> Option<&bool> {
    self.is_coin.as_ref()
  }

  pub fn reset_is_coin(&mut self) {
    self.is_coin = None;
  }

  pub fn set_wallet_state(&mut self, wallet_state: String) {
    self.wallet_state = Some(wallet_state);
  }

  pub fn with_wallet_state(mut self, wallet_state: String) -> Currency {
    self.wallet_state = Some(wallet_state);
    self
  }

  pub fn wallet_state(&self) -> Option<&String> {
    self.wallet_state.as_ref()
  }

  pub fn reset_wallet_state(&mut self) {
    self.wallet_state = None;
  }

  pub fn set_wallet_support(&mut self, wallet_support: Vec<String>) {
    self.wallet_support = Some(wallet_support);
  }

  pub fn with_wallet_support(mut self, wallet_support: Vec<String>) -> Currency {
    self.wallet_support = Some(wallet_support);
    self
  }

  pub fn wallet_support(&self) -> Option<&Vec<String>> {
    self.wallet_support.as_ref()
  }

  pub fn reset_wallet_support(&mut self) {
    self.wallet_support = None;
  }

}



