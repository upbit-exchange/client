/* 
 * Upbit Open API
 *
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DepositCompleteResponse {
  /// 화폐를 의미하는 영문 대문자 코드
  #[serde(rename = "currency")]
  currency: Option<String>,
  /// 입금 주소
  #[serde(rename = "deposit_address")]
  deposit_address: Option<String>,
  /// 2차 입금 주소
  #[serde(rename = "secondary_address")]
  secondary_address: Option<String>
}

impl DepositCompleteResponse {
  pub fn new() -> DepositCompleteResponse {
    DepositCompleteResponse {
      currency: None,
      deposit_address: None,
      secondary_address: None
    }
  }

  pub fn set_currency(&mut self, currency: String) {
    self.currency = Some(currency);
  }

  pub fn with_currency(mut self, currency: String) -> DepositCompleteResponse {
    self.currency = Some(currency);
    self
  }

  pub fn currency(&self) -> Option<&String> {
    self.currency.as_ref()
  }

  pub fn reset_currency(&mut self) {
    self.currency = None;
  }

  pub fn set_deposit_address(&mut self, deposit_address: String) {
    self.deposit_address = Some(deposit_address);
  }

  pub fn with_deposit_address(mut self, deposit_address: String) -> DepositCompleteResponse {
    self.deposit_address = Some(deposit_address);
    self
  }

  pub fn deposit_address(&self) -> Option<&String> {
    self.deposit_address.as_ref()
  }

  pub fn reset_deposit_address(&mut self) {
    self.deposit_address = None;
  }

  pub fn set_secondary_address(&mut self, secondary_address: String) {
    self.secondary_address = Some(secondary_address);
  }

  pub fn with_secondary_address(mut self, secondary_address: String) -> DepositCompleteResponse {
    self.secondary_address = Some(secondary_address);
    self
  }

  pub fn secondary_address(&self) -> Option<&String> {
    self.secondary_address.as_ref()
  }

  pub fn reset_secondary_address(&mut self) {
    self.secondary_address = None;
  }

}



