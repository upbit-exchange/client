/* 
 * Upbit Open API
 *
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Trade {
  /// 마켓의 유일 키
  #[serde(rename = "market")]
  market: Option<String>,
  /// 체결의 고유 아이디
  #[serde(rename = "uuid")]
  uuid: Option<String>,
  /// 체결 가격
  #[serde(rename = "price")]
  price: Option<String>,
  /// 체결 양
  #[serde(rename = "volume")]
  volume: Option<String>,
  /// 체결된 총 가격
  #[serde(rename = "funds")]
  funds: Option<String>,
  /// 체결 종류
  #[serde(rename = "side")]
  side: Option<String>,
  /// 체결 시각
  #[serde(rename = "created_at")]
  created_at: Option<String>
}

impl Trade {
  pub fn new() -> Trade {
    Trade {
      market: None,
      uuid: None,
      price: None,
      volume: None,
      funds: None,
      side: None,
      created_at: None
    }
  }

  pub fn set_market(&mut self, market: String) {
    self.market = Some(market);
  }

  pub fn with_market(mut self, market: String) -> Trade {
    self.market = Some(market);
    self
  }

  pub fn market(&self) -> Option<&String> {
    self.market.as_ref()
  }

  pub fn reset_market(&mut self) {
    self.market = None;
  }

  pub fn set_uuid(&mut self, uuid: String) {
    self.uuid = Some(uuid);
  }

  pub fn with_uuid(mut self, uuid: String) -> Trade {
    self.uuid = Some(uuid);
    self
  }

  pub fn uuid(&self) -> Option<&String> {
    self.uuid.as_ref()
  }

  pub fn reset_uuid(&mut self) {
    self.uuid = None;
  }

  pub fn set_price(&mut self, price: String) {
    self.price = Some(price);
  }

  pub fn with_price(mut self, price: String) -> Trade {
    self.price = Some(price);
    self
  }

  pub fn price(&self) -> Option<&String> {
    self.price.as_ref()
  }

  pub fn reset_price(&mut self) {
    self.price = None;
  }

  pub fn set_volume(&mut self, volume: String) {
    self.volume = Some(volume);
  }

  pub fn with_volume(mut self, volume: String) -> Trade {
    self.volume = Some(volume);
    self
  }

  pub fn volume(&self) -> Option<&String> {
    self.volume.as_ref()
  }

  pub fn reset_volume(&mut self) {
    self.volume = None;
  }

  pub fn set_funds(&mut self, funds: String) {
    self.funds = Some(funds);
  }

  pub fn with_funds(mut self, funds: String) -> Trade {
    self.funds = Some(funds);
    self
  }

  pub fn funds(&self) -> Option<&String> {
    self.funds.as_ref()
  }

  pub fn reset_funds(&mut self) {
    self.funds = None;
  }

  pub fn set_side(&mut self, side: String) {
    self.side = Some(side);
  }

  pub fn with_side(mut self, side: String) -> Trade {
    self.side = Some(side);
    self
  }

  pub fn side(&self) -> Option<&String> {
    self.side.as_ref()
  }

  pub fn reset_side(&mut self) {
    self.side = None;
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> Trade {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

}



