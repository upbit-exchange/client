/* 
 * Upbit Open API
 *
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NewOrder {
  /// 주문의 고유 아이디
  #[serde(rename = "uuid")]
  uuid: Option<String>,
  /// 주문 종류
  #[serde(rename = "side")]
  side: Option<String>,
  /// 주문 방식
  #[serde(rename = "ord_type")]
  ord_type: Option<String>,
  /// 주문 당시 화폐 가격
  #[serde(rename = "price")]
  price: Option<String>,
  /// 체결 가격의 평균가
  #[serde(rename = "avg_price")]
  avg_price: Option<String>,
  /// 주문 상태
  #[serde(rename = "state")]
  state: Option<String>,
  /// 마켓의 유일키
  #[serde(rename = "market")]
  market: Option<String>,
  /// 주문 생성 시간
  #[serde(rename = "created_at")]
  created_at: Option<String>,
  /// 사용자가 입력한 주문 양
  #[serde(rename = "volume")]
  volume: Option<String>,
  /// 체결 후 남은 주문 양
  #[serde(rename = "remaining_volume")]
  remaining_volume: Option<String>,
  /// 수수료로 예약된 비용
  #[serde(rename = "reserved_fee")]
  reserved_fee: Option<String>,
  /// 남은 수수료
  #[serde(rename = "remaining_fee")]
  remaining_fee: Option<String>,
  /// 사용된 수수료
  #[serde(rename = "paid_fee")]
  paid_fee: Option<String>,
  /// 거래에 사용중인 비용
  #[serde(rename = "locked")]
  locked: Option<String>,
  /// 체결된 양
  #[serde(rename = "executed_volume")]
  executed_volume: Option<String>,
  /// 해당 주문에 걸린 체결 수
  #[serde(rename = "trades_count")]
  trades_count: Option<f32>
}

impl NewOrder {
  pub fn new() -> NewOrder {
    NewOrder {
      uuid: None,
      side: None,
      ord_type: None,
      price: None,
      avg_price: None,
      state: None,
      market: None,
      created_at: None,
      volume: None,
      remaining_volume: None,
      reserved_fee: None,
      remaining_fee: None,
      paid_fee: None,
      locked: None,
      executed_volume: None,
      trades_count: None
    }
  }

  pub fn set_uuid(&mut self, uuid: String) {
    self.uuid = Some(uuid);
  }

  pub fn with_uuid(mut self, uuid: String) -> NewOrder {
    self.uuid = Some(uuid);
    self
  }

  pub fn uuid(&self) -> Option<&String> {
    self.uuid.as_ref()
  }

  pub fn reset_uuid(&mut self) {
    self.uuid = None;
  }

  pub fn set_side(&mut self, side: String) {
    self.side = Some(side);
  }

  pub fn with_side(mut self, side: String) -> NewOrder {
    self.side = Some(side);
    self
  }

  pub fn side(&self) -> Option<&String> {
    self.side.as_ref()
  }

  pub fn reset_side(&mut self) {
    self.side = None;
  }

  pub fn set_ord_type(&mut self, ord_type: String) {
    self.ord_type = Some(ord_type);
  }

  pub fn with_ord_type(mut self, ord_type: String) -> NewOrder {
    self.ord_type = Some(ord_type);
    self
  }

  pub fn ord_type(&self) -> Option<&String> {
    self.ord_type.as_ref()
  }

  pub fn reset_ord_type(&mut self) {
    self.ord_type = None;
  }

  pub fn set_price(&mut self, price: String) {
    self.price = Some(price);
  }

  pub fn with_price(mut self, price: String) -> NewOrder {
    self.price = Some(price);
    self
  }

  pub fn price(&self) -> Option<&String> {
    self.price.as_ref()
  }

  pub fn reset_price(&mut self) {
    self.price = None;
  }

  pub fn set_avg_price(&mut self, avg_price: String) {
    self.avg_price = Some(avg_price);
  }

  pub fn with_avg_price(mut self, avg_price: String) -> NewOrder {
    self.avg_price = Some(avg_price);
    self
  }

  pub fn avg_price(&self) -> Option<&String> {
    self.avg_price.as_ref()
  }

  pub fn reset_avg_price(&mut self) {
    self.avg_price = None;
  }

  pub fn set_state(&mut self, state: String) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: String) -> NewOrder {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&String> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

  pub fn set_market(&mut self, market: String) {
    self.market = Some(market);
  }

  pub fn with_market(mut self, market: String) -> NewOrder {
    self.market = Some(market);
    self
  }

  pub fn market(&self) -> Option<&String> {
    self.market.as_ref()
  }

  pub fn reset_market(&mut self) {
    self.market = None;
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> NewOrder {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_volume(&mut self, volume: String) {
    self.volume = Some(volume);
  }

  pub fn with_volume(mut self, volume: String) -> NewOrder {
    self.volume = Some(volume);
    self
  }

  pub fn volume(&self) -> Option<&String> {
    self.volume.as_ref()
  }

  pub fn reset_volume(&mut self) {
    self.volume = None;
  }

  pub fn set_remaining_volume(&mut self, remaining_volume: String) {
    self.remaining_volume = Some(remaining_volume);
  }

  pub fn with_remaining_volume(mut self, remaining_volume: String) -> NewOrder {
    self.remaining_volume = Some(remaining_volume);
    self
  }

  pub fn remaining_volume(&self) -> Option<&String> {
    self.remaining_volume.as_ref()
  }

  pub fn reset_remaining_volume(&mut self) {
    self.remaining_volume = None;
  }

  pub fn set_reserved_fee(&mut self, reserved_fee: String) {
    self.reserved_fee = Some(reserved_fee);
  }

  pub fn with_reserved_fee(mut self, reserved_fee: String) -> NewOrder {
    self.reserved_fee = Some(reserved_fee);
    self
  }

  pub fn reserved_fee(&self) -> Option<&String> {
    self.reserved_fee.as_ref()
  }

  pub fn reset_reserved_fee(&mut self) {
    self.reserved_fee = None;
  }

  pub fn set_remaining_fee(&mut self, remaining_fee: String) {
    self.remaining_fee = Some(remaining_fee);
  }

  pub fn with_remaining_fee(mut self, remaining_fee: String) -> NewOrder {
    self.remaining_fee = Some(remaining_fee);
    self
  }

  pub fn remaining_fee(&self) -> Option<&String> {
    self.remaining_fee.as_ref()
  }

  pub fn reset_remaining_fee(&mut self) {
    self.remaining_fee = None;
  }

  pub fn set_paid_fee(&mut self, paid_fee: String) {
    self.paid_fee = Some(paid_fee);
  }

  pub fn with_paid_fee(mut self, paid_fee: String) -> NewOrder {
    self.paid_fee = Some(paid_fee);
    self
  }

  pub fn paid_fee(&self) -> Option<&String> {
    self.paid_fee.as_ref()
  }

  pub fn reset_paid_fee(&mut self) {
    self.paid_fee = None;
  }

  pub fn set_locked(&mut self, locked: String) {
    self.locked = Some(locked);
  }

  pub fn with_locked(mut self, locked: String) -> NewOrder {
    self.locked = Some(locked);
    self
  }

  pub fn locked(&self) -> Option<&String> {
    self.locked.as_ref()
  }

  pub fn reset_locked(&mut self) {
    self.locked = None;
  }

  pub fn set_executed_volume(&mut self, executed_volume: String) {
    self.executed_volume = Some(executed_volume);
  }

  pub fn with_executed_volume(mut self, executed_volume: String) -> NewOrder {
    self.executed_volume = Some(executed_volume);
    self
  }

  pub fn executed_volume(&self) -> Option<&String> {
    self.executed_volume.as_ref()
  }

  pub fn reset_executed_volume(&mut self) {
    self.executed_volume = None;
  }

  pub fn set_trades_count(&mut self, trades_count: f32) {
    self.trades_count = Some(trades_count);
  }

  pub fn with_trades_count(mut self, trades_count: f32) -> NewOrder {
    self.trades_count = Some(trades_count);
    self
  }

  pub fn trades_count(&self) -> Option<&f32> {
    self.trades_count.as_ref()
  }

  pub fn reset_trades_count(&mut self) {
    self.trades_count = None;
  }

}



