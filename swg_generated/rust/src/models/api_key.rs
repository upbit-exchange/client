/* 
 * Upbit Open API
 *
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ApiKey {
  #[serde(rename = "access_key")]
  access_key: Option<String>,
  #[serde(rename = "expire_at")]
  expire_at: Option<String>
}

impl ApiKey {
  pub fn new() -> ApiKey {
    ApiKey {
      access_key: None,
      expire_at: None
    }
  }

  pub fn set_access_key(&mut self, access_key: String) {
    self.access_key = Some(access_key);
  }

  pub fn with_access_key(mut self, access_key: String) -> ApiKey {
    self.access_key = Some(access_key);
    self
  }

  pub fn access_key(&self) -> Option<&String> {
    self.access_key.as_ref()
  }

  pub fn reset_access_key(&mut self) {
    self.access_key = None;
  }

  pub fn set_expire_at(&mut self, expire_at: String) {
    self.expire_at = Some(expire_at);
  }

  pub fn with_expire_at(mut self, expire_at: String) -> ApiKey {
    self.expire_at = Some(expire_at);
    self
  }

  pub fn expire_at(&self) -> Option<&String> {
    self.expire_at.as_ref()
  }

  pub fn reset_expire_at(&mut self) {
    self.expire_at = None;
  }

}



