/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.Error
import io.swagger.client.model.Number
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class CandleApi(
  val defBasePath: String = "https://api.upbit.com/v1",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new CandleApiAsyncHelper(client, config)

  /**
   * 시세 캔들 조회 (일 단위)
   * ## 일(Day) 캔들 
   *
   * @param market 마켓 코드 (ex. KRW-BTC)  
   * @param to 마지막 캔들 시각 (exclusive). 포맷 : &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ssXXX&#x60; or &#x60;yyyy-MM-dd HH:mm:ss&#x60;. 비워서 요청 시 가장 최근 캔들  (optional)
   * @param count 캔들 개수  (optional)
   * @param convertingPriceUnit 종가 환산 화폐 단위 (생략 가능, KRW로 명시할 시 원화 환산 가격을 반환.) &#x60;convertingPriceUnit&#x60; 파라미터의 경우, 원화 마켓이 아닌 다른 마켓(ex. BTC, ETH)의 일봉 요청 시 종가를 명시된 파라미터 값으로 환산해 &#x60;converted_trade_price&#x60; 필드에 추가하여 반환합니다. 현재는 원화(&#x60;KRW&#x60;) 로 변환하는 기능만 제공하며 추후 기능을 확장할 수 있습니다.  (optional, default to KRW)
   * @return Any
   */
  def candleDays(market: String, to: Option[String] = None, count: Option[Number] = None, convertingPriceUnit: Option[String] = Option("KRW")): Option[Any] = {
    val await = Try(Await.result(candleDaysAsync(market, to, count, convertingPriceUnit), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * 시세 캔들 조회 (일 단위) asynchronously
   * ## 일(Day) 캔들 
   *
   * @param market 마켓 코드 (ex. KRW-BTC)  
   * @param to 마지막 캔들 시각 (exclusive). 포맷 : &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ssXXX&#x60; or &#x60;yyyy-MM-dd HH:mm:ss&#x60;. 비워서 요청 시 가장 최근 캔들  (optional)
   * @param count 캔들 개수  (optional)
   * @param convertingPriceUnit 종가 환산 화폐 단위 (생략 가능, KRW로 명시할 시 원화 환산 가격을 반환.) &#x60;convertingPriceUnit&#x60; 파라미터의 경우, 원화 마켓이 아닌 다른 마켓(ex. BTC, ETH)의 일봉 요청 시 종가를 명시된 파라미터 값으로 환산해 &#x60;converted_trade_price&#x60; 필드에 추가하여 반환합니다. 현재는 원화(&#x60;KRW&#x60;) 로 변환하는 기능만 제공하며 추후 기능을 확장할 수 있습니다.  (optional, default to KRW)
   * @return Future(Any)
   */
  def candleDaysAsync(market: String, to: Option[String] = None, count: Option[Number] = None, convertingPriceUnit: Option[String] = Option("KRW")): Future[Any] = {
      helper.candleDays(market, to, count, convertingPriceUnit)
  }

  /**
   * 시세 캔들 조회 (분 단위)
   * ## 분(Minute) 캔들 
   *
   * @param unit 분 단위. 가능한 값 : 1, 3, 5, 15, 10, 30, 60, 240  
   * @param market 마켓 코드 (ex. KRW-BTC)  
   * @param to 마지막 캔들 시각 (exclusive). 포맷 : &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ssXXX&#x60; or &#x60;yyyy-MM-dd HH:mm:ss&#x60;. 비워서 요청 시 가장 최근 캔들  (optional)
   * @param count 캔들 개수 (최대 200개까지 요청 가능)  (optional)
   * @return Any
   */
  def candleMinutes(unit: Integer, market: String, to: Option[String] = None, count: Option[Number] = None): Option[Any] = {
    val await = Try(Await.result(candleMinutesAsync(unit, market, to, count), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * 시세 캔들 조회 (분 단위) asynchronously
   * ## 분(Minute) 캔들 
   *
   * @param unit 분 단위. 가능한 값 : 1, 3, 5, 15, 10, 30, 60, 240  
   * @param market 마켓 코드 (ex. KRW-BTC)  
   * @param to 마지막 캔들 시각 (exclusive). 포맷 : &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ssXXX&#x60; or &#x60;yyyy-MM-dd HH:mm:ss&#x60;. 비워서 요청 시 가장 최근 캔들  (optional)
   * @param count 캔들 개수 (최대 200개까지 요청 가능)  (optional)
   * @return Future(Any)
   */
  def candleMinutesAsync(unit: Integer, market: String, to: Option[String] = None, count: Option[Number] = None): Future[Any] = {
      helper.candleMinutes(unit, market, to, count)
  }

  /**
   * 시세 캔들 조회 (월 단위)
   * ## 월(Month) 캔들 
   *
   * @param market 마켓 코드 (ex. KRW-BTC)  
   * @param to 마지막 캔들 시각 (exclusive). 포맷 : &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ssXXX&#x60; or &#x60;yyyy-MM-dd HH:mm:ss&#x60;. 비워서 요청 시 가장 최근 캔들  (optional)
   * @param count 캔들 개수  (optional)
   * @return Any
   */
  def candleMonth(market: String, to: Option[String] = None, count: Option[Number] = None): Option[Any] = {
    val await = Try(Await.result(candleMonthAsync(market, to, count), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * 시세 캔들 조회 (월 단위) asynchronously
   * ## 월(Month) 캔들 
   *
   * @param market 마켓 코드 (ex. KRW-BTC)  
   * @param to 마지막 캔들 시각 (exclusive). 포맷 : &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ssXXX&#x60; or &#x60;yyyy-MM-dd HH:mm:ss&#x60;. 비워서 요청 시 가장 최근 캔들  (optional)
   * @param count 캔들 개수  (optional)
   * @return Future(Any)
   */
  def candleMonthAsync(market: String, to: Option[String] = None, count: Option[Number] = None): Future[Any] = {
      helper.candleMonth(market, to, count)
  }

  /**
   * 시세 캔들 조회 (주 단위)
   * ## 주(Week) 캔들 
   *
   * @param market 마켓 코드 (ex. KRW-BTC)  
   * @param to 마지막 캔들 시각 (exclusive). 포맷 : &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ssXXX&#x60; or &#x60;yyyy-MM-dd HH:mm:ss&#x60;. 비워서 요청 시 가장 최근 캔들  (optional)
   * @param count 캔들 개수  (optional)
   * @return Any
   */
  def candleWeeks(market: String, to: Option[String] = None, count: Option[Number] = None): Option[Any] = {
    val await = Try(Await.result(candleWeeksAsync(market, to, count), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * 시세 캔들 조회 (주 단위) asynchronously
   * ## 주(Week) 캔들 
   *
   * @param market 마켓 코드 (ex. KRW-BTC)  
   * @param to 마지막 캔들 시각 (exclusive). 포맷 : &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ssXXX&#x60; or &#x60;yyyy-MM-dd HH:mm:ss&#x60;. 비워서 요청 시 가장 최근 캔들  (optional)
   * @param count 캔들 개수  (optional)
   * @return Future(Any)
   */
  def candleWeeksAsync(market: String, to: Option[String] = None, count: Option[Number] = None): Future[Any] = {
      helper.candleWeeks(market, to, count)
  }

}

class CandleApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def candleDays(market: String,
    to: Option[String] = None,
    count: Option[Number] = None,
    convertingPriceUnit: Option[String] = Option("KRW")
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/candles/days"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (market == null) throw new Exception("Missing required parameter 'market' when calling CandleApi->candleDays")

    queryParams += "market" -> market.toString
    to match {
      case Some(param) => queryParams += "to" -> param.toString
      case _ => queryParams
    }
    count match {
      case Some(param) => queryParams += "count" -> param.toString
      case _ => queryParams
    }
    convertingPriceUnit match {
      case Some(param) => queryParams += "convertingPriceUnit" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def candleMinutes(unit: Integer,
    market: String,
    to: Option[String] = None,
    count: Option[Number] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/candles/minutes/{unit}")
      replaceAll("\\{" + "unit" + "\\}", unit.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (market == null) throw new Exception("Missing required parameter 'market' when calling CandleApi->candleMinutes")

    queryParams += "market" -> market.toString
    to match {
      case Some(param) => queryParams += "to" -> param.toString
      case _ => queryParams
    }
    count match {
      case Some(param) => queryParams += "count" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def candleMonth(market: String,
    to: Option[String] = None,
    count: Option[Number] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/candles/months"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (market == null) throw new Exception("Missing required parameter 'market' when calling CandleApi->candleMonth")

    queryParams += "market" -> market.toString
    to match {
      case Some(param) => queryParams += "to" -> param.toString
      case _ => queryParams
    }
    count match {
      case Some(param) => queryParams += "count" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def candleWeeks(market: String,
    to: Option[String] = None,
    count: Option[Number] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/candles/weeks"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (market == null) throw new Exception("Missing required parameter 'market' when calling CandleApi->candleWeeks")

    queryParams += "market" -> market.toString
    to match {
      case Some(param) => queryParams += "to" -> param.toString
      case _ => queryParams
    }
    count match {
      case Some(param) => queryParams += "count" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
