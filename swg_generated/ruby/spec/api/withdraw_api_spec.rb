=begin
#Upbit Open API

### REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 

OpenAPI spec version: 1.0.0
Contact: ujhin942@gmail.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.18

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::WithdrawApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'WithdrawApi' do
  before do
    # run before each test
    @instance = SwaggerClient::WithdrawApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of WithdrawApi' do
    it 'should create an instance of WithdrawApi' do
      expect(@instance).to be_instance_of(SwaggerClient::WithdrawApi)
    end
  end

  # unit tests for withdraw_chance
  # 출금 가능 정보
  # ## 해당 통화의 가능한 출금 정보를 확인한다. 
  # @param currency Currency Symbol 
  # @param [Hash] opts the optional parameters
  # @return [WithdrawChance]
  describe 'withdraw_chance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for withdraw_coin
  # 코인 출금하기
  # ## 코인 출금을 요청한다. **NOTE**: 바로출금 이용 시 유의사항 업비트 회원의 주소가 아닌 주소로 바로출금을 요청하는 경우, 출금이 정상적으로 수행되지 않습니다. 반드시 주소를 확인 후 출금을 진행하시기 바랍니다. 
  # @param currency Currency 코드 
  # @param amount 출금 수량 
  # @param address 출금 가능 주소에 등록된 출금 주소 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :secondary_address 2차 출금 주소 (필요한 코인에 한해서) 
  # @option opts [String] :transaction_type 출금 유형 - default : 일반출금 - internal : 바로출금 
  # @return [WithdrawCoin]
  describe 'withdraw_coin test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for withdraw_info
  # 개별 출금 조회
  # ## 출금 UUID를 통해 개별 출금 정보를 조회한다. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :uuid 출금 UUID 
  # @option opts [String] :txid 출금 TXID 
  # @option opts [String] :currency Currency 코드 
  # @return [Withdraw]
  describe 'withdraw_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for withdraw_info_all
  # 출금 리스트 조회
  # ## 출금 리스트를 조회한다. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :currency Currency 코드 
  # @option opts [String] :state 출금 상태 - submitting : 처리 중 - submitted : 처리 완료 - almost_accepted : 출금대기중 - rejected : 거부 - accepted : 승인됨 - processing : 처리 중 - done : 완료 - canceled : 취소됨 
  # @option opts [Array<String>] :uuids 출금 UUID의 목록 
  # @option opts [Array<String>] :txids 출금 TXID의 목록 
  # @option opts [Float] :limit 개수 제한 (default: 100, max: 100) 
  # @option opts [Float] :page 페이지 수, default: 1 
  # @option opts [String] :order_by 정렬 방식 - asc : 오름차순 - desc : 내림차순 (default) 
  # @return [Array<Withdraw>]
  describe 'withdraw_info_all test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for withdraw_krw
  # 원화 출금하기
  # ## 원화 출금을 요청한다. 등록된 출금 계좌로 출금된다. 
  # @param amount 출금 원화 수량 
  # @param [Hash] opts the optional parameters
  # @return [Withdraw]
  describe 'withdraw_krw test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
