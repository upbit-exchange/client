/**
 * Upbit Open API
 * ## REST API for Upbit Exchange - Base URL: [https://api.upbit.com] - Official Upbit API Documents: [https://docs.upbit.com] - Official Support email: [open-api@upbit.com] 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ujhin942@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import io.swagger.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("APIKey".equalsIgnoreCase(className)) {
      return new TypeToken<List<APIKey>>(){}.getType();
    }
    
    if ("Account".equalsIgnoreCase(className)) {
      return new TypeToken<List<Account>>(){}.getType();
    }
    
    if ("Ask".equalsIgnoreCase(className)) {
      return new TypeToken<List<Ask>>(){}.getType();
    }
    
    if ("AskAccount".equalsIgnoreCase(className)) {
      return new TypeToken<List<AskAccount>>(){}.getType();
    }
    
    if ("Bid".equalsIgnoreCase(className)) {
      return new TypeToken<List<Bid>>(){}.getType();
    }
    
    if ("BidAccount".equalsIgnoreCase(className)) {
      return new TypeToken<List<BidAccount>>(){}.getType();
    }
    
    if ("CandleDate".equalsIgnoreCase(className)) {
      return new TypeToken<List<CandleDate>>(){}.getType();
    }
    
    if ("CandleDays".equalsIgnoreCase(className)) {
      return new TypeToken<List<CandleDays>>(){}.getType();
    }
    
    if ("CandleMinutes".equalsIgnoreCase(className)) {
      return new TypeToken<List<CandleMinutes>>(){}.getType();
    }
    
    if ("Currency".equalsIgnoreCase(className)) {
      return new TypeToken<List<Currency>>(){}.getType();
    }
    
    if ("Deposit".equalsIgnoreCase(className)) {
      return new TypeToken<List<Deposit>>(){}.getType();
    }
    
    if ("DepositCompleteResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<DepositCompleteResponse>>(){}.getType();
    }
    
    if ("DepositTransferResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<DepositTransferResponse>>(){}.getType();
    }
    
    if ("Error".equalsIgnoreCase(className)) {
      return new TypeToken<List<Error>>(){}.getType();
    }
    
    if ("ErrorInfo".equalsIgnoreCase(className)) {
      return new TypeToken<List<ErrorInfo>>(){}.getType();
    }
    
    if ("Market".equalsIgnoreCase(className)) {
      return new TypeToken<List<Market>>(){}.getType();
    }
    
    if ("MarketInfo".equalsIgnoreCase(className)) {
      return new TypeToken<List<MarketInfo>>(){}.getType();
    }
    
    if ("MemberLevel".equalsIgnoreCase(className)) {
      return new TypeToken<List<MemberLevel>>(){}.getType();
    }
    
    if ("NewOrder".equalsIgnoreCase(className)) {
      return new TypeToken<List<NewOrder>>(){}.getType();
    }
    
    if ("Order".equalsIgnoreCase(className)) {
      return new TypeToken<List<Order>>(){}.getType();
    }
    
    if ("OrderChance".equalsIgnoreCase(className)) {
      return new TypeToken<List<OrderChance>>(){}.getType();
    }
    
    if ("OrderInfo".equalsIgnoreCase(className)) {
      return new TypeToken<List<OrderInfo>>(){}.getType();
    }
    
    if ("Orderbook".equalsIgnoreCase(className)) {
      return new TypeToken<List<Orderbook>>(){}.getType();
    }
    
    if ("OrderbookUnit".equalsIgnoreCase(className)) {
      return new TypeToken<List<OrderbookUnit>>(){}.getType();
    }
    
    if ("Ticker".equalsIgnoreCase(className)) {
      return new TypeToken<List<Ticker>>(){}.getType();
    }
    
    if ("Trade".equalsIgnoreCase(className)) {
      return new TypeToken<List<Trade>>(){}.getType();
    }
    
    if ("TradeTicks".equalsIgnoreCase(className)) {
      return new TypeToken<List<TradeTicks>>(){}.getType();
    }
    
    if ("Wallet".equalsIgnoreCase(className)) {
      return new TypeToken<List<Wallet>>(){}.getType();
    }
    
    if ("Withdraw".equalsIgnoreCase(className)) {
      return new TypeToken<List<Withdraw>>(){}.getType();
    }
    
    if ("WithdrawChance".equalsIgnoreCase(className)) {
      return new TypeToken<List<WithdrawChance>>(){}.getType();
    }
    
    if ("WithdrawCoin".equalsIgnoreCase(className)) {
      return new TypeToken<List<WithdrawCoin>>(){}.getType();
    }
    
    if ("WithdrawLimit".equalsIgnoreCase(className)) {
      return new TypeToken<List<WithdrawLimit>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("APIKey".equalsIgnoreCase(className)) {
      return new TypeToken<APIKey>(){}.getType();
    }
    
    if ("Account".equalsIgnoreCase(className)) {
      return new TypeToken<Account>(){}.getType();
    }
    
    if ("Ask".equalsIgnoreCase(className)) {
      return new TypeToken<Ask>(){}.getType();
    }
    
    if ("AskAccount".equalsIgnoreCase(className)) {
      return new TypeToken<AskAccount>(){}.getType();
    }
    
    if ("Bid".equalsIgnoreCase(className)) {
      return new TypeToken<Bid>(){}.getType();
    }
    
    if ("BidAccount".equalsIgnoreCase(className)) {
      return new TypeToken<BidAccount>(){}.getType();
    }
    
    if ("CandleDate".equalsIgnoreCase(className)) {
      return new TypeToken<CandleDate>(){}.getType();
    }
    
    if ("CandleDays".equalsIgnoreCase(className)) {
      return new TypeToken<CandleDays>(){}.getType();
    }
    
    if ("CandleMinutes".equalsIgnoreCase(className)) {
      return new TypeToken<CandleMinutes>(){}.getType();
    }
    
    if ("Currency".equalsIgnoreCase(className)) {
      return new TypeToken<Currency>(){}.getType();
    }
    
    if ("Deposit".equalsIgnoreCase(className)) {
      return new TypeToken<Deposit>(){}.getType();
    }
    
    if ("DepositCompleteResponse".equalsIgnoreCase(className)) {
      return new TypeToken<DepositCompleteResponse>(){}.getType();
    }
    
    if ("DepositTransferResponse".equalsIgnoreCase(className)) {
      return new TypeToken<DepositTransferResponse>(){}.getType();
    }
    
    if ("Error".equalsIgnoreCase(className)) {
      return new TypeToken<Error>(){}.getType();
    }
    
    if ("ErrorInfo".equalsIgnoreCase(className)) {
      return new TypeToken<ErrorInfo>(){}.getType();
    }
    
    if ("Market".equalsIgnoreCase(className)) {
      return new TypeToken<Market>(){}.getType();
    }
    
    if ("MarketInfo".equalsIgnoreCase(className)) {
      return new TypeToken<MarketInfo>(){}.getType();
    }
    
    if ("MemberLevel".equalsIgnoreCase(className)) {
      return new TypeToken<MemberLevel>(){}.getType();
    }
    
    if ("NewOrder".equalsIgnoreCase(className)) {
      return new TypeToken<NewOrder>(){}.getType();
    }
    
    if ("Order".equalsIgnoreCase(className)) {
      return new TypeToken<Order>(){}.getType();
    }
    
    if ("OrderChance".equalsIgnoreCase(className)) {
      return new TypeToken<OrderChance>(){}.getType();
    }
    
    if ("OrderInfo".equalsIgnoreCase(className)) {
      return new TypeToken<OrderInfo>(){}.getType();
    }
    
    if ("Orderbook".equalsIgnoreCase(className)) {
      return new TypeToken<Orderbook>(){}.getType();
    }
    
    if ("OrderbookUnit".equalsIgnoreCase(className)) {
      return new TypeToken<OrderbookUnit>(){}.getType();
    }
    
    if ("Ticker".equalsIgnoreCase(className)) {
      return new TypeToken<Ticker>(){}.getType();
    }
    
    if ("Trade".equalsIgnoreCase(className)) {
      return new TypeToken<Trade>(){}.getType();
    }
    
    if ("TradeTicks".equalsIgnoreCase(className)) {
      return new TypeToken<TradeTicks>(){}.getType();
    }
    
    if ("Wallet".equalsIgnoreCase(className)) {
      return new TypeToken<Wallet>(){}.getType();
    }
    
    if ("Withdraw".equalsIgnoreCase(className)) {
      return new TypeToken<Withdraw>(){}.getType();
    }
    
    if ("WithdrawChance".equalsIgnoreCase(className)) {
      return new TypeToken<WithdrawChance>(){}.getType();
    }
    
    if ("WithdrawCoin".equalsIgnoreCase(className)) {
      return new TypeToken<WithdrawCoin>(){}.getType();
    }
    
    if ("WithdrawLimit".equalsIgnoreCase(className)) {
      return new TypeToken<WithdrawLimit>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
